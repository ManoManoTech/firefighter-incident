{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FireFighter","text":"<p>FireFighter is ManoMano's in-house Incident Management Tool.</p> <p>It helps manage incidents, by automatically creating a Slack channel for communication, integrating with Jira (with P1-P5 priority mapping), and much more.</p> <p></p> <p>What's Incident Management?</p> <p>Incident Management is a set of processes and tools to help teams detect, respond to, and resolve incidents quickly and effectively.</p> <p>Incidents are unplanned interruptions or reductions in quality of services, like a service outage or a security breach.</p>"},{"location":"#features","title":"Features","text":"<ul> <li> Slack first <p>Don't leave Slack to manage incidents, and keep your team in the loop.</p> <p> Learn more</p> </li> </ul> <ul> <li> Forward to PagerDuty (optional) <p>Expose your on-call schedule, and allow anyone to escalate to PagerDuty.</p> <p> Learn more</p> </li> </ul> <ul> <li> Follow on Jira (optional) <p>Create a Jira ticket for the incident with full P1-P5 priority mapping.</p> <p> Learn more</p> </li> </ul> <ul> <li> Manage Confluence documents (optional) <p>Automatically create a Post-mortem on Confluence, and sync your runbooks.</p> </li> </ul> <ul> <li> Extend with the API <p>Integrate with other systems, and extend the application with the API.</p> </li> </ul> <p>Young project disclaimer</p> <p>FireFighter was only recently open-sourced, and is still a work in progress.</p> <p>While we are working on improving the documentation, and making the application more generic, there are still some caveats and FireFighter may not be ready for you yet.</p> <p>Python and Django knowledge is still recommended to install, configure and troubleshoot the application.</p> <p>Please open an issue if you have any question, or if you need help.</p> <p>The FAQ may also answer some of your questions.</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>Please check Github releases.</p>"},{"location":"CODE_OF_CONDUCT/","title":"ManoMano Code of Conduct","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language.</li> <li>Being respectful of differing viewpoints and experiences.</li> <li>Gracefully accepting constructive criticism.</li> <li>Focusing on what is best for the community.</li> <li>Showing empathy towards other community members.</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or advances.</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks.</li> <li>Public or private harassment.</li> <li>Publishing others' private information, such as a physical or electronic address, without explicit permission.</li> <li>Conduct which could reasonably be considered inappropriate for the forum in which it occurs.</li> </ul> <p>All ManoMano forums and spaces are meant for professional interactions, and any behavior which could reasonably be considered inappropriate in a professional setting is unacceptable.</p>"},{"location":"CODE_OF_CONDUCT/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies to all content on ManoMano, ManoMano\u2019s GitHub organization, or any other official ManoMano web presence allowing for community interactions, as well as at all official ManoMano events, whether offline or online.</p> <p>The Code of Conduct also applies within project spaces and in public spaces whenever an individual is representing ManoMano or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed or de facto representative at an online or offline event.</p>"},{"location":"CODE_OF_CONDUCT/#conflict-resolution","title":"Conflict Resolution","text":"<p>Conflicts in an open source project can take many forms, from someone having a bad day and using harsh and hurtful language in the issue queue, to more serious instances such as sexist/racist statements or threats of violence, and everything in between.</p> <p>If the behavior is threatening or harassing, or for other reasons requires immediate escalation, please see below.</p> <p>However, for the vast majority of issues, we aim to empower individuals to first resolve conflicts themselves, asking for help when needed, and only after that fails to escalate further. This approach gives people more control over the outcome of their dispute.</p> <p>If you are experiencing or witnessing conflict, we ask you to use the following escalation strategy to address the conflict:</p> <ol> <li>Address the perceived conflict directly with those involved, preferably in a real-time medium.</li> <li>If this fails, get a third party (e.g. a mutual friend, and/or someone with background on the issue, but not involved in the conflict) to intercede.</li> <li>If you are still unable to resolve the conflict, and you believe it rises to harassment or another code of conduct violation, report it.</li> </ol>"},{"location":"CODE_OF_CONDUCT/#reporting-violations","title":"Reporting Violations","text":"<p>Violations of the Code of Conduct can be reported to ManoMano\u2019s Project Stewards or Fabien Lemarchand (fabien.lemarchand@manomano.com). The Project Steward will determine whether the Code of Conduct was violated, and will issue an appropriate sanction, possibly including a written warning or expulsion from the project, project sponsored spaces, or project forums. We ask that you make a good-faith effort to resolve your conflict via the conflict resolution policy before submitting a report.</p> <p>Violations of the Code of Conduct can occur in any setting, even those unrelated to the project. We will only consider complaints about conduct that has occurred within one year of the report.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>If the Project Stewards receive a report alleging a violation of the Code of Conduct, the Project Stewards will notify the accused of the report, and provide them an opportunity to discuss the report before a sanction is issued. The Project Stewards will do their utmost to keep the reporter anonymous. If the act is ongoing (such as someone engaging in harassment, or involves a threat to anyone's safety (e.g. threats of violence), the Project Stewards may issue sanctions without notice.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://contributor-covenant.org/version/1/4/code-of-conduct.html, and includes some aspects of the Geek Feminism Code of Conduct and the Drupal Code of Conduct.</p> <p>This Code of Conduct was fetched from the ManoMano Code of Conduct repository.</p>"},{"location":"FAQ/","title":"Frequently Asked Questions","text":""},{"location":"FAQ/#is-firefighter-performant","title":"Is FireFighter performant?","text":"<p>FireFighter has not be built with performance in mind, and may not scale well.</p> <p>The goal is still to have response times under 1s, to provide a decent user experience, for all user interfaces (Slack, Web UI).</p> <p>API and Back-Office are not as critical, and may be slower.</p> <p>Nevertheless, we have been able to handle incidents with hundreds of messages, and hundreds of users, without any issue.</p> <p>If you have any important performance issue, please open an issue, and we will try to help.</p>"},{"location":"FAQ/#is-firefighter-secure","title":"Is FireFighter secure?","text":"<p>We hope so! We have tried to follow best practices, but we don't provide any warranty.</p> <p>If you find a security issue, please report it to our security team.</p>"},{"location":"FAQ/#is-firefighter-production-ready","title":"Is FireFighter production-ready?","text":"<p>FireFighter is currently used in production by ManoMano, and has been used to handle thousands of incidents.</p> <p>Nevertheless, it was only recently open-sourced, and we are still working on improving the documentation, test coverage, and making the application more generic.</p>"},{"location":"FAQ/#can-i-use-firefighter-without-slack","title":"Can I use FireFighter without Slack?","text":"<p>No. Slack is currently the only supported chat platform.</p> <p>The Slack App is the main way to interact with the system, and is the only way to interact with the system during an incident. Slack is currently also used as the user directory.</p>"},{"location":"FAQ/#can-i-use-firefighter-only-through-slack","title":"Can I use FireFighter only through Slack?","text":"<p>No. The Web UI is required to interact with the application, and is the only way to configure the application.</p> <p>All incident-related actions during an incident can be done through Slack.</p>"},{"location":"FAQ/#can-i-use-firefighter-without-pagerduty","title":"Can I use FireFighter without PagerDuty?","text":"<p>Yes.</p>"},{"location":"FAQ/#can-i-use-firefighter-without-confluence","title":"Can I use FireFighter without Confluence?","text":"<p>Yes.</p>"},{"location":"FAQ/#can-i-use-firefighter-without-jira","title":"Can I use FireFighter without Jira?","text":"<p>Yes.</p>"},{"location":"FAQ/#can-i-use-other-provider","title":"Can I use other provider?","text":"<p>Not yet.</p> <p>The application integrates with Slack, Confluence, PagerDuty and Jira. Providing more integrations is not planned, but we plan to help integrate with other systems, by exposing Python APIs and hooks.</p> <p>This means that the runbook or postmortem back-end can only be Confluence, the ticketing system can only be Jira, and the alerting system can only be PagerDuty, for now. If you want to use other systems, you will have to integrate with them yourself. Please open an issue if you need help with that.</p>"},{"location":"FAQ/#can-i-interact-with-firefighter-through-the-api","title":"Can I interact with FireFighter through the API?","text":"<p>Yes.</p> <p>The API is almost exclusively read-only, and is useful for read-only integrations and reporting. The API is not exhaustive, and is missing models and fields. Most GET routes supports filtering, ordering, and rendering in JSON, CSV or TSV.</p> <p>There is an API route to create an incident, if you want to integrate with other systems. All routes support Cookie and API Key authentication.</p> <p>Please check the OpenAPI schema or Swagger UI for more information.</p>"},{"location":"FAQ/#can-i-give-access-to-the-back-office-to-non-admin-users","title":"Can I give access to the Back-Office to non-admin users?","text":"<p>The current back-office works great, but lacks many safety features, and must be handled with caution. It is necessary to access it to configure some features (e.g.: define a metric type or cost type).</p> <p>Thus, we recommend only giving access to the Back-Office to trusted users.</p>"},{"location":"FAQ/#what-authentication-methods-are-supported","title":"What authentication methods are supported?","text":"<p>The Web UI supports OpenID Connect, and can be configured to use any OIDC provider.</p>"},{"location":"FAQ/#is-the-web-ui-accessible-responsive-reliable","title":"Is the Web UI accessible? Responsive? Reliable?","text":"<p>The Web-UI was built with progressive enhancement in mind, and should work without JavaScript, although the experience will be degraded.</p> <p>The Web-UI has not yet been tested with screen readers, and may not be accessible.</p> <p>The Web-UI is not regularly tested with mobile devices, and may not provide a good experience on small screens or screens with unusual aspect ratios.</p> <p>If you have any accessibility issue, please open an issue, and we will try to help.</p>"},{"location":"FAQ/#do-you-support-slack-enterprise-grid","title":"Do you support Slack Enterprise Grid?","text":"<p>No. We only support one workspace, and do not support Enterprise Grid.</p> <p>If you need support for Enterprise Grid, please open an issue, and we will try to help.</p>"},{"location":"FAQ/#do-you-support-free-slack-workspaces","title":"Do you support free Slack workspaces?","text":"<p>Yes. We support free Slack workspaces, but we some features may not work (e.g. usergroups are not supported).</p>"},{"location":"FAQ/#do-you-support-slack-oauth","title":"Do you support Slack OAuth?","text":"<p>No. We don't support Slack OAuth.</p>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#exec-1--credits","title":"Credits","text":"<p>These projects were used to build firefighter-incident. Thank you!</p> <p><code>python</code> | <code>pdm</code> | <code>hatchling</code></p> <p>Thanks to all the contributors to the JavaScript packages we use as well!</p>"},{"location":"credits/#exec-1--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>aiohttp</code> Async http client/server framework (asyncio) <code>&gt;=3.9.1</code> <code>3.11.18</code> Apache-2.0 <code>aiohttp</code> Async http client/server framework (asyncio) <code>&gt;=2.3.0</code> <code>3.11.18</code> PSF-2.0 <code>aiohttp</code> Async http client/server framework (asyncio) <code>&gt;=1.1.2</code> <code>3.11.18</code> Apache 2.0 <code>aiohttp</code> Async http client/server framework (asyncio) <code>&lt;6.0,&gt;=4.0; python_version &lt; \"3.11\"</code> <code>3.11.18</code> ? <code>aiohttp</code> Async http client/server framework (asyncio) <code>&gt;=17.3.0</code> <code>3.11.18</code> ? <code>aiohttp</code> Async http client/server framework (asyncio) <code>&gt;=1.1.1</code> <code>3.11.18</code> Apache-2.0 <code>aiohttp</code> Async http client/server framework (asyncio) <code>&lt;7.0,&gt;=4.5</code> <code>3.11.18</code> Apache 2 <code>aiohttp</code> Async http client/server framework (asyncio) <code>&gt;=0.2.0</code> <code>3.11.18</code> Apache-2.0 <code>aiohttp</code> Async http client/server framework (asyncio) <code>&lt;2.0,&gt;=1.17.0</code> <code>3.11.18</code> Apache-2.0 <code>anyio</code> High level compatibility layer for multiple asynchronous event loop implementations <code>&gt;=1.1</code> <code>4.9.0</code> MIT OR Apache-2.0 <code>argon2-cffi</code> Argon2 for Python <code>23.1.0</code> MIT <code>celery</code> Distributed Task Queue. <code>[gevent,redis]&gt;=5.3.6</code> <code>5.5.2</code> BSD-3-Clause <code>celery</code> Distributed Task Queue. <code>&gt;=1.5.0</code> <code>5.5.2</code> MIT <code>celery</code> Distributed Task Queue. <code>!=4.5.5,&lt;6.0.0,&gt;=4.5.2</code> <code>5.5.2</code> MIT <code>cffi</code> Foreign Function Interface for Python calling C code. <code>1.17.1</code> BSD-3-Clause <code>dateparser</code> Date parsing library designed to parse dates from HTML pages <code>&gt;=1.2.0</code> <code>1.2.1</code> BSD <code>dateparser</code> Date parsing library designed to parse dates from HTML pages <code>&gt;=2024.2</code> <code>1.2.1</code> MIT <code>dateparser</code> Date parsing library designed to parse dates from HTML pages <code>!=2019.02.19,!=2021.8.27,&gt;=2015.06.24</code> <code>1.2.1</code> Apache Software License <code>dateparser</code> Date parsing library designed to parse dates from HTML pages <code>&gt;=0.2</code> <code>1.2.1</code> MIT <code>ddtrace</code> Datadog APM client library <code>&gt;=2.3.3,&lt;2.4.0</code> <code>2.3.5</code> LICENSE.BSD3 <code>ddtrace</code> Datadog APM client library <code>; python_version &gt;= \"3.8\"</code> <code>2.3.5</code> MIT License <code>ddtrace</code> Datadog APM client library <code>2.3.5</code> MIT <code>ddtrace</code> Datadog APM client library <code>&gt;=2.0.1</code> <code>2.3.5</code> Apache Software License <code>ddtrace</code> Datadog APM client library <code>2.3.5</code> MIT License <code>ddtrace</code> Datadog APM client library <code>; python_version &lt; \"3.8\"</code> <code>2.3.5</code> Apache Software License <code>ddtrace</code> Datadog APM client library <code>&gt;=1</code> <code>2.3.5</code> Apache-2.0 <code>ddtrace</code> Datadog APM client library <code>&gt;=3</code> <code>2.3.5</code> 3-Clause BSD License <code>ddtrace</code> Datadog APM client library <code>; python_version &gt;= \"3.12\"</code> <code>2.3.5</code> ? <code>ddtrace</code> Datadog APM client library <code>&gt;=1.12.0</code> <code>2.3.5</code> MIT <code>ddtrace</code> Datadog APM client library <code>2.3.5</code> ? <code>ddtrace</code> Datadog APM client library <code>&gt;=0.12</code> <code>2.3.5</code> MIT <code>deprecated</code> Python @deprecated decorator to deprecate old python classes, functions or methods. <code>&lt;2,&gt;=1.10</code> <code>1.2.18</code> BSD <code>django</code> A high-level Python web framework that encourages rapid development and clean, pragmatic design. <code>[argon2]&gt;=4.2.8,&lt;5.0.0</code> <code>4.2.21</code> BSD-3-Clause <code>django</code> A high-level Python web framework that encourages rapid development and clean, pragmatic design. <code>&gt;=19.1.0</code> <code>4.2.21</code> MIT License <code>django-celery-beat</code> Database-backed Periodic Tasks. <code>&gt;=2.5.0</code> <code>2.8.1</code> BSD <code>django-celery-beat</code> Database-backed Periodic Tasks. <code>&gt;=1.2.32</code> <code>2.8.1</code> MIT License <code>django-celery-beat</code> Database-backed Periodic Tasks. <code>&gt;=5.0</code> <code>2.8.1</code> BSD-2-Clause <code>django-celery-beat</code> Database-backed Periodic Tasks. <code>&gt;=2.3.4</code> <code>2.8.1</code> LGPLv3 <code>django-celery-beat</code> Database-backed Periodic Tasks. <code>2.8.1</code> Apache-2.0 <code>django-components</code> A way to create simple reusable template components in Django. <code>&gt;=0.101</code> <code>0.139.1</code> MIT <code>django-components</code> A way to create simple reusable template components in Django. <code>&gt;=1.0.2</code> <code>0.139.1</code> MIT <code>django-filter</code> Django-filter is a reusable Django application for allowing users to filter querysets dynamically. <code>&gt;=23.4</code> <code>25.1</code> BSD License <code>django-htmx</code> Extensions for using Django with htmx. <code>&gt;=1.17.2</code> <code>1.23.0</code> MIT License <code>django-htmx</code> Extensions for using Django with htmx. <code>&gt;=3.6</code> <code>1.23.0</code> BSD-3-Clause <code>django-import-export</code> Django application and library for importing and exporting data with included admin integration. <code>&gt;=4.0.0</code> <code>4.3.7</code> BSD License <code>django-import-export</code> Django application and library for importing and exporting data with included admin integration. <code>==20241021</code> <code>4.3.7</code> Apache Software License <code>django-import-export</code> Django application and library for importing and exporting data with included admin integration. <code>&gt;=3.7.0</code> <code>4.3.7</code> MIT License <code>django-oauth2-authcodeflow</code> Authenticate with any OpenId Connect/Oauth2 provider through authorization code flow. PKCE is also supported. <code>&gt;=1.0.1</code> <code>1.2.3</code> MIT <code>django-oauth2-authcodeflow</code> Authenticate with any OpenId Connect/Oauth2 provider through authorization code flow. PKCE is also supported. <code>[cryptography]&gt;=3.3</code> <code>1.2.3</code> MIT <code>django-oauth2-authcodeflow</code> Authenticate with any OpenId Connect/Oauth2 provider through authorization code flow. PKCE is also supported. <code>&gt;=2.28</code> <code>1.2.3</code> Apache-2.0 <code>django-redis</code> Full featured redis cache backend for Django. <code>&gt;=5.4.0</code> <code>5.4.0</code> BSD-3-Clause <code>django-simple-menu</code> Simple, yet powerful, code-based menus for Django applications <code>&gt;=2.1.3</code> <code>2.1.3</code> BSD 2-Clause <code>django-stubs-ext</code> Monkey-patching and extensions for django-stubs <code>~=5.1.1</code> <code>5.1.3</code> MIT <code>django-tables2</code> Table/data-grid framework for Django <code>&gt;=2.6.0</code> <code>2.7.5</code> BSD License <code>django-taggit</code> django-taggit is a reusable Django application for simple tagging. <code>&gt;=5.0.1</code> <code>6.1.0</code> BSD <code>django-widget-tweaks</code> Tweak the form field rendering in templates, not in python-level form definitions. <code>&gt;=1.5.0</code> <code>1.5.0</code> MIT license <code>djangorestframework</code> Web APIs for Django, made easy. <code>&gt;=3.14.0</code> <code>3.16.0</code> BSD <code>djangorestframework-csv</code> CSV Tools for Django REST Framework <code>&gt;=3.0.1</code> <code>3.0.2</code> BSD <code>docutils</code> Docutils -- Python Documentation Utilities <code>&gt;=0.20.1</code> <code>0.21.2</code> GNU General Public License (GPL) <code>drf-spectacular</code> Sane and flexible OpenAPI 3 schema generation for Django REST framework <code>&gt;=0.26.5</code> <code>0.28.0</code> BSD <code>drf-spectacular</code> Sane and flexible OpenAPI 3 schema generation for Django REST framework <code>&gt;=5.1</code> <code>0.28.0</code> MIT <code>drf-spectacular</code> Sane and flexible OpenAPI 3 schema generation for Django REST framework <code>&gt;=0.3.1</code> <code>0.28.0</code> MIT <code>drf-spectacular</code> Sane and flexible OpenAPI 3 schema generation for Django REST framework <code>&gt;=2.6.0</code> <code>0.28.0</code> MIT <code>drf-standardized-errors</code> Standardize your API error responses. <code>&gt;=0.12.6</code> <code>0.14.1</code> MIT License <code>gevent</code> Coroutine-based network library <code>&gt;=1.17.1; platform_python_implementation == \"CPython\" and sys_platform == \"win32\"</code> <code>25.5.1</code> MIT <code>gevent</code> Coroutine-based network library <code>&gt;=3.2.2; platform_python_implementation == \"CPython\"</code> <code>25.5.1</code> MIT AND Python-2.0 <code>gevent</code> Coroutine-based network library <code>25.5.1</code> ZPL-2.1 <code>gevent</code> Coroutine-based network library <code>25.5.1</code> ZPL 2.1 <code>gunicorn</code> WSGI HTTP Server for UNIX <code>&gt;=21.2.0</code> <code>23.0.0</code> MIT <code>gunicorn</code> WSGI HTTP Server for UNIX <code>23.0.0</code> BSD License <code>httpcore</code> A minimal low-level HTTP client. <code>&gt;=0.16</code> <code>1.0.9</code> MIT <code>httpx</code> The next generation HTTP client. <code>&gt;=0.25.2</code> <code>0.28.1</code> BSD-3-Clause <code>httpx</code> The next generation HTTP client. <code>0.28.1</code> MIT <code>httpx</code> The next generation HTTP client. <code>0.28.1</code> MPL-2.0 <code>httpx</code> The next generation HTTP client. <code>==1.*</code> <code>0.28.1</code> BSD License <code>httpx</code> The next generation HTTP client. <code>0.28.1</code> BSD License <code>importlib-metadata</code> Read metadata from Python packages <code>&gt;=3.20</code> <code>8.6.1</code> MIT License <code>jira</code> Python library for interacting with JIRA via REST APIs. <code>&gt;=3.5.2,&lt;3.6.0</code> <code>3.5.2</code> BSD-2-Clause <code>jira</code> Python library for interacting with JIRA via REST APIs. <code>3.5.2</code> PSFL <code>jira</code> Python library for interacting with JIRA via REST APIs. <code>&gt;=1.1.0</code> <code>3.5.2</code> ISC <code>jira</code> Python library for interacting with JIRA via REST APIs. <code>3.5.2</code> Apache 2.0 <code>jsonschema</code> An implementation of JSON Schema validation for Python <code>&gt;=1.4.0; python_version &lt; \"3.9\"</code> <code>4.23.0</code> Apache Software License <code>jsonschema</code> An implementation of JSON Schema validation for Python <code>&gt;=2023.03.6</code> <code>4.23.0</code> ? <code>jsonschema</code> An implementation of JSON Schema validation for Python <code>&gt;=0.28.4</code> <code>4.23.0</code> ? <code>jsonschema</code> An implementation of JSON Schema validation for Python <code>&gt;=0.7.1</code> <code>4.23.0</code> MIT <code>markdown</code> Python implementation of John Gruber's Markdown. <code>&gt;=3.5.1</code> <code>3.8</code> ? <code>nh3</code> Python binding to Ammonia HTML sanitizer Rust crate <code>&gt;=0.2.15</code> <code>0.2.21</code> MIT <code>opentelemetry-api</code> OpenTelemetry Python API <code>&gt;=1.2.6</code> <code>1.33.1</code> MIT <code>pdpyras</code> PagerDuty Python REST API Sessions <code>&gt;=5.1.3</code> <code>5.4.0</code> MIT <code>pdpyras</code> PagerDuty Python REST API Sessions <code>5.4.0</code> ? <code>psycopg</code> PostgreSQL database adapter for Python <code>[binary]&gt;=3.1.14</code> <code>3.2.9</code> GNU Lesser General Public License v3 (LGPLv3) <code>psycopg</code> PostgreSQL database adapter for Python <code>==3.2.9; implementation_name != \"pypy\"</code> <code>3.2.9</code> GNU Lesser General Public License v3 (LGPLv3) <code>python-dateutil</code> Extensions to the standard Python datetime module <code>&gt;=2.8.2</code> <code>2.9.0.post0</code> Dual License <code>python-decouple</code> Strict separation of settings from code. <code>&gt;=3.8</code> <code>3.8</code> MIT <code>python-jose</code> JOSE implementation in Python <code>&gt;=3.4.0</code> <code>3.4.0</code> Apache-2.0 OR BSD-3-Clause <code>python-json-logger</code> JSON Log Formatter for the Python Logging Package <code>&gt;=2.0.7</code> <code>3.3.0</code> BSD-2-Clause License <code>redis</code> Python client for Redis database and key-value store <code>~=2.9.0</code> <code>5.3.0</code> MIT <code>requests</code> Python HTTP for Humans. <code>&lt;4,&gt;=2</code> <code>2.32.3</code> MIT <code>requests-oauthlib</code> OAuthlib authentication support for Requests. <code>&gt;=3.0.0</code> <code>2.0.0</code> BSD <code>slack-bolt</code> The Bolt Framework for Python <code>&gt;=1.18.1</code> <code>1.23.0</code> MIT <code>slack-sdk</code> The Slack API Platform SDK for Python <code>&gt;=3.26.1</code> <code>3.35.0</code> MIT <code>uritemplate</code> Implementation of RFC 6570 URI Templates <code>&gt;=4.1.1</code> <code>4.1.1</code> BSD 3-Clause License or Apache License, Version 2.0 <code>whitenoise</code> Radically simplified static file serving for WSGI applications <code>&gt;=6.6.0</code> <code>6.9.0</code> MIT License"},{"location":"credits/#exec-1--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>anyio</code> High level compatibility layer for multiple asynchronous event loop implementations <code>&gt;=1.1</code> <code>4.9.0</code> MIT OR Apache-2.0 <code>argon2-cffi</code> Argon2 for Python <code>23.1.0</code> MIT <code>autopep8</code> A tool that automatically formats Python code to conform to the PEP 8 style guide <code>&gt;=2.12.0</code> <code>2.3.2</code> MIT <code>black</code> The uncompromising code formatter. <code>&gt;=24.2.0</code> <code>25.1.0</code> MIT License <code>black</code> The uncompromising code formatter. <code>&gt;=8.0.0</code> <code>25.1.0</code> ? <code>black</code> The uncompromising code formatter. <code>&gt;=0.4.3</code> <code>25.1.0</code> ? <code>black</code> The uncompromising code formatter. <code>&gt;=22.0</code> <code>25.1.0</code> BSD License <code>black</code> The uncompromising code formatter. <code>&gt;=0.9.0</code> <code>25.1.0</code> Mozilla Public License 2.0 (MPL 2.0) <code>black</code> The uncompromising code formatter. <code>&gt;=2</code> <code>25.1.0</code> MIT License <code>black</code> The uncompromising code formatter. <code>&gt;=4.0.1; python_version &lt; \"3.11\"</code> <code>25.1.0</code> ? <code>cairosvg</code> A Simple SVG Converter based on Cairo <code>2.8.2</code> BSD License <code>cairosvg</code> A Simple SVG Converter based on Cairo <code>2.8.2</code> BSD License <code>cairosvg</code> A Simple SVG Converter based on Cairo <code>2.8.2</code> PSFL <code>cairosvg</code> A Simple SVG Converter based on Cairo <code>2.8.2</code> BSD License <code>celery-types</code> Type stubs for Celery and its related packages <code>&gt;=0.20.0</code> <code>0.23.0</code> ? <code>cffi</code> Foreign Function Interface for Python calling C code. <code>1.17.1</code> BSD-3-Clause <code>click</code> Composable command line interface toolkit <code>; platform_system == \"Windows\"</code> <code>8.2.0</code> BSD License <code>cryptography</code> cryptography is a package which provides cryptographic recipes and primitives to Python developers. <code>&gt;=1.14; platform_python_implementation != \"PyPy\"</code> <code>45.0.2</code> MIT <code>cssselect2</code> CSS selectors for Python ElementTree <code>0.8.0</code> BSD <code>djade</code> A Django template formatter. <code>&gt;=1.1.1</code> <code>1.4.0</code> MIT License <code>django</code> A high-level Python web framework that encourages rapid development and clean, pragmatic design. <code>&gt;=19.1.0</code> <code>4.2.21</code> MIT License <code>django-browser-reload</code> Automatically reload your browser in development. <code>&gt;=1.12.1</code> <code>1.18.0</code> MIT License <code>django-browser-reload</code> Automatically reload your browser in development. <code>&gt;=3.6</code> <code>1.18.0</code> BSD-3-Clause <code>django-browser-reload</code> Automatically reload your browser in development. <code>&gt;=4.2</code> <code>1.18.0</code> BSD-3-Clause <code>django-coverage-plugin</code> Django template coverage.py plugin <code>&gt;=3.1.0</code> <code>3.1.0</code> Apache-2.0 <code>django-coverage-plugin</code> Django template coverage.py plugin <code>3.1.0</code> Apache-2.0 <code>django-debug-toolbar</code> A configurable set of panels that display various debug information about the current request/response. <code>&gt;=4.2.0</code> <code>5.2.0</code> BSD-3-Clause <code>django-debug-toolbar</code> A configurable set of panels that display various debug information about the current request/response. <code>&gt;=0.2</code> <code>5.2.0</code> BSD License <code>django-extensions</code> Extensions for Django <code>&gt;=3.2.3</code> <code>4.1</code> ? <code>django-extra-checks</code> Collection of useful checks for Django Checks Framework <code>&gt;=0.13.3</code> <code>0.16.1</code> MIT <code>django-filter-stubs</code> PEP-484 stubs for django-filter <code>&gt;=0.1.3</code> <code>0.1.3</code> MIT <code>django-migration-linter</code> Detect backward incompatible migrations for your django project <code>&gt;=5.0.0</code> <code>5.2.0</code> Apache-2.0 <code>django-migration-linter</code> Detect backward incompatible migrations for your django project <code>&gt;=1.4.3</code> <code>5.2.0</code> MIT <code>django-migration-linter</code> Detect backward incompatible migrations for your django project <code>&gt;=0.10.2</code> <code>5.2.0</code> MIT <code>django-silk</code> Silky smooth profiling for the Django Framework <code>&gt;=5.0.4</code> <code>5.3.2</code> MIT License <code>django-silk</code> Silky smooth profiling for the Django Framework <code>5.3.2</code> MIT License <code>django-silk</code> Silky smooth profiling for the Django Framework <code>&gt;=2017.09.19</code> <code>5.3.2</code> LGPL <code>django-stubs</code> Mypy stubs for Django <code>~=5.1.1</code> <code>5.1.3</code> MIT <code>django-stubs</code> Mypy stubs for Django <code>&gt;=5.1.3</code> <code>5.1.3</code> MIT <code>django-stubs</code> Mypy stubs for Django <code>5.1.3</code> ? <code>django-test-migrations</code> Test django schema and data migrations, including ordering <code>&gt;=1.3.0</code> <code>1.5.0</code> MIT <code>django-watchfiles</code> Use watchfiles in Django\u2019s autoreloader. <code>&gt;=0.1.0</code> <code>1.1.0</code> MIT License <code>django-watchfiles</code> Use watchfiles in Django\u2019s autoreloader. <code>1.1.0</code> MIT <code>djangorestframework-stubs</code> PEP-484 stubs for django-rest-framework <code>&gt;=3.14.4</code> <code>3.15.3</code> MIT <code>djangorestframework-stubs</code> PEP-484 stubs for django-rest-framework <code>&gt;=2.0.0</code> <code>3.15.3</code> Apache-2.0 <code>djhtml</code> Django/Jinja template indenter <code>&gt;=3.0.6</code> <code>3.0.7</code> GPLv3+ <code>factory-boy</code> A versatile test fixtures replacement based on thoughtbot's factory_bot for Ruby. <code>&gt;=3.3.0</code> <code>3.3.3</code> MIT <code>factory-boy</code> A versatile test fixtures replacement based on thoughtbot's factory_bot for Ruby. <code>&gt;=0.7.0</code> <code>3.3.3</code> MIT License <code>faker</code> Faker is a Python package that generates fake data for you. <code>37.3.0</code> Apache-2.0 <code>ghp-import</code> Copy your docs directly to the gh-pages branch. <code>&gt;=2.8.1</code> <code>2.1.0</code> Dual License <code>gitdb</code> Git Object Database <code>&lt;6,&gt;=3.0.1</code> <code>4.0.12</code> BSD-3-Clause <code>gitpython</code> GitPython is a Python library used to interact with Git repositories <code>&lt;5,&gt;=4.0.1</code> <code>3.1.44</code> BSD License <code>griffe</code> Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=0.44</code> <code>1.7.3</code> ? <code>httpcore</code> A minimal low-level HTTP client. <code>&gt;=0.16</code> <code>1.0.9</code> MIT <code>httpx</code> The next generation HTTP client. <code>==1.*</code> <code>0.28.1</code> BSD License <code>hypothesis</code> A library for property-based testing <code>&gt;=6.91.0</code> <code>6.131.20</code> ? <code>hypothesis</code> A library for property-based testing <code>&gt;=22.2.0</code> <code>6.131.20</code> ? <code>hypothesis</code> A library for property-based testing <code>&lt;3.0.0,&gt;=2.1.0</code> <code>6.131.20</code> Apache 2.0 <code>importlib-metadata</code> Read metadata from Python packages <code>&gt;=3.20</code> <code>8.6.1</code> MIT License <code>ipdb</code> IPython-enabled pdb <code>&gt;=0.13.13</code> <code>0.13.13</code> BSD <code>ipdb</code> IPython-enabled pdb <code>; python_version == \"3.5\"</code> <code>0.13.13</code> BSD-2-Clause <code>ipython</code> IPython: Productive Interactive Computing <code>&gt;=8.18.1</code> <code>9.2.0</code> BSD-3-Clause <code>ipython</code> IPython: Productive Interactive Computing <code>9.2.0</code> BSD License <code>ipython</code> IPython: Productive Interactive Computing <code>&gt;=0.16</code> <code>9.2.0</code> MIT <code>ipython</code> IPython: Productive Interactive Computing <code>9.2.0</code> BSD License <code>ipython</code> IPython: Productive Interactive Computing <code>&gt;4.3; sys_platform != \"win32\" and sys_platform != \"emscripten\"</code> <code>9.2.0</code> ISC license <code>ipython</code> IPython: Productive Interactive Computing <code>&lt;3.1.0,&gt;=3.0.41</code> <code>9.2.0</code> BSD License <code>ipython</code> IPython: Productive Interactive Computing <code>&gt;=2.4.0</code> <code>9.2.0</code> BSD-2-Clause <code>ipython</code> IPython: Productive Interactive Computing <code>9.2.0</code> MIT <code>ipython</code> IPython: Productive Interactive Computing <code>&gt;=5.13.0</code> <code>9.2.0</code> BSD License <code>jedi</code> An autocompletion tool for Python that can be used for text editors. <code>&lt;0.9.0,&gt;=0.8.4</code> <code>0.19.2</code> MIT <code>jinja2</code> A very fast and expressive template engine. <code>&gt;=3.1.2</code> <code>3.1.6</code> BSD License <code>jinja2</code> A very fast and expressive template engine. <code>&gt;=2.0</code> <code>3.1.6</code> BSD License <code>lazy-object-proxy</code> A fast and thorough lazy object proxy. <code>&gt;=1.9.0</code> <code>1.11.0</code> BSD-2-Clause <code>markdown-exec</code> Utilities to execute code blocks in Markdown files. <code>&gt;=1.7</code> <code>1.10.3</code> ? <code>markdown-exec</code> Utilities to execute code blocks in Markdown files. <code>&gt;=9</code> <code>1.10.3</code> MIT License <code>mdx-truly-sane-lists</code> Extension for Python-Markdown that makes lists truly sane. Custom indents for nested lists and fix for messy linebreaks. <code>&gt;=1.3</code> <code>1.3</code> MIT <code>mdx-truly-sane-lists</code> Extension for Python-Markdown that makes lists truly sane. Custom indents for nested lists and fix for messy linebreaks. <code>&gt;=2.6</code> <code>1.3</code> ? <code>mike</code> Manage multiple versions of your MkDocs-powered documentation <code>&gt;=2.1.1</code> <code>2.1.3</code> BSD-3-Clause <code>mike</code> Manage multiple versions of your MkDocs-powered documentation <code>2.1.3</code> Apache Software License <code>mike</code> Manage multiple versions of your MkDocs-powered documentation <code>2.1.3</code> Apache Software License <code>mike</code> Manage multiple versions of your MkDocs-powered documentation <code>2.1.3</code> ? <code>mike</code> Manage multiple versions of your MkDocs-powered documentation <code>&gt;=5.1</code> <code>2.1.3</code> MIT <code>mike</code> Manage multiple versions of your MkDocs-powered documentation <code>2.1.3</code> BSD 2-Clause or Apache-2.0 <code>mkdocs</code> Project documentation with Markdown. <code>&gt;=1.6.0</code> <code>1.6.1</code> BSD License <code>mkdocs</code> Project documentation with Markdown. <code>&gt;=1.0</code> <code>1.6.1</code> Apache Software License <code>mkdocs</code> Project documentation with Markdown. <code>&gt;=1.3.4</code> <code>1.6.1</code> MIT License <code>mkdocs</code> Project documentation with Markdown. <code>&gt;=0.2.0</code> <code>1.6.1</code> MIT License <code>mkdocs</code> Project documentation with Markdown. <code>&gt;=2.0</code> <code>1.6.1</code> Apache-2.0 <code>mkdocs-git-authors-plugin</code> Mkdocs plugin to display git authors of a page <code>&gt;=0.7.2</code> <code>0.9.5</code> MIT <code>mkdocs-git-revision-date-localized-plugin</code> Mkdocs plugin that enables displaying the localized date of the last git modification of a markdown file. <code>&gt;=1.2.2</code> <code>1.4.5</code> MIT <code>mkdocs-git-revision-date-localized-plugin</code> Mkdocs plugin that enables displaying the localized date of the last git modification of a markdown file. <code>&gt;=2.7.0</code> <code>1.4.5</code> BSD-3-Clause <code>mkdocs-git-revision-date-localized-plugin</code> Mkdocs plugin that enables displaying the localized date of the last git modification of a markdown file. <code>&gt;=3.1.44</code> <code>1.4.5</code> BSD-3-Clause <code>mkdocs-git-revision-date-localized-plugin</code> Mkdocs plugin that enables displaying the localized date of the last git modification of a markdown file. <code>&gt;=2025.1</code> <code>1.4.5</code> MIT <code>mkdocs-git-revision-date-plugin</code> MkDocs plugin for setting revision date from git per markdown file. <code>&gt;=0.3.2</code> <code>0.3.2</code> MIT <code>mkdocs-include-markdown-plugin</code> Mkdocs Markdown includer plugin. <code>&gt;=6.0.4</code> <code>7.1.5</code> Apache Software License <code>mkdocs-include-markdown-plugin</code> Mkdocs Markdown includer plugin. <code>7.1.5</code> MIT License <code>mkdocs-material</code> Documentation that simply works <code>[imaging]&gt;=9.5.14</code> <code>9.6.14</code> MIT License <code>mkdocs-material</code> Documentation that simply works <code>~=2.6</code> <code>9.6.14</code> LGPL-3.0-or-later <code>mkdocs-material</code> Documentation that simply works <code>~=10.2</code> <code>9.6.14</code> HPND <code>mkdocs-minify-plugin</code> An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;=0.7.2</code> <code>0.8.0</code> MIT <code>mkdocs-minify-plugin</code> An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;=0.9.5</code> <code>0.8.0</code> BSD <code>mkdocs-minify-plugin</code> An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;=0.1.13</code> <code>0.8.0</code> BSD <code>mkdocs-minify-plugin</code> An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;=3.0.1</code> <code>0.8.0</code> MIT License <code>mkdocs-redirects</code> A MkDocs plugin for dynamic page redirects to prevent broken links <code>&gt;=1.2.1</code> <code>1.2.2</code> MIT License <code>mkdocs-section-index</code> MkDocs plugin to allow clickable sections that lead to an index page <code>&gt;=0.3.8</code> <code>0.3.10</code> MIT License <code>mkdocstrings</code> Automatic documentation from sources, for MkDocs. <code>[python]&gt;=0.24.0</code> <code>0.29.1</code> ? <code>mkdocstrings</code> Automatic documentation from sources, for MkDocs. <code>&gt;=1.16.2</code> <code>0.29.1</code> ? <code>mkdocstrings-python</code> A Python handler for mkdocstrings. <code>&gt;=1.4</code> <code>1.16.10</code> ? <code>mypy</code> Optional static typing for Python <code>&gt;=1.7.1</code> <code>1.15.0</code> MIT <code>mypy-to-codeclimate</code> Standalone tool to convert a mypy output to CodeQuality JSON, for Gitlab or other CIs. <code>&gt;=0.0.3</code> <code>0.0.3</code> MIT <code>nplusone</code> Detecting the n+1 queries problem in Python <code>&gt;=1.0.0</code> <code>1.0.0</code> Copyright 2016 Joshua Carp <code>nplusone</code> Detecting the n+1 queries problem in Python <code>&gt;=1.3</code> <code>1.0.0</code> MIT License <code>nplusone</code> Detecting the n+1 queries problem in Python <code>&gt;=1.9.0</code> <code>1.0.0</code> MIT <code>pexpect</code> Pexpect allows easy control of interactive console applications. <code>&gt;=0.5</code> <code>4.9.0</code> ISC License (ISCL) <code>prompt-toolkit</code> Library for building powerful interactive command lines in Python <code>3.0.51</code> MIT <code>pydot</code> Python interface to Graphviz's Dot <code>&gt;=1.4.2</code> <code>4.0.0</code> ? <code>pylint</code> python code static checker <code>&gt;=3.0.2</code> <code>3.3.7</code> ? <code>pylint</code> python code static checker <code>&lt;=3.4.0.dev0,&gt;=3.3.8</code> <code>3.3.7</code> ? <code>pylint</code> python code static checker <code>&gt;=0.2; python_version &lt; \"3.11\"</code> <code>3.3.7</code> BSD-3-Clause <code>pylint</code> python code static checker <code>!=5.13,&lt;7,&gt;=4.2.5</code> <code>3.3.7</code> MIT License <code>pylint</code> python code static checker <code>&lt;0.8,&gt;=0.6</code> <code>3.3.7</code> Expat license <code>pylint</code> python code static checker <code>&gt;=0.10.1</code> <code>3.3.7</code> MIT <code>pylint-django</code> A Pylint plugin to help Pylint understand the Django web framework <code>&gt;=2.5.5</code> <code>2.6.1</code> GNU General Public License v2 or later (GPLv2+) <code>pylint-django</code> A Pylint plugin to help Pylint understand the Django web framework <code>&gt;=0.8</code> <code>2.6.1</code> GPL-2.0-or-later <code>pyparsing</code> pyparsing module - Classes and methods to define and execute parsing grammars <code>&gt;=3.1.1</code> <code>3.2.3</code> MIT License <code>pytest</code> pytest: simple powerful testing with Python <code>&gt;=7.4.3</code> <code>8.3.5</code> MIT <code>pytest</code> pytest: simple powerful testing with Python <code>8.3.5</code> MIT License <code>pytest</code> pytest: simple powerful testing with Python <code>&lt;2,&gt;=1.5</code> <code>8.3.5</code> MIT <code>pytest-cov</code> Pytest plugin for measuring coverage. <code>&gt;=4.1.0</code> <code>6.1.1</code> MIT <code>pytest-deadfixtures</code> A simple plugin to list unused fixtures in pytest <code>&gt;=2.2.1</code> <code>2.2.1</code> MIT <code>pytest-django</code> A Django plugin for pytest. <code>&gt;=4.7.0</code> <code>4.11.1</code> BSD License <code>pytest-httpx</code> Send responses to httpx. <code>&gt;=0.27.0</code> <code>0.35.0</code> MIT License <code>pytest-httpx</code> Send responses to httpx. <code>==0.28.*</code> <code>0.35.0</code> BSD-3-Clause <code>pytest-mock</code> Thin-wrapper around the mock package for easier use with pytest <code>&gt;=3.12.0</code> <code>3.14.0</code> MIT <code>pytest-randomly</code> Pytest plugin to randomly order tests and control random.seed. <code>&gt;=3.15.0</code> <code>3.16.0</code> MIT License <code>pytest-timeout</code> pytest plugin to abort hanging tests <code>&gt;=2.2.0</code> <code>2.4.0</code> MIT <code>requests</code> Python HTTP for Humans. <code>&gt;=2017.4.17</code> <code>2.32.3</code> MPL-2.0 <code>requests</code> Python HTTP for Humans. <code>&lt;4,&gt;=2</code> <code>2.32.3</code> MIT <code>requests</code> Python HTTP for Humans. <code>&lt;4,&gt;=2.5</code> <code>2.32.3</code> BSD License <code>requests</code> Python HTTP for Humans. <code>&lt;3,&gt;=1.21.1</code> <code>2.32.3</code> ? <code>ruff</code> An extremely fast Python linter and code formatter, written in Rust. <code>&gt;=0.1.6</code> <code>0.11.10</code> MIT <code>stack-data</code> Extract data from python stack frames and tracebacks for informative displays <code>&gt;=2.1.0</code> <code>0.6.3</code> Apache 2.0 <code>stack-data</code> Extract data from python stack frames and tracebacks for informative displays <code>&gt;=1.2.0</code> <code>0.6.3</code> MIT <code>stack-data</code> Extract data from python stack frames and tracebacks for informative displays <code>0.6.3</code> MIT <code>types-backports</code> Typing stubs for backports <code>&gt;=0.1.3</code> <code>0.1.3</code> Apache-2.0 license <code>types-dateparser</code> Typing stubs for dateparser <code>&gt;=1.1.4.10</code> <code>1.2.0.20250516</code> ? <code>types-markdown</code> Typing stubs for Markdown <code>&gt;=3.5.0.3</code> <code>3.8.0.20250415</code> ? <code>types-protobuf</code> Typing stubs for protobuf <code>&gt;=4.24.0.4</code> <code>6.30.2.20250516</code> ? <code>types-pyopenssl</code> Typing stubs for pyOpenSSL <code>24.1.0.20240722</code> ? <code>types-python-dateutil</code> Typing stubs for python-dateutil <code>&gt;=2.8.19.14</code> <code>2.9.0.20250516</code> ? <code>types-redis</code> Typing stubs for redis <code>&gt;=4.6.0.11</code> <code>4.6.0.20241004</code> Apache-2.0 <code>types-redis</code> Typing stubs for redis <code>&gt;=35.0.0</code> <code>4.6.0.20241004</code> Apache-2.0 OR BSD-3-Clause <code>types-redis</code> Typing stubs for redis <code>4.6.0.20241004</code> Apache-2.0 license <code>types-requests</code> Typing stubs for requests <code>&gt;=2.31.0.10</code> <code>2.32.0.20250515</code> ? <code>types-setuptools</code> Typing stubs for setuptools <code>&gt;=69.0.0.0</code> <code>80.7.0.20250516</code> ? <code>types-six</code> Typing stubs for six <code>&gt;=1.16.21.9</code> <code>1.17.0.20250515</code> ? <code>watchfiles</code> Simple, modern and high performance file watching and code reload in python. <code>&gt;=3.0.0</code> <code>1.0.5</code> MIT <code>wcmatch</code> Wildcard/glob file name matcher. <code>&gt;=2.1.1</code> <code>10.0</code> MIT License <code>werkzeug</code> The comprehensive WSGI web application library. <code>&gt;=3.0.1</code> <code>3.1.3</code> BSD License <code>yamllint</code> A linter for YAML files. <code>&gt;=1.33.0</code> <code>1.37.1</code> GPL-3.0-or-later"},{"location":"license/","title":"License","text":"<pre><code>MIT License\n\nCopyright (c) 2021-2023 - Colibri SAS, \"ManoMano\"\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"roadmap/","title":"Roadmap","text":"<p>The following is a list of features we plan to implement in the future.</p> <p>This list is not exhaustive, and may change at any time. There is no guarantee that any of these features will be implemented, it is only provided as a way of showing intent.</p> <ul> <li>Better deployment documentation and tooling<ul> <li>Simple use-case: no custom code<ul> <li> Ready to use Docker images</li> <li>Ready to use Helm charts?</li> </ul> </li> <li>Advanced use-case: custom code or configuration<ul> <li>How to build custom Docker images?</li> </ul> </li> <li>Less opinionated deployment, more configuration options</li> </ul> </li> <li>Subscription system<ul> <li>Users should be able to create their own rules to subscribe to incidents, and receive notifications</li> <li>Notifications should use default integrations, but may also integrate apprise</li> </ul> </li> <li>More integrations<ul> <li>We need give a way to extended the system, but won't implement these ourselves</li> <li>More ticketing systems<ul> <li>Jira Service Desk</li> <li>Zendesk</li> <li>...</li> </ul> </li> <li>More document platforms<ul> <li>Google Docs</li> <li>...</li> </ul> </li> <li>More monitoring systems<ul> <li>Prometheus</li> <li>...</li> </ul> </li> <li>Support for other authentication methods<ul> <li>LDAP</li> <li>SAML</li> <li>...</li> </ul> </li> <li>Support for other messaging platforms?<ul> <li>Mattermost</li> <li>Discord</li> <li>...</li> </ul> </li> </ul> </li> <li>Rework IncidentUpdate system</li> <li>Rework audit log system</li> <li>Metrics export</li> <li>i18n and l10n<ul> <li>Basic support planned</li> </ul> </li> <li>Technical upgrades<ul> <li>Django 5.0<ul> <li>Prepare for Django 5.0</li> <li>Study ASGI/partial move to async<ul> <li>Would unlock direct connect to SLack instead of opening a port</li> <li>May be blocked by dependencies (e.g.: DRF is sync-only)</li> </ul> </li> </ul> </li> <li>JS/CSS automatic building and bundling</li> <li>HTMX/Alpine upgrade</li> </ul> </li> <li>Better testing<ul> <li>E2E Web UI tests</li> <li>Better integration (Slack, Confluence, Jira, PagerDuty) tests</li> </ul> </li> <li>Support for rich text<ul> <li>Either markdown or HTML, adapted to work both on Web UI and Slack</li> </ul> </li> </ul>"},{"location":"architecture/incident-closure-workflow/","title":"Incident Closure Workflow","text":"<p>This document describes the complete incident closure workflow in FireFighter, including the different paths and requirements for closing incidents based on priority and status.</p>"},{"location":"architecture/incident-closure-workflow/#overview","title":"Overview","text":"<p>FireFighter supports multiple ways to close incidents, with different requirements based on the incident's priority level and current status. The workflow ensures that critical incidents (P1/P2) follow proper post-mortem procedures, while allowing more streamlined closure for lower priority incidents.</p>"},{"location":"architecture/incident-closure-workflow/#workflow-diagram","title":"Workflow Diagram","text":"<pre><code>graph TD\n    A[Incident Created] --&gt; B[OPEN]\n    B --&gt; C[INVESTIGATING]\n    C --&gt; D[MITIGATING]\n    D --&gt; E[MITIGATED]\n\n    %% P1/P2 PRD Path (Post-mortem Required)\n    E --&gt; F{P1/P2 in PRD?}\n    F --&gt;|Yes| G[POST_MORTEM]\n    G --&gt; H[CLOSED]\n\n    %% P3+ Path (No Post-mortem Required)\n    F --&gt;|No| H\n\n    %% Closure with Reason (Any Priority)\n    B --&gt;|Reason Required| I[Closure Reason Form]\n    C --&gt;|Reason Required| I\n    I --&gt; H\n\n    %% Normal Workflow Closure\n    E --&gt;|Normal Close| H\n    G --&gt;|Normal Close| H\n\n    %% Status Labels\n    B[OPEN&lt;br/&gt;\u26a0\ufe0f Reason required for closure]\n    C[INVESTIGATING&lt;br/&gt;\u26a0\ufe0f Reason required for closure]\n    D[MITIGATING]\n    E[MITIGATED]\n    G[POST_MORTEM&lt;br/&gt;\u2705 Can close normally]\n    H[CLOSED&lt;br/&gt;\ud83d\udcc1 Channel archived]\n    I[Closure Reason&lt;br/&gt;\ud83d\uddc3\ufe0f Mandatory form]</code></pre>"},{"location":"architecture/incident-closure-workflow/#closure-methods","title":"Closure Methods","text":""},{"location":"architecture/incident-closure-workflow/#1-normal-workflow-closure","title":"1. Normal Workflow Closure","text":"<p>Path: <code>Mitigated</code> \u2192 <code>Closed</code> (or <code>Post-mortem</code> \u2192 <code>Closed</code> for P1/P2)</p> <ul> <li>When: Incident has been properly resolved through the normal workflow</li> <li>Requirements:<ul> <li>Status must be <code>Mitigated</code> or higher</li> <li>For P1/P2 in PRD: Must complete post-mortem first</li> </ul> </li> <li>Triggered via:<ul> <li><code>/incident close</code> command</li> <li>Update status to \"Closed\" (when allowed)</li> </ul> </li> </ul>"},{"location":"architecture/incident-closure-workflow/#2-closure-with-reason","title":"2. Closure with Reason","text":"<p>Path: <code>Opened/Investigating</code> \u2192 <code>Closure Reason Form</code> \u2192 <code>Closed</code></p> <ul> <li>When: Incident needs to be closed without following the complete workflow</li> <li>Use cases:<ul> <li>Duplicate incidents</li> <li>False alarms</li> <li>No actual anomaly</li> <li>User error</li> </ul> </li> <li>Requirements:<ul> <li>Mandatory closure reason selection</li> <li>Optional reference to related incident/link</li> <li>Closure message explaining the decision</li> </ul> </li> <li>Triggered via:<ul> <li><code>/incident close</code> command (shows reason form automatically)</li> <li>Update status to \"Closed\" from early statuses (shows reason form automatically)</li> </ul> </li> </ul>"},{"location":"architecture/incident-closure-workflow/#priority-based-rules","title":"Priority-Based Rules","text":""},{"location":"architecture/incident-closure-workflow/#p1p2-incidents-in-prd-environment","title":"P1/P2 Incidents in PRD Environment","text":"<ul> <li>Post-mortem Required: Must complete post-mortem before normal closure</li> <li>Workflow: <code>Mitigated</code> \u2192 <code>Post-mortem</code> \u2192 <code>Closed</code></li> <li>Direct Closure: Still available from <code>Opened/Investigating</code> with reason</li> </ul>"},{"location":"architecture/incident-closure-workflow/#p3p4p5-incidents","title":"P3/P4/P5 Incidents","text":"<ul> <li>Post-mortem Optional: Can close directly from <code>Mitigated</code> status</li> <li>Workflow: <code>Mitigated</code> \u2192 <code>Closed</code></li> <li>Direct Closure: Available from <code>Opened/Investigating</code> with reason</li> </ul>"},{"location":"architecture/incident-closure-workflow/#status-restrictions","title":"Status Restrictions","text":""},{"location":"architecture/incident-closure-workflow/#from-opened-or-investigating","title":"From \"Opened\" or \"Investigating\"","text":"<ul> <li>\u274c Cannot close normally without reason</li> <li>\u2705 Can close with reason (mandatory closure reason form)</li> <li>All priorities follow the same rule</li> </ul>"},{"location":"architecture/incident-closure-workflow/#from-mitigating-or-mitigated","title":"From \"Mitigating\" or \"Mitigated\"","text":"<ul> <li>\u2705 Can close normally (P3+ incidents)</li> <li>\u274c Cannot close normally (P1/P2 in PRD - must go through post-mortem)</li> </ul>"},{"location":"architecture/incident-closure-workflow/#from-post-mortem","title":"From \"Post-mortem\"","text":"<ul> <li>\u2705 Can close normally (all priorities)</li> </ul>"},{"location":"architecture/incident-closure-workflow/#closure-reason-types","title":"Closure Reason Types","text":"<p>When closing with a reason, the following options are available:</p> <ul> <li>DUPLICATE: Duplicate of another incident</li> <li>FALSE_POSITIVE: False alarm - no actual issue</li> <li>SUPERSEDED: Superseded by another incident</li> <li>EXTERNAL: External dependency/known issue</li> <li>CANCELLED: Cancelled - no longer relevant</li> </ul> <p>Note: \"RESOLVED\" is excluded from early closure reasons as it's reserved for normal workflow closure only.</p>"},{"location":"architecture/incident-closure-workflow/#technical-implementation","title":"Technical Implementation","text":""},{"location":"architecture/incident-closure-workflow/#key-components","title":"Key Components","text":"<ol> <li> <p>UpdateStatusForm.requires_closure_reason(): Determines when closure reason is needed</p> <ul> <li>Location: <code>src/firefighter/incidents/forms/update_status.py</code></li> </ul> </li> <li> <p>IncidentClosureReasonForm: Handles closure reason input</p> <ul> <li>Location: <code>src/firefighter/incidents/forms/closure_reason.py</code></li> </ul> </li> <li> <p>ClosureReason Enum: Defines available closure reasons</p> <ul> <li>Location: <code>src/firefighter/incidents/enums.py</code></li> </ul> </li> <li> <p>Modal Utils: Circular import resolution and modal routing</p> <ul> <li>Location: <code>src/firefighter/slack/views/modals/utils.py</code></li> </ul> </li> <li> <p>Slack Integration: Modal handlers for closure reason collection</p> <ul> <li>Close Modal: Redirects to reason form when needed</li> <li>Update Status Modal: Shows reason form for early closure attempts</li> </ul> </li> </ol>"},{"location":"architecture/incident-closure-workflow/#closure-reason-detection-logic","title":"Closure Reason Detection Logic","text":"<p>The system determines if a closure reason is required based on the incident's current status:</p> <pre><code>@staticmethod\ndef requires_closure_reason(incident: Incident, target_status: IncidentStatus) -&gt; bool:\n    \"\"\"Check if closing this incident to the target status requires a closure reason.\"\"\"\n    if target_status != IncidentStatus.CLOSED:\n        return False\n\n    current_status = incident.status\n\n    # Require reason if closing from Opened or Investigating (for any priority)\n    return current_status.value in [IncidentStatus.OPEN, IncidentStatus.INVESTIGATING]\n</code></pre>"},{"location":"architecture/incident-closure-workflow/#database-fields","title":"Database Fields","text":"<p>Closure reason information is stored in the incident model:</p> <ul> <li><code>closure_reason</code>: Selected reason code (ClosureReason enum)</li> <li><code>closure_reference</code>: Optional reference to related incident or external link</li> </ul>"},{"location":"architecture/incident-closure-workflow/#user-experience","title":"User Experience","text":""},{"location":"architecture/incident-closure-workflow/#slack-commands","title":"Slack Commands","text":"<ul> <li><code>/incident close</code>:<ul> <li>Shows normal close form if status allows</li> <li>Shows closure reason form if closing from early status</li> <li>Shows error message if prerequisites not met</li> </ul> </li> </ul> <ul> <li><code>/incident update</code>:<ul> <li>Shows normal update form</li> <li>Intercepts \"Closed\" selection from early statuses</li> <li>Automatically pushes closure reason form when needed</li> </ul> </li> </ul>"},{"location":"architecture/incident-closure-workflow/#modal-flow","title":"Modal Flow","text":"<ol> <li>User attempts to close incident</li> <li>System checks current status and requirements</li> <li>Routes to appropriate modal:<ul> <li>Normal close form (if status allows)</li> <li>Closure reason form (if early status)</li> <li>Error message (if prerequisites not met)</li> </ul> </li> </ol>"},{"location":"architecture/incident-closure-workflow/#benefits","title":"Benefits","text":"<ul> <li>Streamlined Process: Single workflow for all closure scenarios</li> <li>Proper Documentation: Reasons captured for audit and analysis</li> <li>Flexibility: Supports both rigorous and quick closure paths</li> <li>Consistency: Same logic applies across all interfaces</li> <li>User-Friendly: Automatic detection and routing to correct form</li> </ul>"},{"location":"architecture/incident-opening-workflow-complete/","title":"Complete Incident Opening Workflow - Current State","text":"<p>Date: October 10, 2025 Status: Reference documentation BEFORE P4/P5 modification</p>"},{"location":"architecture/incident-opening-workflow-complete/#overview","title":"\ud83d\udccb Overview","text":"<p>The incident opening workflow in FireFighter follows a multi-step process that varies according to the incident priority (P1 to P5).</p>"},{"location":"architecture/incident-opening-workflow-complete/#priority-determination-logic","title":"\ud83d\udd0d Priority Determination Logic","text":"<p>Priority is automatically calculated from selected impacts:</p> <ul> <li>P1-P3 \u2192 <code>response_type = \"critical\"</code> \u2192 Critical incident with dedicated Slack channel</li> <li>P4-P5 \u2192 <code>response_type = \"normal\"</code> \u2192 Normal incident with only a Jira ticket</li> </ul> <p>Calculation: <code>priority_value &lt; 4 ? \"critical\" : \"normal\"</code></p>"},{"location":"architecture/incident-opening-workflow-complete/#complete-workflow-by-priority","title":"\ud83d\udcca Complete Workflow by Priority","text":""},{"location":"architecture/incident-opening-workflow-complete/#part-1-critical-incidents-workflow-p1p2p3","title":"PART 1: CRITICAL Incidents Workflow (P1/P2/P3)","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 STEP 0: Intro                                               \u2502\n\u2502 - Welcome message                                           \u2502\n\u2502 - Warning if recent incidents in the last hour              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 STEP 1: Set Impacts (SelectImpactForm)                     \u2502\n\u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\n\u2502 Dynamic fields for each ImpactType:                        \u2502\n\u2502  \u2022 Business Impact (HIGH/MEDIUM/LOW/LOWEST/NO)              \u2502\n\u2502  \u2022 Operational Impact (HIGH/MEDIUM/LOW/LOWEST/NO)           \u2502\n\u2502  \u2022 Technical Impact (HIGH/MEDIUM/LOW/LOWEST/NO)             \u2502\n\u2502                                                             \u2502\n\u2502 \u2192 Auto-calculates priority_value and response_type         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 STEP 2: Priority/SLA Display (Response Type Block)         \u2502\n\u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\n\u2502 Displays (non-editable):                                    \u2502\n\u2502  \u2022 \ud83d\udd34 Selected priority: P1/P2/P3 - Description             \u2502\n\u2502  \u2022 \u23f1\ufe0f SLA: 15 min / 30 min / 1 hour                        \u2502\n\u2502  \u2022 :gear: Process: :slack: Slack :jira_new: Jira ticket    \u2502\n\u2502  \u2022 :pushpin: Selected impacts: [detailed list]             \u2502\n\u2502  \u2022 :warning: Critical incidents are for emergency only      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 STEP 3: Select Incident Type                               \u2502\n\u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\n\u2502 \ud83d\udcdd \"Then, select the type of issue / affected users\"       \u2502\n\u2502                                                             \u2502\n\u2502 Dropdown with ONLY 1 option:                                \u2502\n\u2502  \u2022 \"Critical\" \u2192 OpeningCriticalModal                        \u2502\n\u2502                                                             \u2502\n\u2502 \u26a0\ufe0f This step is HIDDEN because len(INCIDENT_TYPES) == 1    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 STEP 4: Set Details (CreateIncidentFormSlack)              \u2502\n\u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\n\u2502 OpeningCriticalModal form:                                  \u2502\n\u2502  \u2022 title (CharField, 10-128 chars)                          \u2502\n\u2502  \u2022 description (TextField, 10-1200 chars)                   \u2502\n\u2502  \u2022 incident_category (GroupedModelChoiceField)              \u2502\n\u2502  \u2022 environment (ModelChoiceField)                           \u2502\n\u2502  \u2022 priority (HiddenInput - already determined)              \u2502\n\u2502                                                             \u2502\n\u2502 \u2705 NO \"suggested_team_routing\" field                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 STEP 5: Review &amp; Submit                                    \u2502\n\u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\n\u2502 Displays:                                                   \u2502\n\u2502  \u2022 :slack: Dedicated Slack channel will be created          \u2502\n\u2502  \u2022 ~X responders will be invited                            \u2502\n\u2502  \u2022 :jira_new: Associated Jira ticket will be created        \u2502\n\u2502  \u2022 :pagerduty: (if outside office hours)                    \u2502\n\u2502                                                             \u2502\n\u2502 Button: \"Create the incident\"                               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2193\n                    [INCIDENT CREATED]\n                            \u2193\n              [Slack Channel + Jira Ticket + PagerDuty]\n</code></pre>"},{"location":"architecture/incident-opening-workflow-complete/#part-2-normal-incidents-workflow-p4p5-raid-module","title":"PART 2: NORMAL Incidents Workflow (P4/P5) - RAID MODULE","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 STEP 0: Intro                                               \u2502\n\u2502 - Welcome message                                           \u2502\n\u2502 - Warning if recent incidents in the last hour              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 STEP 1: Set Impacts (SelectImpactForm)                     \u2502\n\u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\n\u2502 Dynamic fields for each ImpactType:                        \u2502\n\u2502  \u2022 Business Impact (HIGH/MEDIUM/LOW/LOWEST/NO)              \u2502\n\u2502  \u2022 Operational Impact (HIGH/MEDIUM/LOW/LOWEST/NO)           \u2502\n\u2502  \u2022 Technical Impact (HIGH/MEDIUM/LOW/LOWEST/NO)             \u2502\n\u2502                                                             \u2502\n\u2502 \u2192 Auto-calculates priority_value=4 or 5 and response_type=\"normal\" \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 STEP 2: Priority/SLA Display (Response Type Block)         \u2502\n\u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\n\u2502 Displays (non-editable):                                    \u2502\n\u2502  \u2022 \ud83d\udfe1/\ud83d\udfe2 Selected priority: P4/P5 - Description             \u2502\n\u2502  \u2022 \u23f1\ufe0f SLA: 2 days / 5 days                                 \u2502\n\u2502  \u2022 :gear: Process: :jira_new: Jira ticket                  \u2502\n\u2502  \u2022 :pushpin: Selected impacts: [detailed list]             \u2502\n\u2502  \u2022 (NO \"critical incidents\" warning)                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 STEP 3: Select Incident Type \u26a0\ufe0f IMPORTANT STEP             \u2502\n\u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\n\u2502 \ud83d\udcdd \"Then, select the type of issue / affected users\"       \u2502\n\u2502                                                             \u2502\n\u2502 Dropdown with 5 OPTIONS (defined in raid/apps.py):         \u2502\n\u2502  \u2022 \"Customer\"              \u2192 OpeningRaidCustomerModal       \u2502\n\u2502  \u2022 \"Seller\"                \u2192 OpeningRaidSellerModal         \u2502\n\u2502  \u2022 \"Internal\"              \u2192 OpeningRaidInternalModal       \u2502\n\u2502  \u2022 \"Documentation request\" \u2192 OpeningRaidDocumentationModal  \u2502\n\u2502  \u2022 \"Feature request\"       \u2192 OpeningRaidFeatureRequestModal \u2502\n\u2502                                                             \u2502\n\u2502 \u2705 This step is VISIBLE because len(INCIDENT_TYPES) &gt; 1    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2193\n           \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n           \u2193                                  \u2193\n    [CUSTOMER/SELLER/INTERNAL]     [DOCUMENTATION/FEATURE REQUEST]\n           \u2193                                  \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 STEP 4a: Set Details        \u2502   \u2502 STEP 4b: Set Details        \u2502\n\u2502 (CreateNormal...FormSlack)  \u2502   \u2502 (CreateRaid...FormSlack)    \u2502\n\u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502   \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502\n\u2502 COMMON Fields:              \u2502   \u2502 COMMON Fields:              \u2502\n\u2502 \u2022 incident_category         \u2502   \u2502 \u2022 incident_category         \u2502\n\u2502 \u2022 platform (FR/DE/IT/ES/UK) \u2502   \u2502 \u2022 platform (FR/DE/IT/ES/UK) \u2502\n\u2502 \u2022 title (10-128 chars)      \u2502   \u2502 \u2022 title (10-128 chars)      \u2502\n\u2502 \u2022 description (10-1200)     \u2502   \u2502 \u2022 description (10-1200)     \u2502\n\u2502 \u2022 suggested_team_routing \u2705 \u2502   \u2502 \u2022 suggested_team_routing \u2705 \u2502\n\u2502 \u2022 priority (HiddenInput)    \u2502   \u2502 \u2022 priority (HiddenInput)    \u2502\n\u2502                             \u2502   \u2502                             \u2502\n\u2502 SPECIFIC Fields:            \u2502   \u2502 (No specific fields)        \u2502\n\u2502 [If CUSTOMER]               \u2502   \u2502                             \u2502\n\u2502 \u2022 zendesk_ticket_id         \u2502   \u2502                             \u2502\n\u2502                             \u2502   \u2502                             \u2502\n\u2502 [If SELLER]                 \u2502   \u2502                             \u2502\n\u2502 \u2022 seller_contract_id        \u2502   \u2502                             \u2502\n\u2502 \u2022 is_key_account (bool)     \u2502   \u2502                             \u2502\n\u2502 \u2022 is_seller_in_golden_list  \u2502   \u2502                             \u2502\n\u2502 \u2022 zoho_desk_ticket_id       \u2502   \u2502                             \u2502\n\u2502                             \u2502   \u2502                             \u2502\n\u2502 [If INTERNAL]               \u2502   \u2502                             \u2502\n\u2502 (no additional fields)      \u2502   \u2502                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n           \u2193                                  \u2193\n           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 STEP 5: Review &amp; Submit                                    \u2502\n\u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\n\u2502 Displays:                                                   \u2502\n\u2502  \u2022 :jira_new: A Jira ticket will be created                 \u2502\n\u2502  \u2022 (NO mention of Slack channel)                            \u2502\n\u2502  \u2022 (NO mention of PagerDuty)                                \u2502\n\u2502                                                             \u2502\n\u2502 Button: \"Create the incident\"                               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2193\n                    [JIRA TICKET CREATED]\n                            \u2193\n                  [Ticket in the feature team board]\n</code></pre>"},{"location":"architecture/incident-opening-workflow-complete/#summary-of-key-differences","title":"\ud83c\udfaf Summary of Key Differences","text":"Aspect P1/P2/P3 (Critical) P4/P5 (Normal/RAID) Process Slack + Jira + PagerDuty Jira only STEP 3: Select Type HIDDEN (only 1 option) VISIBLE (5 options) Feature Team \u274c NOT present \u2705 PRESENT in all forms Details Form <code>CreateIncidentFormSlack</code> <code>CreateNormal...FormSlack</code> (5 variants) Specific Fields None zendesk_ticket_id, seller_contract_id, etc. Jira Destination Critical incident ticket Feature team board ticket"},{"location":"architecture/incident-opening-workflow-complete/#suggested_team_routing-field","title":"\ud83d\udccc <code>suggested_team_routing</code> Field","text":""},{"location":"architecture/incident-opening-workflow-complete/#definition","title":"Definition","text":"<pre><code># File: src/firefighter/raid/forms.py, line 82-86\nsuggested_team_routing = forms.ModelChoiceField(\n    queryset=FeatureTeam.objects.only(\"name\").order_by(\"name\"),\n    label=\"Feature Team or Train\",\n    required=True,\n)\n</code></pre>"},{"location":"architecture/incident-opening-workflow-complete/#field-presence","title":"Field Presence","text":"Incident Type Present in form? P1/P2/P3 (Critical) \u274c NO P4/P5 - Customer \u2705 YES P4/P5 - Seller \u2705 YES P4/P5 - Internal \u2705 YES P4/P5 - Documentation \u2705 YES P4/P5 - Feature Request \u2705 YES"},{"location":"architecture/incident-opening-workflow-complete/#usage","title":"Usage","text":"<p>The <code>suggested_team_routing</code> field is used to: 1. Route the Jira ticket to the correct team board 2. Automatically assign the ticket to the responsible team 3. Notify the concerned team members</p>"},{"location":"architecture/incident-opening-workflow-complete/#source-code-references","title":"\ud83d\udd27 Source Code References","text":""},{"location":"architecture/incident-opening-workflow-complete/#1-response-type-determination","title":"1. Response Type Determination","text":"<p>File: <code>src/firefighter/slack/views/modals/open.py:437-439</code> <pre><code># Default fallback: P1/P2/P3 = critical, P4/P5 = normal\nresponse_type = cast(\"ResponseType\", \"critical\" if priority_value &lt; 4 else \"normal\")\nopen_incident_context[\"response_type\"] = response_type\n</code></pre></p>"},{"location":"architecture/incident-opening-workflow-complete/#2-incident-types-configuration","title":"2. Incident Types Configuration","text":"<p>File: <code>src/firefighter/slack/views/modals/open.py:52-65</code> <pre><code>INCIDENT_TYPES: dict[ResponseType, dict[str, dict[str, Any]]] = {\n    \"critical\": {\n        \"critical\": {\n            \"label\": \"Critical\",\n            \"slack_form\": OpeningCriticalModal,\n        },\n    },\n    \"normal\": {\n        \"normal\": {\n            \"label\": \"Normal\",\n            \"slack_form\": OpeningCriticalModal,  # Overridden by RAID\n        },\n    },\n}\n</code></pre></p> <p>File: <code>src/firefighter/raid/apps.py:32-53</code> (OVERRIDE at startup) <pre><code>INCIDENT_TYPES[\"normal\"] = {\n    \"CUSTOMER\": {\n        \"label\": \"Customer\",\n        \"slack_form\": OpeningRaidCustomerModal,\n    },\n    \"SELLER\": {\n        \"label\": \"Seller\",\n        \"slack_form\": OpeningRaidSellerModal,\n    },\n    \"INTERNAL\": {\n        \"label\": \"Internal\",\n        \"slack_form\": OpeningRaidInternalModal,\n    },\n    \"DOCUMENTATION_REQUEST\": {\n        \"label\": \"Documentation request\",\n        \"slack_form\": OpeningRaidDocumentationRequestModal,\n    },\n    \"FEATURE_REQUEST\": {\n        \"label\": \"Feature request\",\n        \"slack_form\": OpeningRaidFeatureRequestModal,\n    },\n}\n</code></pre></p>"},{"location":"architecture/incident-opening-workflow-complete/#3-step-3-display-logic","title":"3. STEP 3 Display Logic","text":"<p>File: <code>src/firefighter/slack/views/modals/open.py:258-290</code> <pre><code>@staticmethod\ndef get_select_incident_type_blocks(\n    open_incident_context: OpeningData,\n    incident_type_value: str | None,\n) -&gt; list[Block]:\n    response_type = open_incident_context.get(\"response_type\")\n    if (\n        response_type is None\n        or response_type not in INCIDENT_TYPES\n        or len(INCIDENT_TYPES[response_type]) == 1  # \u2190 HIDE if only 1 option\n    ):\n        return []\n    # ... displays dropdown with options\n</code></pre></p>"},{"location":"architecture/incident-opening-workflow-complete/#conclusion","title":"\ud83c\udfaf Conclusion","text":"<p>The current workflow works as follows:</p> <ol> <li> <p>For P1/P2/P3: Simplified workflow with 4 steps (intro, impacts, priority display, details)</p> <ul> <li>No type selection (automatically hidden)</li> <li>No feature team field</li> <li>Creates Slack channel + Jira ticket</li> </ul> </li> <li> <p>For P4/P5: Complete workflow with 5 steps (intro, impacts, priority display, type selection, details)</p> <ul> <li>Mandatory incident type selection (Customer/Seller/Internal/Doc/Feature)</li> <li>Feature team field present in ALL forms</li> <li>Creates only a Jira ticket in the team board</li> </ul> </li> </ol> <p>Current blocker: STEP 3 \"Select type\" is NECESSARY for P4/P5 because it determines which form to display (Customer vs Seller vs Internal, etc.), each having different specific fields.</p>"},{"location":"architecture/incident-opening-workflow-unified/","title":"Unified Incident Opening Workflow","text":"<p>Date: October 10, 2025 Status: Current implementation</p>"},{"location":"architecture/incident-opening-workflow-unified/#overview","title":"\ud83d\udccb Overview","text":"<p>The incident opening workflow in FireFighter now uses a unified form for all incident priorities (P1-P5). This simplified workflow eliminates the need for incident type selection (Step 3) and uses dynamic field visibility based on selected impacts.</p>"},{"location":"architecture/incident-opening-workflow-unified/#key-changes-from-previous-workflow","title":"\ud83d\udd04 Key Changes from Previous Workflow","text":""},{"location":"architecture/incident-opening-workflow-unified/#before-multiple-forms","title":"Before (Multiple Forms)","text":"<ul> <li>6 separate forms: 1 critical form + 5 RAID forms (Customer, Seller, Internal, Documentation, Feature Request)</li> <li>STEP 3 required: Users had to select incident type for P4/P5</li> <li>Static forms: Each form had fixed fields regardless of impact selection</li> </ul>"},{"location":"architecture/incident-opening-workflow-unified/#after-unified-form","title":"After (Unified Form)","text":"<ul> <li>1 unified form: <code>UnifiedIncidentForm</code> handles all priorities</li> <li>STEP 3 hidden: Automatically skipped since only one form type exists</li> <li>Dynamic fields: Fields show/hide based on selected impacts</li> </ul>"},{"location":"architecture/incident-opening-workflow-unified/#complete-unified-workflow","title":"\ud83d\udcca Complete Unified Workflow","text":""},{"location":"architecture/incident-opening-workflow-unified/#part-1-all-incidents-p1-p5","title":"PART 1: All Incidents (P1-P5)","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 STEP 0: Intro                                               \u2502\n\u2502 - Welcome message                                           \u2502\n\u2502 - Warning if recent incidents in the last hour              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 STEP 1: Set Impacts (SelectImpactForm)                     \u2502\n\u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\n\u2502 Dynamic fields for each ImpactType:                        \u2502\n\u2502  \u2022 Business Impact (HIGH/MEDIUM/LOW/LOWEST/NO)              \u2502\n\u2502  \u2022 Operational Impact (HIGH/MEDIUM/LOW/LOWEST/NO)           \u2502\n\u2502  \u2022 Technical Impact (HIGH/MEDIUM/LOW/LOWEST/NO)             \u2502\n\u2502                                                             \u2502\n\u2502 \u2192 Auto-calculates priority_value and response_type         \u2502\n\u2502   - priority_value &lt; 4 \u2192 response_type = \"critical\" (P1-P3) \u2502\n\u2502   - priority_value &gt;= 4 \u2192 response_type = \"normal\" (P4-P5)  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 STEP 2: Priority/SLA Display (Response Type Block)         \u2502\n\u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\n\u2502 Displays (non-editable):                                    \u2502\n\u2502  \u2022 \ud83d\udd34\ud83d\udfe1\ud83d\udfe2 Selected priority: P1/P2/P3/P4/P5 - Description    \u2502\n\u2502  \u2022 \u23f1\ufe0f SLA: 15min / 30min / 1h / 2days / 5days             \u2502\n\u2502  \u2022 :gear: Process: Slack+Jira or Jira only                 \u2502\n\u2502  \u2022 :pushpin: Selected impacts: [detailed list]             \u2502\n\u2502  \u2022 :warning: Critical warning (P1-P3 only)                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 STEP 3: Select Incident Type                               \u2502\n\u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\n\u2502 \u26a1 AUTOMATICALLY HIDDEN \u26a1                                   \u2502\n\u2502                                                             \u2502\n\u2502 Since len(INCIDENT_TYPES[response_type]) == 1,             \u2502\n\u2502 this step is skipped entirely.                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 STEP 4: Set Details (UnifiedIncidentFormSlack)             \u2502\n\u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\n\u2502 COMMON Fields (always shown):                               \u2502\n\u2502  \u2022 incident_category (GroupedModelChoiceField)              \u2502\n\u2502  \u2022 environment (ModelMultipleChoiceField) - ALL priorities  \u2502\n\u2502  \u2022 platform (MultipleChoiceField, default ALL) - ALL        \u2502\n\u2502  \u2022 title (CharField, 10-128 chars)                          \u2502\n\u2502  \u2022 description (TextField, 10-1200 chars)                   \u2502\n\u2502  \u2022 priority (HiddenInput - auto-determined)                 \u2502\n\u2502                                                             \u2502\n\u2502 CONDITIONAL Fields (based on response_type):                \u2502\n\u2502  \u2022 suggested_team_routing (P4/P5 ONLY)                      \u2502\n\u2502                                                             \u2502\n\u2502 DYNAMIC Fields (based on selected impacts):                 \u2502\n\u2502  IF Customer Impact selected:                               \u2502\n\u2502    \u2022 zendesk_ticket_id (optional)                           \u2502\n\u2502  IF Seller Impact selected:                                 \u2502\n\u2502    \u2022 seller_contract_id (optional)                          \u2502\n\u2502    \u2022 is_key_account (boolean)                               \u2502\n\u2502    \u2022 is_seller_in_golden_list (boolean)                     \u2502\n\u2502    \u2022 zoho_desk_ticket_id (optional)                         \u2502\n\u2502  IF Employee Impact selected:                               \u2502\n\u2502    \u2022 (no additional fields)                                 \u2502\n\u2502                                                             \u2502\n\u2502 Note: Multiple impact types can be selected simultaneously  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 STEP 5: Review &amp; Submit                                    \u2502\n\u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500   \u2502\n\u2502 Displays (based on response_type):                          \u2502\n\u2502  IF Critical (P1-P3):                                       \u2502\n\u2502    \u2022 :slack: Dedicated Slack channel will be created        \u2502\n\u2502    \u2022 ~X responders will be invited                          \u2502\n\u2502    \u2022 :jira_new: Associated Jira ticket will be created      \u2502\n\u2502    \u2022 :pagerduty: (if outside office hours)                  \u2502\n\u2502  IF Normal (P4-P5):                                         \u2502\n\u2502    \u2022 :jira_new: A Jira ticket will be created               \u2502\n\u2502    \u2022 (NO Slack channel, NO PagerDuty)                       \u2502\n\u2502                                                             \u2502\n\u2502 Button: \"Create the incident\"                               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2193\n                    [SUBMIT TRIGGERED]\n                            \u2193\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2193                                       \u2193\n   [CRITICAL P1-P3]                        [NORMAL P4-P5]\n        \u2193                                       \u2193\n_trigger_critical_incident_workflow    _trigger_normal_incident_workflow\n        \u2193                                       \u2193\n  Create Incident object                Prepare fields (prepare_jira_fields):\n  Save impacts                           - Extract environments, platforms\n  Create Slack channel                   - Compute business_impact\n  Create Jira ticket                     - Gather optional fields\n  Invite responders                     Create Jira (jira_client.create_issue)\n  Alert PagerDuty (if needed)            - Passes ALL custom fields\n                                        Process ticket (process_jira_issue):\n                                         - Save impacts, set watchers\n                                         - Alert Slack\n</code></pre>"},{"location":"architecture/incident-opening-workflow-unified/#dynamic-field-visibility-logic","title":"\ud83c\udfaf Dynamic Field Visibility Logic","text":""},{"location":"architecture/incident-opening-workflow-unified/#decision-tree-for-field-display","title":"Decision Tree for Field Display","text":"<pre><code>START: User selects impacts in STEP 1\n    \u2193\nCalculate priority_value \u2192 Determine response_type\n    \u2193\nBuild visible_fields list:\n    \u251c\u2500 ALWAYS include: title, description, incident_category,\n    \u2502                  environment, platform, priority\n    \u2193\nIF response_type == \"normal\" (P4/P5):\n    \u251c\u2500 ADD: suggested_team_routing\n    \u2193\nFOR EACH selected impact:\n    \u251c\u2500 IF customers_impact != NONE:\n    \u2502    \u2514\u2500 ADD: zendesk_ticket_id\n    \u251c\u2500 IF sellers_impact != NONE:\n    \u2502    \u2514\u2500 ADD: seller_contract_id, is_key_account,\n    \u2502             is_seller_in_golden_list, zoho_desk_ticket_id\n    \u2514\u2500 IF employees_impact != NONE:\n         \u2514\u2500 (no additional fields)\n    \u2193\nRemove all fields NOT in visible_fields from form\n    \u2193\nDisplay final form with only relevant fields\n</code></pre>"},{"location":"architecture/incident-opening-workflow-unified/#example-scenarios","title":"Example Scenarios","text":"<p>Scenario 1: P1 Critical with Customer Impact <pre><code>Response Type: critical\nImpacts: customers_impact = HIGH\n\nVisible Fields:\n\u2705 title, description, incident_category\n\u2705 environment (multiple), platform (multiple)\n\u2705 priority (hidden)\n\u2705 zendesk_ticket_id (customer impact)\n\u274c suggested_team_routing (not P4/P5)\n\u274c seller fields (no seller impact)\n</code></pre></p> <p>Scenario 2: P4 Normal with Seller + Customer Impact <pre><code>Response Type: normal\nImpacts: sellers_impact = MEDIUM, customers_impact = LOW\n\nVisible Fields:\n\u2705 title, description, incident_category\n\u2705 environment (multiple), platform (multiple)\n\u2705 priority (hidden)\n\u2705 suggested_team_routing (P4/P5)\n\u2705 zendesk_ticket_id (customer impact)\n\u2705 seller_contract_id, is_key_account, etc. (seller impact)\n</code></pre></p> <p>Scenario 3: P5 Normal with Employee Impact Only <pre><code>Response Type: normal\nImpacts: employees_impact = LOW\n\nVisible Fields:\n\u2705 title, description, incident_category\n\u2705 environment (multiple), platform (multiple)\n\u2705 priority (hidden)\n\u2705 suggested_team_routing (P4/P5)\n\u274c customer fields (no customer impact)\n\u274c seller fields (no seller impact)\n</code></pre></p>"},{"location":"architecture/incident-opening-workflow-unified/#technical-implementation","title":"\ud83d\udd27 Technical Implementation","text":""},{"location":"architecture/incident-opening-workflow-unified/#core-files","title":"Core Files","text":""},{"location":"architecture/incident-opening-workflow-unified/#1-unified-form-django","title":"1. Unified Form (Django)","text":"<p>File: <code>src/firefighter/incidents/forms/unified_incident.py</code></p> <pre><code>class UnifiedIncidentForm(CreateIncidentFormBase):\n    \"\"\"Unified form for all incident types and priorities (P1-P5).\"\"\"\n\n    def get_visible_fields_for_impacts(\n        self, impacts_data: dict[str, ImpactLevel], response_type: str\n    ) -&gt; list[str]:\n        \"\"\"Determine which fields should be visible based on impacts.\"\"\"\n        # Returns list of field names that should be displayed\n\n    def trigger_incident_workflow(\n        self, creator: User, impacts_data: dict[str, ImpactLevel],\n        response_type: str = \"critical\"\n    ) -&gt; None:\n        \"\"\"Trigger appropriate workflow based on response type.\"\"\"\n        if response_type == \"critical\":\n            self._trigger_critical_incident_workflow(creator, impacts_data)\n        else:\n            self._trigger_normal_incident_workflow(creator, impacts_data)\n</code></pre>"},{"location":"architecture/incident-opening-workflow-unified/#2-slack-form-wrapper","title":"2. Slack Form Wrapper","text":"<p>File: <code>src/firefighter/slack/views/modals/opening/details/unified.py</code></p> <pre><code>class UnifiedIncidentFormSlack(UnifiedIncidentForm):\n    \"\"\"Slack version with Slack-specific field configurations.\"\"\"\n\n    def __init__(self, *args, impacts_data=None, response_type=\"critical\", **kwargs):\n        super().__init__(*args, **kwargs)\n        self._impacts_data = impacts_data or {}\n        self._response_type = response_type\n        self._configure_field_visibility()  # Hide/show fields dynamically\n\n    def _configure_field_visibility(self):\n        \"\"\"Remove fields that shouldn't be visible.\"\"\"\n        visible_fields = self.get_visible_fields_for_impacts(\n            self._impacts_data, self._response_type\n        )\n        for field_name in list(self.fields.keys()):\n            if field_name not in visible_fields:\n                del self.fields[field_name]\n</code></pre>"},{"location":"architecture/incident-opening-workflow-unified/#3-configuration-registration","title":"3. Configuration Registration","text":"<p>File: <code>src/firefighter/raid/apps.py</code></p> <pre><code>INCIDENT_TYPES[\"normal\"] = {\n    \"normal\": {\n        \"label\": \"Normal\",\n        \"slack_form\": OpeningUnifiedModal,\n    },\n}\n# Since len() == 1, STEP 3 is automatically hidden\n</code></pre> <p>File: <code>src/firefighter/slack/views/modals/open.py</code></p> <pre><code>INCIDENT_TYPES[\"critical\"] = {\n    \"critical\": {\n        \"label\": \"Critical\",\n        \"slack_form\": OpeningUnifiedModal,\n    },\n}\n# Same unified form used for both critical and normal\n</code></pre>"},{"location":"architecture/incident-opening-workflow-unified/#key-benefits","title":"\ud83d\udccc Key Benefits","text":""},{"location":"architecture/incident-opening-workflow-unified/#1-simplified-user-experience","title":"1. Simplified User Experience","text":"<ul> <li>No more incident type selection for P4/P5 incidents</li> <li>Fewer steps in the workflow (4 instead of 5)</li> <li>Contextual fields only show what's relevant</li> </ul>"},{"location":"architecture/incident-opening-workflow-unified/#2-reduced-code-complexity","title":"2. Reduced Code Complexity","text":"<ul> <li>1 form instead of 6: <code>UnifiedIncidentForm</code> replaces all previous forms</li> <li>Single source of truth: All incident creation logic in one place</li> <li>Easier maintenance: Changes apply to all incident types</li> </ul>"},{"location":"architecture/incident-opening-workflow-unified/#3-flexible-field-management","title":"3. Flexible Field Management","text":"<ul> <li>Dynamic visibility: Fields adapt to user selections</li> <li>Multiple impacts: Can combine customer + seller impacts</li> <li>Consistent behavior: Same form structure for all priorities</li> </ul>"},{"location":"architecture/incident-opening-workflow-unified/#4-preserved-functionality","title":"4. Preserved Functionality","text":"<ul> <li>\u2705 All Jira ticket creation logic preserved</li> <li>\u2705 All Slack notifications preserved</li> <li>\u2705 All validation rules preserved</li> <li>\u2705 All workflow integrations preserved</li> </ul>"},{"location":"architecture/incident-opening-workflow-unified/#migration-from-old-workflow","title":"\ud83d\udd04 Migration from Old Workflow","text":""},{"location":"architecture/incident-opening-workflow-unified/#removed-components","title":"Removed Components","text":"Component Status Replacement <code>CreateNormalIncidentFormBase</code> \u274c Deleted <code>UnifiedIncidentForm</code> <code>CreateNormalCustomerIncidentForm</code> \u274c Deleted <code>UnifiedIncidentForm</code> <code>CreateRaidSellerForm</code> \u274c Deleted <code>UnifiedIncidentForm</code> <code>CreateRaidInternalForm</code> \u274c Deleted <code>UnifiedIncidentForm</code> <code>CreateRaidDocumentationForm</code> \u274c Deleted Not supported <code>CreateRaidFeatureRequestForm</code> \u274c Deleted Not supported <code>CreateIncidentFormSlack</code> (critical) \u274c Deleted <code>UnifiedIncidentFormSlack</code> <code>raid/views/open_normal.py</code> \u274c Deleted <code>opening/details/unified.py</code>"},{"location":"architecture/incident-opening-workflow-unified/#preserved-components","title":"Preserved Components","text":"Component Location Purpose <code>prepare_jira_fields()</code> <code>raid/forms.py</code> Centralize all Jira field preparation (GT-1334 fix) <code>PlatformChoices</code> <code>raid/forms.py</code> Platform enum (FR/DE/IT/ES/UK/ALL/Internal) <code>initial_priority()</code> <code>raid/forms.py</code> Get default priority <code>process_jira_issue()</code> <code>raid/forms.py</code> Create Jira ticket + impacts <code>get_business_impact()</code> <code>raid/forms.py</code> Calculate business impact <code>alert_slack_new_jira_ticket()</code> <code>raid/forms.py</code> Send Slack notifications <code>set_jira_ticket_watchers_raid()</code> <code>raid/forms.py</code> Add Jira watchers <code>get_partner_alert_conversations()</code> <code>raid/forms.py</code> Find partner Slack channels <code>get_internal_alert_conversations()</code> <code>raid/forms.py</code> Find internal Slack channels"},{"location":"architecture/incident-opening-workflow-unified/#deprecated-features","title":"Deprecated Features","text":"<p>No longer supported: - \u274c Documentation Request incidents (P4/P5) - \u274c Feature Request incidents (P4/P5)</p> <p>Rationale: These were specialized types that can be handled through standard P4/P5 internal incidents.</p>"},{"location":"architecture/incident-opening-workflow-unified/#testing","title":"\ud83e\uddea Testing","text":"<p>Tests for the unified form should be added in: <pre><code>tests/test_incidents/test_forms/test_unified_incident.py\n</code></pre></p> <p>Existing utility function tests remain in: <pre><code>tests/test_raid/test_raid_forms.py\n</code></pre></p>"},{"location":"architecture/incident-opening-workflow-unified/#related-documentation","title":"\ud83d\udcda Related Documentation","text":"<ul> <li>Project Architecture</li> <li>JIRA Integration</li> <li>Incident Closure Workflow</li> <li>Incident Status Workflow</li> <li>Previous Workflow State (Before unification)</li> </ul>"},{"location":"architecture/incident-status-workflow/","title":"Incident Status Workflow","text":"<p>This document describes the exact incident status workflow implemented in FireFighter.</p>"},{"location":"architecture/incident-status-workflow/#overview","title":"Overview","text":"<p>The incident status workflow differs based on the incident priority:</p> <ul> <li>P1/P2 incidents: Require post-mortem completion in PRD environment</li> <li>P3/P4/P5 incidents: Do not require post-mortem</li> </ul>"},{"location":"architecture/incident-status-workflow/#workflow-diagram","title":"Workflow Diagram","text":"<pre><code>graph TB\n    subgraph \"P1/P2 Incidents (PRD Environment)\"\n        A1[OPEN] --&gt; B1[INVESTIGATING]\n        B1 --&gt; C1[MITIGATING]\n        C1 --&gt; D1[MITIGATED]\n        D1 --&gt; E1[POST_MORTEM]\n        E1 --&gt; F1[CLOSED]\n\n        %% Early closure with reason\n        A1 -.-&gt;|With Closure Reason| F1\n        B1 -.-&gt;|With Closure Reason| F1\n    end\n\n    subgraph \"P3/P4/P5 Incidents (All Environments)\"\n        A2[OPEN] --&gt; B2[INVESTIGATING]\n        B2 --&gt; C2[MITIGATING]\n        C2 --&gt; D2[MITIGATED]\n        D2 --&gt; F2[CLOSED]\n\n        %% Early closure with reason\n        A2 -.-&gt;|With Closure Reason| F2\n        B2 -.-&gt;|With Closure Reason| F2\n    end\n\n    %% Styling\n    classDef normalPath fill:#4CAF50,stroke:#2E7D32,stroke-width:2px,color:#fff\n    classDef earlyClose fill:#FF9800,stroke:#E65100,stroke-width:2px,color:#fff\n    classDef postMortem fill:#2196F3,stroke:#1565C0,stroke-width:2px,color:#fff\n\n    class A1,B1,C1,D1,A2,B2,C2,D2 normalPath\n    class E1 postMortem\n    class F1,F2 earlyClose\n\n    linkStyle 6,7,12,13 stroke:#FF9800,stroke-width:2px,stroke-dasharray: 5 5</code></pre> <p>Legend: - \ud83d\udfe2 Solid arrows: Normal workflow transitions - \ud83d\udfe0 Dashed arrows: Early closure (requires closure reason form) - \ud83d\udd35 POST_MORTEM: Mandatory for P1/P2 in PRD</p>"},{"location":"architecture/incident-status-workflow/#workflow-transitions","title":"Workflow Transitions","text":""},{"location":"architecture/incident-status-workflow/#p1p2-incidents-priority-1-2-in-prd-environment","title":"P1/P2 Incidents (Priority 1-2 in PRD Environment)","text":"<pre><code>OPEN \u2192 [INVESTIGATING, CLOSED (with reason)]\nINVESTIGATING \u2192 [MITIGATING, CLOSED (with reason)]\nMITIGATING \u2192 [MITIGATED]\nMITIGATED \u2192 [POST_MORTEM]\nPOST_MORTEM \u2192 [CLOSED]\n</code></pre> <p>Key Rules for P1/P2: - Post-mortem is mandatory for P1/P2 incidents in PRD environment - Cannot skip POST_MORTEM status - must go through it before closing - From MITIGATING: Can only go to MITIGATED, not to POST_MORTEM or CLOSED - From MITIGATED: Can only go to POST_MORTEM, not directly to CLOSED - Closure with reason: Only allowed from OPEN and INVESTIGATING statuses</p>"},{"location":"architecture/incident-status-workflow/#p3p4p5-incidents-priority-3-or-non-prd","title":"P3/P4/P5 Incidents (Priority 3+ or Non-PRD)","text":"<pre><code>OPEN \u2192 [INVESTIGATING, CLOSED (with reason)]\nINVESTIGATING \u2192 [MITIGATING, CLOSED (with reason)]\nMITIGATING \u2192 [MITIGATED]\nMITIGATED \u2192 [CLOSED]\n</code></pre> <p>Key Rules for P3+: - No post-mortem required - POST_MORTEM status is not available - Direct closure: Can close directly from MITIGATED without intermediate steps - Closure with reason: Only allowed from OPEN and INVESTIGATING statuses</p>"},{"location":"architecture/incident-status-workflow/#closure-reason-requirements","title":"Closure Reason Requirements","text":"<p>A closure reason form is required when closing an incident directly from: - OPEN status - INVESTIGATING status</p> <p>This applies to all priority levels (P1-P5).</p>"},{"location":"architecture/incident-status-workflow/#implementation-details","title":"Implementation Details","text":""},{"location":"architecture/incident-status-workflow/#status-values","title":"Status Values","text":"<ul> <li><code>OPEN = 10</code></li> <li><code>INVESTIGATING = 20</code></li> <li><code>MITIGATING = 30</code> (labeled as \"Mitigating\")</li> <li><code>MITIGATED = 40</code> (labeled as \"Mitigated\")</li> <li><code>POST_MORTEM = 50</code></li> <li><code>CLOSED = 60</code></li> </ul>"},{"location":"architecture/incident-status-workflow/#form-logic-location","title":"Form Logic Location","text":"<p>The workflow logic is implemented in: - Form: <code>src/firefighter/incidents/forms/update_status.py</code> - Enum: <code>src/firefighter/incidents/enums.py</code> - Tests: <code>tests/test_incidents/test_forms/test_workflow_transitions.py</code></p>"},{"location":"architecture/incident-status-workflow/#priority-detection","title":"Priority Detection","text":"<p>P1/P2 incidents requiring post-mortem are detected by: <pre><code>requires_postmortem = (\n    incident.priority\n    and incident.environment\n    and incident.priority.needs_postmortem\n    and incident.environment.value == \"PRD\"\n)\n</code></pre></p>"},{"location":"architecture/incident-status-workflow/#testing","title":"Testing","text":"<p>Comprehensive workflow tests are located in: - <code>tests/test_incidents/test_forms/test_workflow_transitions.py</code> - Complete workflow validation - <code>tests/test_incidents/test_forms/test_update_status_workflow.py</code> - Legacy tests (some skipped) - <code>tests/test_slack/views/modals/test_update_status.py</code> - Slack integration tests</p>"},{"location":"architecture/incident-status-workflow/#migration-notes","title":"Migration Notes","text":"<p>This workflow was implemented to replace a previous more permissive workflow that allowed invalid transitions. The new implementation:</p> <ol> <li>Restricts transitions to exactly match the business workflow requirements</li> <li>Enforces post-mortem completion for P1/P2 incidents in PRD</li> <li>Simplifies P3+ workflow by removing unnecessary post-mortem steps</li> <li>Validates closure reasons for early-stage closures</li> </ol>"},{"location":"architecture/incident-status-workflow/#related-files","title":"Related Files","text":"<ul> <li>Forms: <code>src/firefighter/incidents/forms/update_status.py</code></li> <li>Enums: <code>src/firefighter/incidents/enums.py</code></li> <li>Slack Integration: <code>src/firefighter/slack/views/modals/update_status.py</code></li> <li>Utilities: <code>src/firefighter/slack/views/modals/utils.py</code></li> <li>Tests: <code>tests/test_incidents/test_forms/test_workflow_transitions.py</code></li> </ul>"},{"location":"architecture/jira-integration/","title":"JIRA Integration Architecture","text":""},{"location":"architecture/jira-integration/#overview","title":"Overview","text":"<p>The RAID module provides comprehensive bidirectional synchronization between Impact incidents and JIRA tickets, ensuring data consistency across both platforms.</p>"},{"location":"architecture/jira-integration/#synchronization-architecture","title":"Synchronization Architecture","text":""},{"location":"architecture/jira-integration/#core-components","title":"Core Components","text":"<ol> <li> <p>Sync Engine (<code>src/firefighter/raid/sync.py</code>)</p> <ul> <li>Central synchronization logic</li> <li>Loop prevention mechanism</li> <li>Field mapping and validation</li> </ul> </li> <li> <p>Signal Handlers (<code>src/firefighter/raid/signals/</code>)</p> <ul> <li><code>incident_updated_sync.py</code> - Handles Impact \u2192 JIRA sync</li> <li><code>incident_created.py</code> - Handles incident creation events</li> </ul> </li> <li> <p>JIRA Client (<code>src/firefighter/raid/client.py</code>)</p> <ul> <li>Extended JIRA client with RAID-specific methods</li> <li>Issue creation, updates, and transitions</li> <li>Attachment handling</li> </ul> </li> </ol>"},{"location":"architecture/jira-integration/#jira-ticket-creation","title":"JIRA Ticket Creation","text":""},{"location":"architecture/jira-integration/#initial-ticket-creation","title":"Initial Ticket Creation","text":"<p>Function: <code>prepare_jira_fields()</code> in <code>src/firefighter/raid/forms.py</code></p> <p>Centralizes all JIRA field preparation for both P1-P3 and P4-P5 workflows.</p> <p>P1-P3 (Critical): - Trigger: <code>incident_channel_done</code> signal - Handler: <code>src/firefighter/raid/signals/incident_created.py</code> - Flow: Create Incident \u2192 Create Slack channel \u2192 Signal triggers JIRA ticket</p> <p>P4-P5 (Normal): - Trigger: Form submission - Handler: <code>UnifiedIncidentForm._trigger_normal_incident_workflow()</code> - Flow: Direct call to <code>jira_client.create_issue()</code></p>"},{"location":"architecture/jira-integration/#custom-fields-mapping","title":"Custom Fields Mapping","text":"<p>Always Passed: - <code>customfield_11049</code> (environments): List of env values (PRD, STG, INT)   - P1-P3: First environment only   - P4-P5: All selected environments - <code>customfield_10201</code> (platform): Platform value (platform-FR, platform-All, etc.) - <code>customfield_10936</code> (business_impact): Computed from impacts_data</p> <p>Impact-Specific: - Customer: <code>zendesk_ticket_id</code> - Seller: <code>seller_contract_id</code>, <code>zoho_desk_ticket_id</code>, <code>is_key_account</code>, <code>is_seller_in_golden_list</code> - P4-P5: <code>suggested_team_routing</code></p> <p>Bug Fix GT-1334 (October 2025): P4-P5 incidents were not passing custom fields. Fixed by creating <code>prepare_jira_fields()</code> to centralize field preparation for both workflows.</p>"},{"location":"architecture/jira-integration/#bidirectional-sync-flows","title":"Bidirectional Sync Flows","text":""},{"location":"architecture/jira-integration/#impact-jira-sync","title":"Impact \u2192 JIRA Sync","text":"<p>Trigger: Incident field updates in Impact Handler: <code>sync_incident_changes_to_jira()</code></p> <p>Syncable Fields: - <code>title</code> \u2192 <code>summary</code> - <code>description</code> \u2192 <code>description</code> - <code>priority</code> \u2192 <code>priority</code> (with value mapping) - <code>status</code> \u2192 <code>status</code> (with transitions) - <code>commander</code> \u2192 <code>assignee</code></p> <p>Process: 1. Check if RAID is enabled 2. Validate update_fields parameter 3. Filter for syncable fields only 4. Apply loop prevention cache 5. Call <code>sync_incident_to_jira()</code></p>"},{"location":"architecture/jira-integration/#jira-impact-sync","title":"JIRA \u2192 Impact Sync","text":"<p>Trigger: JIRA webhook updates Handler: <code>handle_jira_webhook_update()</code></p> <p>Process: 1. Parse webhook changelog data 2. Identify changed fields 3. Apply appropriate sync functions:    - <code>sync_jira_status_to_incident()</code>    - <code>sync_jira_priority_to_incident()</code>    - <code>sync_jira_fields_to_incident()</code></p>"},{"location":"architecture/jira-integration/#field-mapping","title":"Field Mapping","text":""},{"location":"architecture/jira-integration/#status-mapping","title":"Status Mapping","text":"<p>JIRA \u2192 Impact: <pre><code>JIRA_TO_IMPACT_STATUS_MAP = {\n    \"Open\": IncidentStatus.INVESTIGATING,\n    \"To Do\": IncidentStatus.INVESTIGATING,\n    \"In Progress\": IncidentStatus.MITIGATING,\n    \"In Review\": IncidentStatus.MITIGATING,\n    \"Resolved\": IncidentStatus.MITIGATED,\n    \"Done\": IncidentStatus.MITIGATED,\n    \"Closed\": IncidentStatus.POST_MORTEM,\n    \"Reopened\": IncidentStatus.INVESTIGATING,\n    \"Blocked\": IncidentStatus.MITIGATING,\n    \"Waiting\": IncidentStatus.MITIGATING,\n}\n</code></pre></p> <p>Impact \u2192 JIRA: <pre><code>IMPACT_TO_JIRA_STATUS_MAP = {\n    IncidentStatus.OPEN: \"Open\",\n    IncidentStatus.INVESTIGATING: \"In Progress\",\n    IncidentStatus.MITIGATING: \"In Progress\",\n    IncidentStatus.MITIGATED: \"Resolved\",\n    IncidentStatus.POST_MORTEM: \"Closed\",\n    IncidentStatus.CLOSED: \"Closed\",\n}\n</code></pre></p>"},{"location":"architecture/jira-integration/#priority-mapping","title":"Priority Mapping","text":"<p>JIRA \u2192 Impact: <pre><code>JIRA_TO_IMPACT_PRIORITY_MAP = {\n    \"Highest\": 1,  # P1 - Critical\n    \"High\": 2,     # P2 - High\n    \"Medium\": 3,   # P3 - Medium\n    \"Low\": 4,      # P4 - Low\n    \"Lowest\": 5,   # P5 - Lowest\n}\n</code></pre></p>"},{"location":"architecture/jira-integration/#loop-prevention","title":"Loop Prevention","text":""},{"location":"architecture/jira-integration/#cache-based-mechanism","title":"Cache-Based Mechanism","text":"<p>Function: <code>should_skip_sync()</code> Cache Key Format: <code>sync:{entity_type}:{entity_id}:{direction}</code> Timeout: 30 seconds</p> <p>Process: 1. Check if sync recently performed 2. Set cache flag during sync 3. Automatic expiration prevents permanent blocks</p>"},{"location":"architecture/jira-integration/#sync-directions","title":"Sync Directions","text":"<pre><code>class SyncDirection(Enum):\n    IMPACT_TO_JIRA = \"impact_to_jira\"\n    JIRA_TO_IMPACT = \"jira_to_impact\"\n    IMPACT_TO_SLACK = \"impact_to_slack\"\n    SLACK_TO_IMPACT = \"slack_to_impact\"\n</code></pre>"},{"location":"architecture/jira-integration/#error-handling","title":"Error Handling","text":""},{"location":"architecture/jira-integration/#transaction-management","title":"Transaction Management","text":"<ul> <li>All sync operations wrapped in <code>transaction.atomic()</code></li> <li>Rollback on any failure</li> <li>Detailed error logging with context</li> </ul>"},{"location":"architecture/jira-integration/#graceful-degradation","title":"Graceful Degradation","text":"<ul> <li>Missing JIRA tickets: Log warning, continue</li> <li>Field validation errors: Skip invalid fields</li> <li>Network failures: Retry mechanism via Celery</li> </ul>"},{"location":"architecture/jira-integration/#incidentupdate-integration","title":"IncidentUpdate Integration","text":""},{"location":"architecture/jira-integration/#dual-sync-paths","title":"Dual Sync Paths","text":"<ol> <li> <p>Direct Incident Updates</p> <ul> <li>Uses <code>update_fields</code> parameter</li> <li>More efficient for bulk operations</li> </ul> </li> <li> <p>IncidentUpdate Records</p> <ul> <li>Tracks individual field changes</li> <li>Preserves change history</li> <li>Anti-loop detection for JIRA-originated updates</li> </ul> </li> </ol>"},{"location":"architecture/jira-integration/#loop-detection-for-incidentupdates","title":"Loop Detection for IncidentUpdates","text":"<p>Pattern: Updates created by sync have: - <code>created_by = None</code> (system update) - <code>message</code> contains \"from Jira\"</p> <pre><code>if instance.created_by is None and \"from Jira\" in (instance.message or \"\"):\n    logger.debug(\"Skipping sync - appears to be from Jira sync\")\n    return\n</code></pre>"},{"location":"architecture/jira-integration/#configuration","title":"Configuration","text":""},{"location":"architecture/jira-integration/#required-settings","title":"Required Settings","text":"<ul> <li><code>ENABLE_RAID = True</code> - Enable RAID module</li> <li><code>RAID_JIRA_PROJECT_KEY</code> - Default JIRA project</li> <li><code>RAID_JIRA_INCIDENT_CATEGORY_FIELD</code> - Custom field mapping</li> <li><code>RAID_TOOLBOX_URL</code> - Integration URL</li> </ul>"},{"location":"architecture/jira-integration/#environment-variables","title":"Environment Variables","text":"<ul> <li>Database: <code>POSTGRES_DB</code>, <code>POSTGRES_SCHEMA</code></li> <li>Feature flags: <code>ENABLE_JIRA</code>, <code>ENABLE_RAID</code></li> <li>Slack: <code>FF_SLACK_SKIP_CHECKS</code> (for testing)</li> </ul>"},{"location":"architecture/jira-integration/#testing-sync-functionality","title":"Testing Sync Functionality","text":""},{"location":"architecture/jira-integration/#key-test-files","title":"Key Test Files","text":"<ul> <li><code>tests/test_raid/test_sync.py</code> - Core sync logic</li> <li><code>tests/test_raid/test_sync_signals.py</code> - Signal handlers</li> <li><code>tests/test_raid/test_webhook_serializers.py</code> - Webhook processing</li> </ul>"},{"location":"architecture/jira-integration/#test-patterns","title":"Test Patterns","text":"<pre><code>@patch(\"firefighter.raid.sync.sync_incident_to_jira\")\n@override_settings(ENABLE_RAID=True)\ndef test_sync_incident_changes(self, mock_sync):\n    mock_sync.return_value = True\n    # Test sync triggering and field filtering\n</code></pre>"},{"location":"architecture/jira-integration/#performance-considerations","title":"Performance Considerations","text":""},{"location":"architecture/jira-integration/#optimization-strategies","title":"Optimization Strategies","text":"<ol> <li>Field Filtering: Only sync changed fields</li> <li>Batch Operations: Group related updates</li> <li>Async Processing: Use Celery for heavy operations</li> <li>Cache Warming: Pre-load frequently accessed data</li> </ol>"},{"location":"architecture/jira-integration/#monitoring","title":"Monitoring","text":"<ul> <li>Sync success/failure rates</li> <li>Performance metrics per sync type</li> <li>Error categorization and alerting</li> </ul>"},{"location":"architecture/overview/","title":"FireFighter - Architecture Overview","text":""},{"location":"architecture/overview/#project-description","title":"\ud83d\udd25 Project Description","text":"<p>FireFighter is ManoMano's internal Incident Management Tool. It's a Django platform that automates and facilitates incident management by automatically creating Slack channels for communication and much more.</p>"},{"location":"architecture/overview/#repository-structure","title":"\ud83c\udfe2 Repository Structure","text":"<p>Two distinct repositories:</p> <ol> <li> <p><code>impact/</code> (GitLab - Private ManoMano)</p> <ul> <li>\ud83d\udcc2 Custom project for ManoMano</li> <li>\ud83d\udd27 Specific configurations, deployments, customizations</li> <li>\ud83d\udd10 Contains secrets and environment configurations</li> <li>\ud83d\udccd Location: <code>/Users/nicolas.lafitte/workspace/impact/</code></li> </ul> </li> <li> <p><code>firefighter-oss/</code> (GitHub - Open Source)</p> <ul> <li>\ud83c\udf0d Open source version of the codebase</li> <li>\ud83d\udce6 Application core, modules, tests</li> <li>\ud83d\udd17 Git submodule in the <code>impact/</code> project</li> <li>\ud83d\udccd Location: <code>/Users/nicolas.lafitte/workspace/impact/firefighter-oss/</code></li> <li>\ud83d\udd17 GitHub: <code>ManoManoTech/firefighter-incident</code></li> </ul> </li> </ol> <p>Hybrid architecture:</p> <pre><code>impact/ (GitLab - Private)\n\u251c\u2500\u2500 firefighter-oss/ (Git submodule \u2192 GitHub Open Source)\n\u2502   \u251c\u2500\u2500 src/firefighter/        # Main source code\n\u2502   \u251c\u2500\u2500 tests/                  # Unit tests\n\u2502   \u251c\u2500\u2500 docs/                   # Documentation\n\u2502   \u2514\u2500\u2500 pyproject.toml         # Package configuration\n\u251c\u2500\u2500 deploy/                     # ManoMano deployment scripts\n\u251c\u2500\u2500 config/                     # Environment configuration\n\u2514\u2500\u2500 secrets/                    # Sensitive environment variables\n</code></pre> <p>This approach allows ManoMano to:</p> <ul> <li>\ud83c\udf81 Contribute to open source with the main codebase</li> <li>\ud83d\udd12 Keep private specific configurations and secrets</li> <li>\ud83d\udd04 Easily synchronize improvements between both repositories</li> </ul>"},{"location":"architecture/overview/#main-architecture","title":"\ud83c\udfd7\ufe0f Main Architecture","text":"<p>Key Technologies:</p> <ul> <li>Backend: Django 4.2 + Django REST Framework</li> <li>Database: PostgreSQL</li> <li>Cache/Queue: Redis + Celery</li> <li>Frontend: Django templates + HTMX</li> <li>Integrations: Slack Bot, JIRA, PagerDuty, Confluence</li> <li>Monitoring: Datadog (ddtrace)</li> </ul> <p>Main Modules:</p> <pre><code>src/firefighter/\n\u251c\u2500\u2500 incidents/          # \ud83d\udccb Incident management (models, views, business logic)\n\u251c\u2500\u2500 slack/              # \ud83d\udcac Slack integration (bot, events, notifications)\n\u251c\u2500\u2500 raid/               # \ud83c\udfab RAID module - JIRA ticket management for incidents\n\u251c\u2500\u2500 jira_app/           # \ud83d\udd17 JIRA client and synchronization\n\u251c\u2500\u2500 pagerduty/          # \ud83d\udcdf PagerDuty integration for on-call\n\u251c\u2500\u2500 confluence/         # \ud83d\udcda Post-mortem and documentation management\n\u251c\u2500\u2500 api/                # \ud83c\udf10 REST API for external integrations\n\u251c\u2500\u2500 firefighter/        # \u2699\ufe0f Django configuration and utilities\n\u2514\u2500\u2500 components/         # \ud83e\udde9 Reusable UI components\n</code></pre>"},{"location":"architecture/overview/#key-features","title":"\ud83d\ude80 Key Features","text":""},{"location":"architecture/overview/#incident-management","title":"Incident Management","text":"<ul> <li>Automatic creation of dedicated Slack channels per incident</li> <li>Classification by priority, severity, business impact</li> <li>Time tracking with milestones and costs</li> <li>Role assignment (Incident Commander, Communications Lead, etc.)</li> <li>Automatic updates with complete history</li> </ul>"},{"location":"architecture/overview/#integrations","title":"Integrations","text":"<ul> <li>Slack: Interactive bot, slash commands, modals</li> <li>JIRA: Automatic ticket creation via RAID module</li> <li>PagerDuty: Automatic on-call triggering</li> <li>Confluence: Post-mortem generation</li> </ul>"},{"location":"architecture/overview/#raid-module-recent-feature","title":"RAID Module (Recent Feature)","text":"<ul> <li>Intelligent routing of JIRA tickets by team</li> <li>Business impact validation and priorities</li> <li>Automatic attachment management</li> <li>Custom workflows per project</li> </ul>"},{"location":"architecture/overview/#recently-added-features","title":"\ud83c\udd95 Recently Added Features","text":""},{"location":"architecture/overview/#component-incidentcategory-migration","title":"Component \u2192 IncidentCategory Migration","text":"<ul> <li>Major refactoring: Renaming \"Component\" to \"IncidentCategory\"</li> <li>Updates to all models, views, templates</li> <li>Database migration for terminological consistency</li> </ul>"},{"location":"architecture/overview/#slack-improvements","title":"Slack Improvements","text":"<ul> <li>Error handling for private messages (<code>messages_tab_disabled</code>)</li> <li>New commands and bot interactions</li> <li>Optimization of notifications and reminders</li> </ul>"},{"location":"architecture/overview/#bidirectional-synchronization-system","title":"Bidirectional Synchronization System","text":"<ul> <li>Impact \u2194 JIRA sync: Status, priority, assignee, title, description</li> <li>Loop prevention: Cache-based mechanism to prevent infinite sync loops</li> <li>Field mapping: Comprehensive mapping between Impact and JIRA field types</li> <li>Error handling: Graceful handling of sync failures with detailed logging</li> </ul>"},{"location":"architecture/overview/#testing-architecture","title":"\ud83e\uddea Testing Architecture","text":""},{"location":"architecture/overview/#test-configuration","title":"Test Configuration","text":"<ul> <li>Test database: PostgreSQL (<code>POSTGRES_DB=ff_dev</code>)</li> <li>Environment variables: Complete test isolation with FF_SLACK_SKIP_CHECKS</li> <li>Coverage tracking: pytest-cov with HTML reporting</li> <li>Parallelized execution: pytest-randomly for test order randomization</li> </ul>"},{"location":"architecture/overview/#test-structure","title":"Test Structure","text":"<pre><code>tests/\n\u251c\u2500\u2500 test_incidents/     # Incident management tests\n\u251c\u2500\u2500 test_slack/         # Slack integration tests\n\u251c\u2500\u2500 test_raid/          # RAID module tests\n\u251c\u2500\u2500 test_jira_app/      # JIRA client tests\n\u251c\u2500\u2500 test_api/           # API endpoint tests\n\u2514\u2500\u2500 test_firefighter/   # Core utilities tests\n</code></pre>"},{"location":"architecture/overview/#current-objectives","title":"\ud83c\udfaf Current Objectives","text":"<ul> <li>Improve test coverage to reach 60%+</li> <li>Strengthen robustness of external integrations</li> <li>Optimize performance of Celery tasks</li> <li>Document architecture to facilitate contribution</li> </ul>"},{"location":"architecture/test-config/","title":"Testing Configuration","text":""},{"location":"architecture/test-config/#test-environment-setup","title":"Test Environment Setup","text":""},{"location":"architecture/test-config/#required-environment-variables","title":"Required Environment Variables","text":"<pre><code>export POSTGRES_DB=ff_dev\nexport POSTGRES_SCHEMA=\nexport PYTHONDEVMODE=1\nexport FF_SLACK_SKIP_CHECKS=true\nexport ENABLE_JIRA=true\nexport ENABLE_RAID=true\n</code></pre>"},{"location":"architecture/test-config/#directory-structure","title":"Directory Structure","text":"<p>\u26a0\ufe0f CRITICAL: Always run tests from the <code>firefighter-oss/</code> directory, not from <code>impact/</code></p> <pre><code>impact/                           # Private GitLab repo\n\u251c\u2500\u2500 firefighter-oss/             # GitHub submodule (WORK HERE)\n\u2502   \u251c\u2500\u2500 src/firefighter/         # Source code\n\u2502   \u251c\u2500\u2500 tests/                   # Test files (REAL LOCATION)\n\u2502   \u2514\u2500\u2500 pyproject.toml           # Test configuration\n\u2514\u2500\u2500 tests -&gt; firefighter-oss/tests  # Symlink (DON'T USE)\n</code></pre>"},{"location":"architecture/test-config/#standard-commands","title":"Standard Commands","text":""},{"location":"architecture/test-config/#core-test-commands","title":"Core Test Commands","text":"<pre><code># Run all tests with coverage\nPOSTGRES_DB=ff_dev POSTGRES_SCHEMA= PYTHONDEVMODE=1 FF_SLACK_SKIP_CHECKS=true ENABLE_JIRA=true ENABLE_RAID=true pdm run pytest --cov=firefighter --cov-report=term-missing\n\n# Run specific test file\nPOSTGRES_DB=ff_dev POSTGRES_SCHEMA= PYTHONDEVMODE=1 FF_SLACK_SKIP_CHECKS=true ENABLE_JIRA=true ENABLE_RAID=true pdm run pytest tests/test_raid/test_sync.py -v\n\n# Run tests with HTML coverage report\nPOSTGRES_DB=ff_dev POSTGRES_SCHEMA= PYTHONDEVMODE=1 FF_SLACK_SKIP_CHECKS=true ENABLE_JIRA=true ENABLE_RAID=true pdm run pytest --cov=firefighter --cov-report=html --cov-report=term-missing\n\n# Quick test run (no coverage, quiet)\nPOSTGRES_DB=ff_dev POSTGRES_SCHEMA= PYTHONDEVMODE=1 FF_SLACK_SKIP_CHECKS=true ENABLE_JIRA=true ENABLE_RAID=true pdm run pytest --tb=no -q\n</code></pre>"},{"location":"architecture/test-config/#quality-assurance-commands","title":"Quality Assurance Commands","text":"<pre><code># Linting with Ruff\npdm run lint-ruff --output-format=github --exit-non-zero-on-fix\n\n# Type checking with MyPy\npdm run lint-mypy\n\n# Pre-commit hooks\npdm run pre-commit run --all-files\n\n# Combined quality check\npdm run lint-ruff &amp;&amp; pdm run lint-mypy &amp;&amp; pdm run pre-commit run --all-files\n</code></pre>"},{"location":"architecture/test-config/#test-structure","title":"Test Structure","text":""},{"location":"architecture/test-config/#database-configuration","title":"Database Configuration","text":"<p>Test Database: PostgreSQL with isolated schema Transactions: Each test runs in a transaction, rolled back after completion Factories: Django factory_boy for test data generation</p>"},{"location":"architecture/test-config/#key-test-patterns","title":"Key Test Patterns","text":"<pre><code>import pytest\nfrom django.test import override_settings\nfrom unittest.mock import patch\n\n@pytest.mark.django_db\nclass TestSyncLogic:\n    def setup_method(self):\n        # Test data setup using factories\n        self.incident = IncidentFactory()\n\n    @patch(\"module.function\")\n    @override_settings(ENABLE_RAID=True)\n    def test_specific_behavior(self, mock_function):\n        # Test implementation\n        pass\n</code></pre>"},{"location":"architecture/test-config/#factory-usage","title":"Factory Usage","text":"<pre><code>from firefighter.incidents.factories import (\n    IncidentFactory,\n    PriorityFactory,\n    UserFactory,\n)\n\n# Create test data\nincident = IncidentFactory(\n    title=\"Test incident\",\n    priority=PriorityFactory(value=1)\n)\n</code></pre>"},{"location":"architecture/test-config/#coverage-configuration","title":"Coverage Configuration","text":""},{"location":"architecture/test-config/#pyprojecttoml-settings","title":"pyproject.toml Settings","text":"<pre><code>[tool.coverage.run]\nsource = [\"src\"]\nomit = [\n    \"*/tests/*\",\n    \"*/migrations/*\",\n    \"*/venv/*\",\n    \"*/settings/*\",\n    \"*/templates/*\",  # HTML files excluded\n]\n\n[tool.coverage.report]\nexclude_lines = [\n    \"pragma: no cover\",\n    \"def __repr__\",\n    \"raise AssertionError\",\n    \"raise NotImplementedError\",\n]\n</code></pre>"},{"location":"architecture/test-config/#current-coverage-targets","title":"Current Coverage Targets","text":"<ul> <li>Global Target: 60%+</li> <li>Current Level: ~51%</li> <li>New Code: 100% coverage required</li> <li>Modified Files: 100% coverage required</li> </ul>"},{"location":"architecture/test-config/#module-specific-testing","title":"Module-Specific Testing","text":""},{"location":"architecture/test-config/#raid-module","title":"RAID Module","text":"<p>Files: <code>tests/test_raid/</code> Coverage: 100% (achieved) Key areas: Sync logic, JIRA client, webhooks, forms</p> <pre><code># RAID-specific test run\nPOSTGRES_DB=ff_dev POSTGRES_SCHEMA= PYTHONDEVMODE=1 FF_SLACK_SKIP_CHECKS=true ENABLE_JIRA=true ENABLE_RAID=true pdm run pytest tests/test_raid/ -v\n</code></pre>"},{"location":"architecture/test-config/#slack-integration","title":"Slack Integration","text":"<p>Files: <code>tests/test_slack/</code> Coverage: Variable (20-80%) Challenges: Complex mocking for Slack API</p> <pre><code># Slack tests (requires extensive mocking)\nPOSTGRES_DB=ff_dev POSTGRES_SCHEMA= PYTHONDEVMODE=1 FF_SLACK_SKIP_CHECKS=true ENABLE_JIRA=true ENABLE_RAID=true pdm run pytest tests/test_slack/ -v\n</code></pre>"},{"location":"architecture/test-config/#incident-management","title":"Incident Management","text":"<p>Files: <code>tests/test_incidents/</code> Coverage: 70-90% Focus: Core business logic, models, views</p>"},{"location":"architecture/test-config/#common-testing-issues","title":"Common Testing Issues","text":""},{"location":"architecture/test-config/#importerror-solutions","title":"ImportError Solutions","text":"<p>Problem: <code>ImportError</code> when running tests Cause: Running from wrong directory (impact/ instead of firefighter-oss/) Solution: Always cd to firefighter-oss/ first</p> <pre><code>cd /Users/nicolas.lafitte/workspace/impact/firefighter-oss/\n# Then run tests\n</code></pre>"},{"location":"architecture/test-config/#database-issues","title":"Database Issues","text":"<p>Problem: Test database connection failures Cause: Missing environment variables Solution: Use full environment variable prefix</p> <pre><code>env POSTGRES_DB=ff_dev POSTGRES_SCHEMA= PYTHONDEVMODE=1 FF_SLACK_SKIP_CHECKS=true ENABLE_JIRA=true ENABLE_RAID=true pdm run pytest\n</code></pre>"},{"location":"architecture/test-config/#mock-configuration","title":"Mock Configuration","text":"<p>Common Mocks: - <code>@patch(\"firefighter.raid.sync.sync_incident_to_jira\")</code> - <code>@patch(\"firefighter.jira_app.client.JiraClient\")</code> - <code>@override_settings(ENABLE_RAID=True)</code></p>"},{"location":"architecture/test-config/#performance-optimization","title":"Performance Optimization","text":""},{"location":"architecture/test-config/#parallel-execution","title":"Parallel Execution","text":"<pre><code># Run tests in parallel\npdm run pytest -n auto --dist=loadfile\n</code></pre>"},{"location":"architecture/test-config/#selective-testing","title":"Selective Testing","text":"<pre><code># Test only modified files\npdm run pytest --lf  # Last failed\npdm run pytest --co  # Collect only (dry run)\n</code></pre>"},{"location":"architecture/test-config/#database-optimization","title":"Database Optimization","text":"<ul> <li>Use <code>@pytest.mark.django_db(transaction=True)</code> for complex tests</li> <li>Minimize database operations in setup</li> <li>Use <code>factory.create_batch()</code> for bulk data</li> </ul>"},{"location":"architecture/test-config/#debugging-tests","title":"Debugging Tests","text":""},{"location":"architecture/test-config/#verbose-output","title":"Verbose Output","text":"<pre><code># Maximum verbosity\nPOSTGRES_DB=ff_dev POSTGRES_SCHEMA= PYTHONDEVMODE=1 FF_SLACK_SKIP_CHECKS=true ENABLE_JIRA=true ENABLE_RAID=true pdm run pytest -vvv --tb=long\n</code></pre>"},{"location":"architecture/test-config/#specific-test-debugging","title":"Specific Test Debugging","text":"<pre><code># Run single test with full traceback\nPOSTGRES_DB=ff_dev POSTGRES_SCHEMA= PYTHONDEVMODE=1 FF_SLACK_SKIP_CHECKS=true ENABLE_JIRA=true ENABLE_RAID=true pdm run pytest tests/test_raid/test_sync.py::TestClass::test_method -vvv --tb=long\n</code></pre>"},{"location":"architecture/test-config/#coverage-debugging","title":"Coverage Debugging","text":"<pre><code># Coverage with missing line numbers\nPOSTGRES_DB=ff_dev POSTGRES_SCHEMA= PYTHONDEVMODE=1 FF_SLACK_SKIP_CHECKS=true ENABLE_JIRA=true ENABLE_RAID=true pdm run pytest --cov=firefighter.specific.module --cov-report=term-missing -v\n</code></pre>"},{"location":"contributing/0000-README/","title":"Contributing guidelines","text":""},{"location":"contributing/0000-README/#foreword","title":"Foreword","text":"<p>First off, thank you for taking the time to contribute!</p> <p>It's worth mentioning that the purpose of this document is to provide you with a set of general guidelines and not strict rules: nothing is set in stone and we welcome contributions about these contributing guidelines as well :-)</p>"},{"location":"contributing/0000-README/#tldr","title":"TL;DR","text":"<p>We want to make contributing straightforward and easy for everyone. As such and unless otherwise stated, we will use the traditional GitHub fork and pull request workflow: any commit must be made to a feature/topic branch in a local fork and submitted via a pull request before it can be merged. If you are familiar with GitHub (and Git), branching and opening a pull request or an issue... then you should be able to start contributing right away.</p> <p>It is strongly advised to contact the project owner(s) before working on implementing a new feature or making any kind of large code refactoring.</p> <p>Contributors must agree to the following:</p> <ul> <li>material without explicit copyright assignment will be assigned to ManoMano</li> <li>apart from a few identified exceptions, material must be licensed under the project's MIT license (see LICENSE)</li> </ul> <p>Contributors must also agree to follow the code of conduct.</p>"},{"location":"contributing/0000-README/#coding-style","title":"Coding style","text":"<p>Refer to the development guidelines for more information.</p>"},{"location":"contributing/0000-README/#documentation","title":"Documentation","text":"<p>We consider documentation as important as code. Substantial contribution must always come with exhaustive documentation.</p> <p>Refer to the documentation guidelines for more information.</p>"},{"location":"contributing/0000-README/#tests","title":"Tests","text":"<p>Application and contributions should be tested and push for the highest quality standard.</p> <p>Refer to the development guidelines for more information.</p>"},{"location":"contributing/0000-README/#git","title":"Git","text":"<p>See development guidelines for more information about the Git workflow.</p>"},{"location":"contributing/0000-README/#issues","title":"Issues","text":"<p>If you find a bug that you don't know how to fix, please create an issue:</p> <ul> <li>use a clear and descriptive title</li> <li>give a step by step explanation on how to reproduce the problem</li> <li>include as many details as possible, even ones that may seem irrelevant; gists are a good way to include large amount of context and information</li> <li>describe what was already tried to fix the problem</li> </ul> <p>These contribution guidelines are adapted from the ManoMano CONTRIBUTING guide repository.</p>"},{"location":"contributing/0000-prerequisites/","title":"Development environment pre-requisites","text":"<ul> <li>Python 3.11</li> <li>Node 18+</li> <li>PDM 2.10+</li> <li>Docker</li> <li>Docker-compose</li> <li>A Slack workspace with sufficient permissions to create apps and install them<ul> <li>We recommend creating a dedicated workspace for development purposes</li> </ul> </li> <li>A tunnel to your local machine (e.g. expose, ngrok or Localtunnel) to receive Slack events</li> <li>pre-commit (optional, recommended)</li> <li>asdf or mise (previously rtx) (optional, recommended)<ul> <li>You can install and manage versions of Python, Node, PDM, etc. with these tools.</li> </ul> </li> </ul>"},{"location":"contributing/0001-setup-environment/","title":"Setup your Dev environment","text":"<p>The following documentation assume your system meet the prerequisites.</p>"},{"location":"contributing/0001-setup-environment/#clone-the-repository","title":"Clone the repository","text":"<pre><code>git clone git@github.com:ManoManoTech/firefighter-incident.git\ncd firefighter-incident\n</code></pre>"},{"location":"contributing/0001-setup-environment/#load-asdfmisedirenv-optional","title":"Load ASDF/Mise/Direnv (optional)","text":"<p>If you use ASDF, Mise (previously rtx) or Direnv, you can load the environment with:</p> <pre><code>asdf install\n# or\nmise install\n# then\ndirenv allow\n</code></pre>"},{"location":"contributing/0001-setup-environment/#install-dependencies-with-pdm","title":"Install dependencies with PDM","text":"<p>We assume you have <code>pdm</code> in your path. If you have installed it with <code>pipx</code>, you can use <code>pipx run pdm</code> instead.</p> <pre><code>pdm install\n</code></pre> <p>A new virtualenv will be created in <code>.venv</code> and dependencies will be installed.</p>"},{"location":"contributing/0001-setup-environment/#activate-your-venv","title":"Activate your venv","text":"<p>While you can use <code>pdm run</code> to run commands, you can also activate your venv with:</p> <pre><code>source .venv/bin/activate\n</code></pre>"},{"location":"contributing/0001-setup-environment/#install-pre-commit-hooks-optional","title":"Install pre-commit hooks (optional)","text":"<pre><code>pre-commit install\n</code></pre>"},{"location":"contributing/0001-setup-environment/#set-your-env","title":"Set your .env","text":"<p>First, copy the <code>.env.example</code> to <code>.env</code> and edit it.</p> <p>The first part of the <code>.env</code> is just your choice of local development, and dependencies connection details.</p> <p>Make sure to set the <code>SECRET_KEY</code> to a random string.</p> <p>You can already fill <code>DJANGO_SUPERUSER_EMAIL</code>, <code>DJANGO_SUPERUSER_USERNAME</code> and <code>DJANGO_SUPERUSER_PASSWORD</code> to create a superuser.</p>"},{"location":"contributing/0001-setup-environment/#setup-everything","title":"Setup everything","text":"<p>You can start up the Postgres and Redis dependencies, apply migrations, load fixtures, create a superuser and collect static files with one shortcut:</p> <pre><code>pdm run dev-env-setup\n</code></pre> What does it do? <p>It will perform the following steps:</p> <ol> <li>Launch dependencies with Docker</li> </ol> <pre><code>docker-compose up -d db redis\n</code></pre> <ol> <li>Apply the database migrations</li> </ol> <pre><code>pdm run migrate\n</code></pre> <p>This PDM command uses the <code>migrate</code> command of Django to apply migrations on all enabled applications. If you enable a new app (switch PagerDuty on for the first time for instance), you'll need to apply migrations again.</p> <ol> <li>Load fixtures</li> </ol> <pre><code>pdm run loaddata\n</code></pre> <p>This PDM command uses the <code>loaddata</code> command of Django to gather necessary objects (Severities, Components, Groups...)</p> <ol> <li>Create a superuser</li> </ol> <pre><code>pdm run createsuperuser\n</code></pre> <p>This PDM command will use the env variables set earlier (<code>DJANGO_SUPERUSER_EMAIL</code>, <code>DJANGO_SUPERUSER_USERNAME</code> and <code>DJANGO_SUPERUSER_PASSWORD</code>) to create an admin user. Tou can use this user to login at http://127.0.0.1:8080/admin/</p> <ol> <li>Collect static files</li> </ol> <pre><code>pdm run collectstatic\n</code></pre>"},{"location":"contributing/0001-setup-environment/#run-the-server","title":"Run the server","text":"<p>You should now be able to run the server locally with:</p> <pre><code>pdm runserver\n</code></pre> <p>This PDM command uses the <code>runserver</code> command of Django.</p> <p>You can login at http://127.0.0.1:8000/admin/ with the superuser you created.</p> <p>Warning</p> <p>If you run the server at this stage, you can expect some warnings/errors.</p>"},{"location":"contributing/0002-setup-slack-app/","title":"Set up the Slack app","text":"<p>You need to have a working Slack integration for FireFighter to work. Other integrations (PagerDuty, Confluence, ...) are optional.</p>"},{"location":"contributing/0002-setup-slack-app/#slack-app-setup","title":"Slack App setup","text":"<p>To use FireFighter, you'll need to have a working Slack App (aka Slack Bot) for your dev environment, and a way to expose it to the internet.</p>"},{"location":"contributing/0002-setup-slack-app/#expose-your-local-stack-on-the-internet","title":"Expose your local stack on the internet","text":"<p>You need to make your local instance reachable by Slack servers, using a tool like expose, ngrok or Localtunnel.</p> <p>Launch your local tunnel and note your URL.</p> <p>It's best if you have a stable URL, so you don't have to update your Slack app every time you restart your tunnel.</p>"},{"location":"contributing/0002-setup-slack-app/#choose-your-development-slack-workspace","title":"Choose your development Slack Workspace","text":"<p>For development purposes, we recommend creating a dedicated workspace.</p> <p>If you don't have one yet, you can create your own Slack workspace for testing.</p>"},{"location":"contributing/0002-setup-slack-app/#create-your-own-slack-app-and-install-it-to-your-workspace","title":"Create your own Slack app and install it to your workspace","text":"<p>Before creating your app, make sure you have a workspace to develop your app.</p> <p>Then, go to Slack application creation page and <code>Create a new app</code>.</p> Generate your manifest (recommended)Edit a pre-generated manifest <p>We provide a command to generate a manifest for you, with the correct values.</p> <p>First, make sure your variables to choose the command name are set:</p> <p><pre><code>SLACK_INCIDENT_COMMAND=\"/&lt;your-command-name&gt;\" # required\nSLACK_INCIDENT_COMMAND_ALIASES=\"/alias-1,/alias_abc\" # optional\n</code></pre> Then run <pre><code>ff-manage generate_manifest --public-url https://your-local-tunnel-url\n</code></pre></p> <p>Alternatively, use <code>pdm run manage generate_manifest</code>. You can check the options with <code>--help</code>.</p> <p>This will generate a manifest in stdout. You can copy it and paste it in the Slack App creation page.</p> <p>If you can't generate the manifest using the Django management command, you can try to copy the following manifest and change a few values.</p> <ol> <li>Change the 3 links to your local URL (<code>https://&lt;YOUR_LOCAL_STACK&gt;/api/v2/firefighter/slack/incident</code>)</li> <li>Preferably, change the command in <code>features &gt; slash_commands &gt; command</code> to avoid duplicates.<ul> <li>It is not needed if you use your own workspace, and not other Slack app uses <code>/incident</code> there.</li> <li>Hence, it is needed in the Team FireFighter workspace, as the INT environment uses this workspace.</li> <li><code>{YOUR_NAME}-incident</code> seems like a good idea</li> <li>Put the same command in your <code>.env</code> file, in <code>SLACK_INCIDENT_COMMAND</code></li> </ul> </li> </ol> <pre><code>_metadata:\n  major_version: 1\n  minor_version: 1\ndisplay_information:\n  name: FireFighter DEV {YOUR_NAME}\n  description: Incident Management Bot\n  background_color: \"#c84146\"\nfeatures:\n  app_home:\n    home_tab_enabled: true\n    messages_tab_enabled: false\n    messages_tab_read_only_enabled: false\n  bot_user:\n    display_name: FireFighter [{YOUR_NAME} DEV] - Incident\n    always_online: true\n  shortcuts:\n    - name: Open incident {YOUR_NAME}\n      type: global\n      callback_id: open_incident\n      description: Open an incident and get help\n  slash_commands:\n    - command: /{YOUR-NAME}-incident\n      url: https://&lt;YOUR_LOCAL_STACK&gt;/api/v2/firefighter/slack/incident/\n      description: Manage Incidents \ud83d\udea8\n      usage_hint: \"[open|update|close|status|help]\"\n      should_escape: false\noauth_config:\n  scopes:\n    bot:\n      - bookmarks:write\n      - channels:history\n      - channels:join\n      - channels:manage\n      - channels:read\n      - chat:write\n      - chat:write.customize\n      - chat:write.public\n      - commands\n      - groups:history\n      - groups:read\n      - groups:write\n      - im:read\n      - im:write\n      - mpim:read\n      - pins:read\n      - pins:write\n      - usergroups:read\n      - users.profile:read\n      - users:read\n      - users:read.email\n      - usergroups:write\nsettings:\n  event_subscriptions:\n    request_url: https://&lt;YOUR_LOCAL_STACK&gt;/api/v2/firefighter/slack/incident/\n    bot_events:\n      - app_home_opened\n      - channel_archive\n      - channel_id_changed\n      - channel_rename\n      - channel_unarchive\n      - group_archive\n      - group_rename\n      - group_unarchive\n  interactivity:\n    is_enabled: true\n    request_url: https://&lt;YOUR_LOCAL_STACK&gt;/api/v2/firefighter/slack/incident/\n  org_deploy_enabled: false\n  socket_mode_enabled: false\n  token_rotation_enabled: false\n</code></pre>"},{"location":"contributing/0002-setup-slack-app/#get-the-required-tokens-and-ids-from-slack","title":"Get the required tokens and IDs from Slack","text":"<p>Finally, make sure that your app is installed in your Slack Workspace.</p> <p>FireFighter is a \"dumb\" app, so you have to provide some values.</p> <p>You will set the following environment variables in your <code>.env</code> file:</p> <ul> <li><code>SLACK_SIGNING_SECRET</code>: The Slack signing secret (Slack API &gt; Your App Page &gt; Settings &gt; Basic Information)</li> <li><code>SLACK_BOT_TOKEN</code>: Bot User OAuth Token (in Slack API &gt; Your App Page &gt; Features &gt; OAuth &amp; Permissions)     - It should start with <code>xoxb-</code></li> </ul> <p>You may want to add in the DB some conversations:</p> <ul> <li>An equivalent of #tech-incidents, with the tag <code>tech_incidents</code></li> <li>An equivalent of #it-deploy, with the tag <code>it_deploy</code></li> </ul>"},{"location":"contributing/0002-setup-slack-app/#review-your-settings","title":"Review your settings","text":"<p>Check the <code>.env</code>.</p> <p>Read the settings page.</p> <p>Once Slack is setup, you can remove FF_SLACK_SKIP_CHECKS=true from your <code>.env</code> file.</p> <p>Using the information from the previous part, check your configuration.</p> <p>At the moment, we have no PagerDuty or Confluence accounts to test the integration, Nevertheless the integrations can be disabled.</p> .env<pre><code>## Local dev tooling Settings ## (2)\n\nDJANGO_SUPERUSER_EMAIL=&lt;YOUR_EMAIL&gt;\nDJANGO_SUPERUSER_USERNAME=&lt;YOUR_USERNAME&gt;\nDJANGO_SUPERUSER_PASSWORD=&lt;YOUR_PASSWORD&gt;\n\n## DB Settings (required)\n\nPOSTGRES_HOST=127.0.0.1\nPOSTGRES_PORT=5432\nPOSTGRES_USER=firefighter\nPOSTGRES_DB=ff_dev\nPOSTGRES_PASSWORD=firefighter\n\n## Redis Settings (required)\n\nREDIS_HOST=127.0.0.1\nREDIS_PORT=6379\n\n# General settings\n\n# (3)\nENV=dev\nSECRET_KEY=\"YOUR_RANDOM_STRING\"\nDEBUG=True\nAPP_DISPLAY_NAME=\"FireFighter[DEV]\"\n\nLOG_LEVEL=DEBUG\n\nPYTHONDONTWRITEBYTECODE=1\n\nDEBUG_TOOLBAR=True\nSILK_PROFILING=False\nTIME_ZONE=Europe/Paris\nBASE_URL=http://127.0.0.1:8000\n\nCSRF_TRUSTED_ORIGINS=https://*,http://*\n\n## Slack Settings (Workspace, Command, Bot)\n\nSLACK_INCIDENT_COMMAND=\"/&lt;name&gt;-incident\"\n# SLACK_INCIDENT_COMMAND_ALIASES=/alias-1,/alias_abc\nSLACK_BOT_TOKEN=xoxb-XXXXXXXXXXXXX-XXXXXXXXXXXXX-XXXXXXXXXXXXXXXXXXXXXXXX\nSLACK_SIGNING_SECRET=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nSLACK_INCIDENT_HELP_GUIDE_URL=\"https://mycompany.atlassian.net/wiki/spaces/TC/pages/3928261283/IMPACT+-+Incident+Management+Platform\"\nSLACK_POSTMORTEM_HELP_URL=\"https://mycompany.atlassian.net/wiki/spaces/TC/pages/3979741279/How+to+write+a+postmortem\"\nSLACK_EMERGENCY_COMMUNICATION_GUIDE_URL=\"https://mycompany.atlassian.net/wiki/spaces/COM/pages/2662171441/COM+Process+-+Tech+Incidents\"\nSLACK_EMERGENCY_USERGROUP_ID=\"S05JECFT36J\"\n\n# Optional settings\nSLACK_SEVERITY_HELP_GUIDE_URL=\"https://mycompany.atlassian.net/wiki/spaces/TC/pages/4024500413/Priority+levels\"\n\n\n## Confluence settings (optional, recommended) ## (4)\n\nENABLE_CONFLUENCE=False\n# Required settings for the integration\nCONFLUENCE_USERNAME=\"&lt;YOU&gt;@mycompany.local\"\nCONFLUENCE_API_KEY=\"XXXXXXXXXXXXXXXXXXXXXXXX\" #gitleaks:allow\nCONFLUENCE_URL=\"https://mycompany.atlassian.local/wiki/rest/api\"\nCONFLUENCE_POSTMORTEM_SPACE=\"PUL\"\n# Settings required for specific features\nCONFLUENCE_POSTMORTEM_TEMPLATE_PAGE_ID=1337295111\nCONFLUENCE_POSTMORTEM_FOLDER_ID=3030843613\nCONFLUENCE_RUNBOOKS_FOLDER_ID=1234\nCONFLUENCE_ON_CALL_ROTA_PAGE_ID=2399862844\nCONFLUENCE_ON_CALL_PAGE_ID=3464462975\n\nCONFLUENCE_MOCK_CREATE_POSTMORTEM=True\n\n## PagerDuty settings (optional) ## (5)\n\nENABLE_PAGERDUTY=False\nPAGERDUTY_ACCOUNT_EMAIL=\"admin@mycompany.com\"\nPAGERDUTY_API_KEY=\"u+XXXXXXXXXXXXXXXX-X\"\nPAGERDUTY_URL=\"https://api.pagerduty.com\"\n\n## SSO settings\n\nOIDC_OP_DISCOVERY_DOCUMENT_URL=https://oauth.mycompany.local/auth/realms/realm/.well-known/openid-configuration\nOIDC_RP_CLIENT_ID=firefighter-incident\nOIDC_RP_CLIENT_SECRET=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n\nOIDC_MIDDLEWARE_LOGIN_REQUIRED_REDIRECT=False\n\n## JIRA settings\nENABLE_JIRA=True\n\nRAID_JIRA_API_URL=\"mycompany.atlassian.local\"\nRAID_JIRA_API_USER=\"teamqraft@mycompany.local\"\nRAID_JIRA_API_PASSWORD=\"XXXXXXXXXXXXX\"\n\n## RAID settings (optional, needs JIRA settings)\nENABLE_RAID=True\n\nRAID_DEFAULT_JIRA_QRAFT_USER_ID=\"XXXXXXXX\" #gitleaks:allow\nRAID_JIRA_PROJECT_KEY=\"T2\"\nRAID_TOOLBOX_URL=https://toolbox.mycompany.com/login\nRAID_JIRA_INCIDENT_CATEGORY_FIELD=\"customfield_12369\"\n\nFF_SLACK_SKIP_CHECKS=true\n# Disable SSO redirect for local dev by setting to true but still need a valid URL in OIDC_OP_DISCOVERY_DOCUMENT_URL.\n# When SSO is disabled, go to /admin/ to login\nFF_DEBUG_NO_SSO_REDIRECT=false\n</code></pre> <ol> <li>These environment variables are not loaded by Python/Django, and are only used for bash scripts and Makefiles.    Make sure there are no spaces or quotes in the values.</li> <li> <ul> <li><code>dev</code></li> <li><code>test</code></li> <li><code>prd</code>, <code>int</code>, <code>support</code>, <code>prod</code> are equivalent for the app (not for Datadog!)</li> </ul> </li> <li>If you enable the Confluence integration all environments variables must be set. If you disable it, no variables will be loaded.</li> <li>If you enable the PagerDuty integration, you must set the <code>PAGERDUTY_API_KEY</code> and <code>PAGERDUTY_ACCOUNT_EMAIL</code> environment variables. If you disable it, no variables will be loaded.</li> </ol>"},{"location":"contributing/0002-setup-slack-app/#check-everything-is-working","title":"Check everything is working","text":"<p>If you stopped the server, you can restart it with <code>pdm run runserver</code>.</p> <ul> <li>Go to your https://127.0.0.1:8000</li> <li>Go to the BackOffice https://127.0.0.1:8000/admin/</li> <li>Submit your command in Slack</li> </ul>"},{"location":"contributing/0010-general_architecture/","title":"General Architecture","text":"<p>FireFighter is built with Django 4.2+, and Python 3.11+.</p>"},{"location":"contributing/0010-general_architecture/#apps","title":"Apps","text":"<p>The project is built with multiple Django apps.</p>"},{"location":"contributing/0010-general_architecture/#custom-apps","title":"Custom apps","text":"<ul> <li><code>firefighter</code><ul> <li>Main project package. Has the health-check URL, DB/Redis connections, all the settings... No features/models.</li> </ul> </li> <li><code>incidents</code><ul> <li>App containing all the incidents models and features, as well as the views.</li> </ul> </li> <li><code>api</code><ul> <li>App containing all the views for the FireFighter API. Might be integrated in <code>incidents</code>.</li> </ul> </li> <li><code>slack</code><ul> <li>All Slack models and API.</li> <li>As we are still coupled to Slack, this app unfortunately still a lot of business logic.</li> </ul> </li> <li><code>confluence</code><ul> <li>To read/write Confluence pages. Model for page.</li> </ul> </li> <li><code>pagerduty</code><ul> <li>Read PagerDuty on-call.</li> </ul> </li> <li><code>raid</code><ul> <li>Non-critical incident (defects) management with Jira.</li> </ul> </li> </ul> <p><code>confluence</code>, <code>pagerduty</code> and <code>api</code> can be disabled in the settings. <code>slack</code> is not, as you would lose too much functionality.</p>"},{"location":"contributing/0010-general_architecture/#other-apps","title":"Other apps","text":""},{"location":"contributing/0010-general_architecture/#core-django","title":"Core-Django","text":"<ul> <li>django.contrib.admin to provide the back-office. (<code>/admin</code>)</li> <li>django.contrib.admindocs to provide the automatic documentation. (<code>/admin/doc/</code>)<ul> <li>Useful to discover all models and their related fields.</li> </ul> </li> <li>django.contrib.auth to provide basic auth with User, Group and Permissions.</li> <li>django.contrib.contenttypes to track all models installed. Allows generic relations and much more.</li> <li>django.contrib.messages to display notifications.</li> <li>django.contrib.sessions</li> <li>django.contrib.staticfiles to collect all static files and put them in a single directory.<ul> <li>Every app puts their assets in their own directory. They have to be regrouped to be served easily.</li> <li>Serves assets in dev.</li> </ul> </li> <li>django.contrib.humanize to format in a more human ways numbers and dates.</li> </ul>"},{"location":"contributing/0010-general_architecture/#dependencies","title":"Dependencies","text":"<ul> <li><code>widget_tweaks</code> to customize form fields in templates. Readme</li> <li><code>rest_framework</code> to provide REST API features. Extensive doc for Django Rest Framework.</li> <li><code>django_filters</code> to provide filtering on views or API endpoints. Docs.</li> <li><code>django-taggit</code> to provide a TagManager on Incidents.</li> <li><code>celery</code> to provide a task queue.</li> </ul>"},{"location":"contributing/0010-general_architecture/#other-dependencies","title":"Other dependencies","text":"<ul> <li><code>whitenoise</code> to serve assets in Python for production. Handles compression and caching headers. Docs.<ul> <li>Installed as a middleware.</li> </ul> </li> </ul> <p>Info</p> <p>You can get documentation on Models, Views, Templates, etc. by visiting the back-office of your deployment as an admin and clicking \"View documentation\" in the toolbar.</p>"},{"location":"contributing/development/","title":"Development","text":"<p>We want to make contributing straightforward and easy for everyone. As such and unless otherwise stated we will use the traditional Github fork and pull workflow: any commit must be made to a feature/topic branch in a local fork and submitted via a merge request before it can be merged. It is strongly advised to open a discussion or an issue before working on implementing a new feature or making any kind of large code refactoring.</p> <p>Issues and merge requests should be in English.</p>"},{"location":"contributing/development/#git","title":"Git","text":"<p>Make sure you have a GitHub account. The main branch should be considered as the production/deploy branch.</p>"},{"location":"contributing/development/#forking-workflow","title":"Forking workflow","text":"<p>Extensive information can be found in this excellent forking workflow tutorial.</p> <p>In a nutshell:</p> <ol> <li> <p>Fork the repository and clone it locally.</p> <pre><code>git clone https://github.com/${USERNAME}/firefighter-incident\ncd firefighter-incident\n</code></pre> </li> <li> <p>Create a topic branch where changes will be done.</p> <pre><code>git checkout -b ${MY_TOPIC_BRANCH}\n</code></pre> </li> <li> <p>Commit the changes in logical and incremental chunks and use    interactive rebase    when needed.    In your    commit messages,    make sure to:     - use the present tense     - use the imperative mood     - limit the first line to 72 characters     - reference any associated issues and/or PRs (if applicable)</p> <pre><code>git commit -am 'Add new feature...'\n</code></pre> <p>You may loosely follow conventional commits if you want to.</p> </li> <li> <p>Add test if needed &amp; make sure the test suite and various linters are passing.</p> </li> <li> <p>Push the topic branch to the remote forked repository.</p> <pre><code>git push origin ${MY_TOPIC_BRANCH}\n</code></pre> </li> <li> <p>Open a Pull Request to merge your code and its documentation. The earlier you open a merge request, the sooner you can get feedback.</p> </li> <li> <p>Verify the test suite is passing in the CI &amp; verify if the pipeline is green.</p> </li> <li> <p>Once the PR has been merged, the topic branch can be removed from the local fork.</p> <pre><code>git branch -d ${MY_TOPIC_BRANCH}\ngit push origin --delete ${MY_TOPIC_BRANCH}\n</code></pre> </li> </ol>"},{"location":"contributing/development/#syncing-a-fork-with-its-upstream","title":"Syncing a fork with its upstream","text":"<p>This is used to keep a local fork up-to-date with the original upstream repository.</p> <ol> <li> <p>Connect the local to the original upstream repository.</p> <pre><code>git remote add upstream https://github.com/${USERNAME}/${REPONAME}\n</code></pre> </li> <li> <p>Checkout, fetch and merge the upstream master branch to the local one.</p> <pre><code>git checkout main\ngit fetch upstream\ngit merge upstream/master\n</code></pre> </li> <li> <p>Push changes to update to remote forked repository.</p> <pre><code>git push\n</code></pre> </li> </ol> <p>See GitHub help for more information.</p>"},{"location":"contributing/development/#dev-tooling","title":"Dev tooling","text":"<p>Check all available commands using <code>pdm run --list</code>.</p>"},{"location":"contributing/development/#formatting","title":"Formatting","text":"<p>We use <code>ruff</code>. You can run <code>pdm run fmt</code> or <code>ruff format .</code> in the project root to format every file.</p> <pre><code>pdm run fmt\n</code></pre> <p>This is the equivalent of running <code>ruff format .</code> in the project root.</p> <p>Import sorting managed by <code>ruff</code>.</p>"},{"location":"contributing/development/#linting","title":"Linting","text":"<p><code>ruff</code>, <code>pylint</code> and <code>mypy</code> are configured.</p> <pre><code>pdm run lint-ruff\n</code></pre> <pre><code>pdm run lint-pylint\n</code></pre> <p>This is the equivalent of running <code>pylint --django-settings-module=firefighter.settings &lt;our_sources&gt;</code> in the project root.</p> <p>Note</p> <p>We are progressively disabling Pylint checks that are implemented by <code>ruff</code>.</p> <pre><code>pdm run lint-mypy\n</code></pre> <p>This is the equivalent of running <code>mypy &lt;our_sources&gt;</code> in the project root.</p> <p>Warning</p> <p>The lint checks won't pass, as they are still some issues/false positives that needs to be fixed.</p>"},{"location":"contributing/development/#testing","title":"Testing","text":"<pre><code>pdm run tests\n</code></pre> <p>This is the equivalent of running <code>pytest tests</code> in the project root.</p> <p>Warning</p> <p>The testing coverage is still very low.</p>"},{"location":"contributing/development/#documentation","title":"Documentation","text":"<pre><code>pdm run docs-serve\n</code></pre> <p>This is the equivalent of running <code>mkdocs serve</code> in the project root. // TODO Pre-commit hook</p> <p>Read more in the documentation contribution docs.</p>"},{"location":"contributing/development/#conventions","title":"Conventions","text":""},{"location":"contributing/development/#code-style","title":"Code style","text":"<p>We loosely follow the PEP8 style guide and Google's Python Style Guide.</p> <p>Use your best judgement when deciding whether to break the rules.</p>"},{"location":"contributing/development/#imports","title":"Imports","text":"<p>Import sorting is managed by <code>ruff</code>. Absolute imports are enforced.</p>"},{"location":"contributing/development/#docstrings","title":"Docstrings","text":"<p>We use Google-style docstrings.</p> <p>You can link to other classes, methods, functions, or modules by using the mkdocstrings cross-reference syntax:</p> <pre><code>With a custom title:\n[`Object 1`][full.path.object1]\n\nWith the identifier as title:\n[full.path.object2][]\n</code></pre> <p>You can cross-reference to the Python standard library and Django objects.</p>"},{"location":"contributing/documentation/","title":"Documentation","text":"<p>Substantial contribution must always come with exhaustive documentation. We consider documentation as important as code. All the documentation for the project FireFighter are in the repository.</p> <p>If you see mistake or lack of information on a part of the project documentation, you can add it. If it's a technical part, you can add it directly in the code, using inline documentation (see the development guideline)</p>"},{"location":"contributing/documentation/#documentation-formatting","title":"Documentation Formatting","text":"<p>Although formatting is not enforced on the documentation, feel free to use the VS Code extension <code>markdownlint</code> to keep the Markdown style consistent.</p>"},{"location":"contributing/documentation/#running-the-documentation-locally","title":"Running the documentation locally","text":"<p>The documentation is built with MkDocs, a static site generator for project documentation.</p> <p>To serve the documentation locally, run:</p> <pre><code>pdm run docs-serve\n</code></pre> <p>To build the documentation locally, run:</p> <pre><code>pdm run docs-build\n</code></pre>"},{"location":"contributing/faq/","title":"FAQ and Troubleshooting","text":"<p>Mainly for VS Code and pyright users</p>"},{"location":"contributing/faq/#conflicting-stubs-with-vs-code-extension","title":"Conflicting stubs with VS Code extension","text":"<p>While we don't use Pyright in CI, if you are using Pylance/PyRight in your IDE, you may want to remove the django-stubs provided by the extension, as they collide with django-stubs.</p> <p>E.g. for Mac: <code>rm -r ~/.vscode/extensions/ms-python.vscode-pylance-20*/dist/bundled/stubs/django-stubs</code></p> <p>You will need to restart VS Code.</p> <p>If a better method that outright deleting the stubs (after each update of the extension...) exists, please open an issue or PR.</p>"},{"location":"contributing/faq/#ignore-specific-linting-errors","title":"Ignore specific linting errors","text":"<p>We actively use <code>ruff</code>'s <code># noqa: &lt;code&gt;</code> and <code>mypy</code>'s <code># type: ignore[&lt;code&gt;]</code> to ignore type errors.</p> <p>Pylint ignore codes are accepted, but rules re-implemented by <code>ruff</code> should be disabled in <code>pyproject.toml</code> instead.</p> <p>We accept ignores for pyright, with inline comments <code># pyright: ignore[&lt;code&gt;]</code>.</p> <p>Ignore flags should include a specific code, and not be too broad.</p>"},{"location":"contributing/faq/#mypy-crashes","title":"Mypy crashes","text":"<p>Mypy may crash because of cache issues. You can try to delete the cache folder <code>rm -rf .mypy_cache</code>, or use the <code>--no-incremental</code> flag.</p>"},{"location":"contributing/ui/","title":"UI","text":""},{"location":"contributing/ui/#web-ui","title":"Web UI","text":""},{"location":"contributing/ui/#javascript-graceful-degradation","title":"Javascript Graceful degradation","text":"<p>We use htmx to build the web UI. It is a small JS library that allows you to access AJAXdirectly in HTML, using attributes like <code>hx-get</code>, <code>hx-post</code>, <code>hx-swap</code>, <code>hx-trigger</code>, etc.</p> <p>It allows, in conjonction with Alpine.js to have a more dynamic UI, without having to write a lot of JS code.</p> <p>The UI should be usable without JS, and should be accessible. If you need to use JS, make sure it is accessible.</p> <p>The goal is to be usable without JS, even if the experience is really degraded.</p>"},{"location":"contributing/ui/#tailwind-css","title":"Tailwind CSS","text":"<p>Firefighter uses Tailwind CSS for styling. It is a utility-first CSS framework, which means it provides a set of utility classes that can be used to build your UI. It is highly customizable and easy to use.</p> <p>We use Tailwind UI and DaisyUI to build the UI.</p>"},{"location":"contributing/ui/#icons","title":"Icons","text":"<p>FireFighter web uses icons from HeroIcons, solid style. For consistency, use them as much as possible.</p>"},{"location":"contributing/ui/#color-scheme","title":"Color-scheme","text":"<p>FireFighter web supports both light and dark theme, following the browser CSS feature <code>prefers-colors-scheme</code>. Make sure everything is legible and good-looking in both themes.</p>"},{"location":"contributing/ux/","title":"UX Flow &amp; Design","text":"<ul> <li>If you have idea to improve the UX flow or the design of the FireFighter Tool, you can open a new Github issue or discussion.</li> <li>If you don't already have an idea for a UX improvement, you can pick an existing problem to work on from the issue list. Be sure to comment and verify that no one else is working on the UX for the issue, and to make sure we\u2019re still interested in a given contribution. You can validate this with the project owner(s).</li> </ul> <ul> <li>The request will be studied by the project owner(s) and will come back to you to ask question to clarify the request &amp; validate the good understanding of the request.</li> </ul> <ul> <li>After the implementation, you will be able to go see and test this idea in preview with the team in test environment!</li> </ul> <ul> <li>After this validation, the request can go into production and make life easier for all users when they manage an incident!</li> </ul>"},{"location":"contributing/ux/#design-guidelines","title":"Design guidelines","text":"<ul> <li>All actions taking place during the incident resolution must be able to be done via the Slack App.<ul> <li>Some of these actions may be doable through other means (e.g.: opening an incident through Slack, but also API or Web UI.)</li> </ul> </li> <li>Actions taking place after the incident resolution may be done through the Web UI, API or Back-Office.</li> </ul>"},{"location":"deploy/00-intro/","title":"Deployment Guide","text":""},{"location":"deploy/00-intro/#introduction","title":"Introduction","text":"<p>Welcome to the Deployment Guide for our open-source Django and Celery application. As you embark on the journey of deploying our application, it's important to have a clear understanding of the current stage of its open-sourcing phase. Our application has been actively deployed for over two years at ManoMano, but please be aware that this open-sourcing endeavor is still in its early stages.</p>"},{"location":"deploy/00-intro/#firefighter-as-a-standalone-application","title":"FireFighter as a standalone application","text":"<p>FireFighter is a standalone application, and we don't recommend that you try to deploy it alongside other Django applications. It's possible, but it's not something we support.</p>"},{"location":"deploy/00-intro/#navigating-the-open-sourcing-phase","title":"Navigating the Open-Sourcing Phase","text":"<p>While our application has a history of successful deployment, it's essential to acknowledge that certain aspects, such as testing and compatibility with diverse use cases and deployment options, might still be evolving. We recognize that deployment might not be straightforward for all scenarios, and we are actively working to improve the documentation to make this process as smooth as possible.</p>"},{"location":"deploy/00-intro/#the-imperfect-state-of-testing","title":"The Imperfect State of Testing","text":"<p>Let's be honest about the current state of testing: while it has been tested within our in-house environment, open-sourcing brings new variables and configurations that might not have been thoroughly explored. This means that potential pitfalls or unexpected behavior could arise during deployment. Test suite still has many gaps, and we are working to improve it.</p>"},{"location":"deploy/00-intro/#your-contributions-matter","title":"Your Contributions Matter","text":"<p>As we continue to refine and enhance our open-source application, we invite you to actively participate in its development. Your insights, experiences, and expertise are invaluable in making this application more robust and versatile. Whether you're a seasoned developer or just starting, there are several ways you can contribute:</p> <ul> <li>Open Issues: If you encounter challenges or inconsistencies during deployment, open an issue on our repository. This helps us identify pain points and work towards resolving them.</li> </ul> <ul> <li>Initiate Discussions: If you have questions, ideas, or suggestions related to deployment, start a discussion on our forums. Engaging with the community can lead to valuable insights and improvements.</li> </ul> <ul> <li>Submit Pull Requests: If you've identified ways to enhance the deployment documentation, configurations, or processes, we encourage you to submit pull requests. Your contributions can make a significant impact on the overall experience of our users.</li> </ul>"},{"location":"deploy/00-intro/#embracing-a-collaborative-effort","title":"Embracing a Collaborative Effort","text":"<p>We believe that the open-source community's strength lies in collaboration. By sharing your deployment experiences, suggesting improvements, and actively participating in discussions, you contribute to the growth of a resource that benefits everyone.</p> <p>Thank you for joining us in this exciting phase of open-sourcing our application. Your engagement and contributions are instrumental in shaping its future.</p>"},{"location":"deploy/XX-auth/","title":"Authentication and authorization","text":""},{"location":"deploy/XX-auth/#foreword","title":"Foreword","text":"<p>FireFighter was developed with the assumption that it would be deployed in a private network, and that the only users would be trusted users. As such, we have not invested a lot of time into making the authentication and authorization system robust.</p>"},{"location":"deploy/XX-auth/#authentication","title":"Authentication","text":"<p>FireFighter uses Django's built-in authentication system.</p> <p>FireFighter is configured with the following authentication backends:</p> <ul> <li>\"oauth2_authcodeflow.auth.AuthenticationBackend,</li> <li>\"django.contrib.auth.backends.ModelBackend\"</li> </ul> <p>Most routes will redirect to the OIDC provider if the user is not authenticated.</p> <p><code>/admin/</code> route allows for a back-up password authentication.</p>"},{"location":"deploy/XX-auth/#authorization","title":"Authorization","text":"<p>FireFighter uses Django's built-in group and permission system.</p> <p>Most actions have no authorization checks.</p>"},{"location":"deploy/XX-custom-settings/","title":"Custom settings","text":"<p>You can specify a custom settings module by setting the <code>FF_ADDITIONAL_SETTINGS_MODULE</code> environment variable.</p> <p>It will load after all default settings have been loaded, so you can override any setting.</p> <p>You can also use this to run any custom code you want to run when FireFighter starts up.</p> <p>The module must be importable from the Python path. You must not include the <code>.py</code> extension.</p> <p>Info</p> <p>While most things can be configured with environment variables or through the BackOffice, some settings can only be configured by editing the settings module.</p>"},{"location":"deploy/XX-custom-settings/#writing-your-custom-settings-module","title":"Writing your custom settings module","text":"<p>In your custom settings module, you can import the <code>firefighter.settings.settings_utils</code>.</p> <p>If importing other things, beware of circular imports and imports made before Django has been initialized.</p> <p>Do not try to load <code>django.conf.settings</code> or <code>firefighter.settings</code> as they will not be loaded yet.</p>"},{"location":"deploy/XX-custom-settings/#advanced-override-built-in-settings","title":"Advanced: override built-in settings","text":"<p>You can also change <code>DJANGO_SETTINGS_MODULE</code> to point to your own settings module.</p> <p>We recommend you load <code>firefighter.settings</code> in your settings module, and override the settings you want to change.</p> <p>Warning</p> <p>Modifying Django settings or third-party settings may break FireFighter.</p>"},{"location":"deploy/XX-i18n-l10/","title":"Internationalization, Localization and timezones (i18n, l10n and TZ)","text":""},{"location":"deploy/XX-i18n-l10/#internationalization","title":"Internationalization","text":"<p>We plan to support Django's internationalization, but it is not used or tested, and currently disabled.</p> <p>Most of the code is in English, and we don't have any translation files.</p> <p>If you are interested in translating FireFighter, please open an issue.</p>"},{"location":"deploy/XX-i18n-l10/#localization","title":"Localization","text":"<p>We support Django's localization, but it is only used with a single locale.</p> <p>We currently override some date formats to use an international format (YYYY-MM-DD, 24 hours time) in the configuration and  </p>"},{"location":"deploy/XX-i18n-l10/#timezones","title":"Timezones","text":"<p>We currently only support deploying with a single timezone.</p> <p>Use Django's timezone support to configure the timezone.</p>"},{"location":"deploy/XX-logs-traces/","title":"FireFighter Telemetry","text":""},{"location":"deploy/XX-logs-traces/#logging","title":"Logging","text":"<p>FireFighter uses the logging module to log messages to the console and to a file.</p>"},{"location":"deploy/XX-logs-traces/#default-modes","title":"Default modes","text":""},{"location":"deploy/XX-logs-traces/#production-json","title":"Production JSON","text":"<p>FireFighter logs to stdout using a JSON formatter.</p> <p>The JSON formats adheres to DataDog's JSON log format.</p>"},{"location":"deploy/XX-logs-traces/#development","title":"Development","text":"<p>In development mode, FireFighter logs to the console using a Pretty formatter</p>"},{"location":"deploy/XX-logs-traces/#further-configuration","title":"Further Configuration","text":"<p>You can configure the logging manually by editing the <code>LOGGING</code> Python setting, or by running your configuration code in your custom settings.</p>"},{"location":"deploy/XX-logs-traces/#tracing","title":"Tracing","text":"<p>FireFighter use Datadog's ddtrace. Most configuration can be passed as environment variables.</p>"},{"location":"deploy/XX-settings/","title":"Settings","text":"<p>Most of the settings are loaded through environment variables.</p> <p>Other settings may be set using a custom settings module.</p> <p>The exposed settings are not guaranteed to be stable. We may change them at any time. We will try to avoid breaking changes, but we may not be able to avoid them.</p>"},{"location":"deploy/XX-settings/#settings-reference","title":"Settings reference","text":""},{"location":"deploy/XX-settings/#database-settings-required","title":"Database settings (required)","text":"<ul> <li><code>POSTGRES_DB</code></li> <li><code>POSTGRES_USER</code></li> <li><code>POSTGRES_PASSWORD</code></li> <li><code>POSTGRES_HOST</code></li> <li><code>POSTGRES_PORT</code></li> </ul>"},{"location":"deploy/XX-settings/#redis-settings-required","title":"Redis settings (required)","text":"<ul> <li><code>REDIS_HOST</code></li> <li><code>REDIS_PORT</code></li> </ul> <p>Redis DBs:</p> <ul> <li><code>0</code> for default</li> <li><code>1</code> for sessions</li> <li><code>2</code> for cache</li> <li><code>10</code> for celery</li> </ul>"},{"location":"deploy/XX-settings/#firefighter-settings","title":"FireFighter settings","text":"<ul> <li><code>BASE_URL</code></li> <li><code>FF_ROLE_REMINDER_MIN_DAYS_INTERVAL</code></li> <li><code>FF_USER_ID_HEADER</code></li> <li><code>FF_OVERRIDE_MENUS_CREATION</code></li> <li><code>FF_DEBUG_ERROR_PAGES</code></li> <li><code>FF_DEBUG_ERROR_PAGES</code></li> <li><code>FF_SKIP_SECRET_KEY_CHECK</code></li> <li><code>FF_EXPOSE_API_DOCS</code></li> <li><code>PLAUSIBLE_DOMAIN</code></li> <li><code>PLAUSIBLE_SCRIPT_URL</code></li> </ul>"},{"location":"deploy/XX-settings/#sso-oidc-settings","title":"SSO OIDC settings","text":"<p>See django-oauth2-codeflow documentation for more details.</p> <ul> <li><code>OIDC_OP_DISCOVERY_DOCUMENT_URL</code>: url to the well-known OIDC discovery document</li> <li><code>OIDC_UNUSABLE_PASSWORD</code>: default: <code>False</code></li> <li><code>OIDC_RP_USE_PKCE</code>: default: <code>False</code></li> <li><code>OIDC_RP_CLIENT_ID</code>: required</li> <li><code>OIDC_RP_CLIENT_SECRET</code>: required</li> <li><code>OIDC_TIMEOUT</code>: timeout in seconds for OIDC requests (default: 15s)</li> </ul>"},{"location":"deploy/XX-settings/#debug-settings","title":"Debug settings","text":"<p><code>DEBUG_TOOLBAR</code></p>"},{"location":"deploy/XX-settings/#slack-integration","title":"Slack integration","text":""},{"location":"deploy/XX-settings/#required-settings","title":"Required settings","text":"<ul> <li><code>SLACK_BOT_TOKEN</code></li> <li><code>SLACK_SIGNING_SECRET</code></li> <li><code>SLACK_INCIDENT_COMMAND</code>: default: <code>/incident</code></li> </ul>"},{"location":"deploy/XX-settings/#optional-settings","title":"Optional settings","text":"<ul> <li><code>SLACK_POSTMORTEM_HELP_URL</code></li> <li><code>SLACK_INCIDENT_COMMAND_ALIASES</code>: default: ``</li> <li><code>SLACK_INCIDENT_HELP_GUIDE_URL</code></li> <li><code>SLACK_SEVERITY_HELP_GUIDE_URL</code></li> <li><code>SLACK_EMERGENCY_COMMUNICATION_GUIDE_URL</code></li> <li><code>SLACK_EMERGENCY_USERGROUP_ID</code></li> <li><code>SLACK_APP_EMOJI</code></li> <li><code>FF_SLACK_SKIP_CHECKS</code></li> </ul>"},{"location":"deploy/XX-settings/#confluence-integration","title":"Confluence integration","text":"<p><code>ENABLE_CONFLUENCE</code></p>"},{"location":"deploy/XX-settings/#pagerduty-integration","title":"Pagerduty integration","text":"<ul> <li><code>ENABLE_PAGERDUTY</code>: default: <code>False</code></li> <li><code>PAGERDUTY_API_KEY</code></li> <li><code>PAGERDUTY_ACCOUNT_EMAIL</code></li> <li><code>PAGERDUTY_URL</code>: default: <code>https://api.pagerduty.com</code></li> </ul>"},{"location":"deploy/XX-settings/#other-settings","title":"Other settings","text":""},{"location":"deploy/XX-settings/#django","title":"Django","text":"<ul> <li><code>CSRF_TRUSTED_ORIGINS</code></li> <li><code>TIME_ZONE</code></li> <li><code>SECRET_KEY</code></li> </ul>"},{"location":"deploy/XX-settings/#mapping-environment-variables","title":"Mapping environment variables","text":"<p>k/v pairs separated by <code>,</code> and <code>:</code></p> <p><code>FF_ENV_VAR_MAPPING=FIREFIGHTER_NAME:MY_CUSTOM_ENV_VAR_NAME,FIREFIGHTER_OTHER_NAME:MY_OTHER_CUSTOM_ENV_VAR_NAME</code></p> <p>Useful for mapping environment variables to the ones used by FireFighter.</p> <p>Warning</p> <p>Content of the target environment variables will be overwritten.</p>"},{"location":"deploy/XX-support-policy/","title":"Compatibility and Support Policy","text":"<p>Note</p> <p>FireFighter comes with no guarantees of support. The following is a statement of intent, not a guarantee.</p>"},{"location":"deploy/XX-support-policy/#firefighter-support-policy","title":"FireFighter Support Policy","text":"<p>We plan to follow semantic versioning, and provide a reasonable changelog.</p> <p>However, we may break compatibility between minor versions, and don't plan to support older versions.</p> <p>Please check the release notes before upgrading.</p>"},{"location":"deploy/XX-support-policy/#compatibility","title":"Compatibility","text":""},{"location":"deploy/XX-support-policy/#django-compatibility","title":"Django compatibility","text":"<p>FireFighter only supports Django 4.2.</p> <p>We do no, and have no plans to support older versions of Django.</p> <p>We aim to support the latest version of Django in a timely manner. We do not provide any guarantees of support for future versions of Django.</p>"},{"location":"deploy/XX-support-policy/#python-compatibility","title":"Python compatibility","text":"<p>FireFighter only supports Python 3.11.</p> <p>We do not, and have no plans to support older versions of Python.</p> <p>We aim to support the latest version of Python in a timely manner. We do not provide any guarantees of support for future versions of Python.</p>"},{"location":"deploy/XX-support-policy/#postgresql-compatibility","title":"PostgreSQL compatibility","text":"<p>FireFighter is only tested with PostgreSQL 13.</p>"},{"location":"deploy/XX-support-policy/#redis-compatibility","title":"Redis compatibility","text":"<p>FireFighter is only tested with Redis 6.</p>"},{"location":"deploy/XX-support-policy/#target-platforms","title":"Target Platforms","text":"<p>FireFighter only supports actively supported operating systems.</p>"},{"location":"deploy/XX-support-policy/#linux-and-macos","title":"Linux and macOS","text":"<p>FireFighter should run on any platform that supports Python 3.11. It should be able to run on AMD and ARM.</p> <p>The following platforms have been tested:</p> <ul> <li>macOS 14.1.1 (ARM)</li> <li>Debian 11 (ARM/AMD)</li> </ul>"},{"location":"deploy/XX-support-policy/#windows","title":"Windows","text":"<p>FireFighter is not tested on Windows. It should run on Windows 10 and Windows 11, but we don't recommend it for production use.</p> <p>ARM support is not available on Windows.</p>"},{"location":"deploy/XX-tasks/","title":"Celery tasks","text":"<p>This project uses Celery to run asynchronous tasks.</p>"},{"location":"deploy/XX-tasks/#running","title":"Running","text":"<p>You will need to run a Celery worker to run the tasks, and a Celery beat to schedule them.</p> <pre><code>pdm run celery-worker\n</code></pre> <pre><code>pdm run celery-beat\n</code></pre> <p>Note</p> <p>A Django management command is also available to run a specific task:</p> <pre><code>pdm run ff-manage task &lt;task_name&gt;\n</code></pre>"},{"location":"deploy/XX-tasks/#scheduling-tasks","title":"Scheduling tasks","text":"<p>By default, no tasks are scheduled.</p> <p>You can schedule tasks through the Django admin interface.</p>"},{"location":"reference/api/","title":"api","text":""},{"location":"reference/api/#firefighter.api","title":"api","text":"<p>The <code>api</code> app exposes the API endpoints for the application.</p> <p>It uses the <code>rest_framework</code> package to provide the API endpoints.</p> <p>Modules:</p> <ul> <li> <code>admin</code>           \u2013            </li> <li> <code>authentication</code>           \u2013            </li> <li> <code>models</code>           \u2013            </li> <li> <code>permissions</code>           \u2013            </li> <li> <code>renderer</code>           \u2013            </li> <li> <code>serializers</code>           \u2013            </li> <li> <code>views</code>           \u2013            </li> </ul>"},{"location":"reference/api/#firefighter.api.admin","title":"admin","text":"<p>Classes:</p> <ul> <li> <code>APITokenAdmin</code>           \u2013            <p>Custom Admin for DRF Token.</p> </li> </ul>"},{"location":"reference/api/#firefighter.api.admin.APITokenAdmin","title":"APITokenAdmin","text":"<p>               Bases: <code>TokenAdmin</code></p> <p>Custom Admin for DRF Token. Add supports for custom permissions.</p> <p>Methods:</p> <ul> <li> <code>formfield_for_foreignkey</code>             \u2013              <p>Show all or only current user depending on permissions.</p> </li> <li> <code>get_form</code>             \u2013              <p>Prefill the form with the current user.</p> </li> <li> <code>get_queryset</code>             \u2013              <p>Show all or only own tokens depending on permissions.</p> </li> <li> <code>get_sortable_by</code>             \u2013              <p>Hack to send a message depending on the status of the user.</p> </li> </ul>"},{"location":"reference/api/#firefighter.api.admin.APITokenAdmin.formfield_for_foreignkey","title":"formfield_for_foreignkey","text":"<pre><code>formfield_for_foreignkey(db_field: ForeignKey[Any, Any], request: HttpRequest, **kwargs: Any) -&gt; ModelChoiceField\n</code></pre> <p>Show all or only current user depending on permissions.</p> Source code in <code>src/firefighter/api/admin.py</code> <pre><code>def formfield_for_foreignkey(\n    self,\n    db_field: ForeignKey[Any, Any],\n    request: HttpRequest,  # type: ignore[override]\n    **kwargs: Any,\n) -&gt; ModelChoiceField:  # type: ignore[type-arg]\n    \"\"\"Show all or only current user depending on permissions.\"\"\"\n    if db_field.name == \"user\":\n        if request.user.has_perm(\"api.can_add_any\") or request.user.has_perm(\n            \"api.can_edit_any\"\n        ):\n            kwargs[\"queryset\"] = User.objects.all()\n        elif request.user.has_perm(\"api.can_add_own\"):\n            kwargs[\"queryset\"] = User.objects.filter(id=request.user.id)\n    return super().formfield_for_foreignkey(db_field, request, **kwargs)  # type: ignore[return-value]\n</code></pre>"},{"location":"reference/api/#firefighter.api.admin.APITokenAdmin.get_form","title":"get_form","text":"<pre><code>get_form(request: HttpRequest, obj: APITokenProxy | None = None, change: bool = False, **kwargs: Any) -&gt; type[ModelForm[APITokenProxy]]\n</code></pre> <p>Prefill the form with the current user.</p> Source code in <code>src/firefighter/api/admin.py</code> <pre><code>def get_form(\n    self,\n    request: HttpRequest,  # type: ignore[override]\n    obj: APITokenProxy | None = None,\n    change: bool = False,  # noqa: FBT001, FBT002\n    **kwargs: Any,\n) -&gt; type[ModelForm[APITokenProxy]]:\n    \"\"\"Prefill the form with the current user.\"\"\"\n    form: type[ModelForm[APITokenProxy]] = super().get_form(\n        request, obj, change, **kwargs\n    )\n    form.base_fields[\"user\"].initial = request.user\n    return form\n</code></pre>"},{"location":"reference/api/#firefighter.api.admin.APITokenAdmin.get_queryset","title":"get_queryset","text":"<pre><code>get_queryset(request: HttpRequest) -&gt; QuerySet[APITokenProxy]\n</code></pre> <p>Show all or only own tokens depending on permissions.</p> Source code in <code>src/firefighter/api/admin.py</code> <pre><code>def get_queryset(self, request: HttpRequest) -&gt; QuerySet[APITokenProxy]:  # type: ignore[override]\n    \"\"\"Show all or only own tokens depending on permissions.\"\"\"\n    qs = super().get_queryset(request)\n    if request.user.has_perm(\"api.can_view_any\"):\n        return qs\n    return qs.filter(user=request.user)\n</code></pre>"},{"location":"reference/api/#firefighter.api.admin.APITokenAdmin.get_sortable_by","title":"get_sortable_by","text":"<pre><code>get_sortable_by(request: HttpRequest)\n</code></pre> <p>Hack to send a message depending on the status of the user.</p> Source code in <code>src/firefighter/api/admin.py</code> <pre><code>def get_sortable_by(self, request: HttpRequest):  # type: ignore[no-untyped-def,override]\n    \"\"\"Hack to send a message depending on the status of the user.\"\"\"\n    if request.user.has_perm(\"api.can_view_any\"):\n        self.message_user(request, \"You are seeing all tokens.\", messages.WARNING)\n    elif request.user.has_perm(\"api.can_view_own\"):\n        self.message_user(\n            request, \"You are only seeing your tokens.\", messages.WARNING\n        )\n    return super().get_sortable_by(request)\n</code></pre>"},{"location":"reference/api/#firefighter.api.authentication","title":"authentication","text":"<p>Classes:</p> <ul> <li> <code>BearerTokenAuthentication</code>           \u2013            <p>To use <code>Authorization: Bearer &lt;token&gt;</code> instead of <code>Authorization: Token &lt;token&gt;</code>.</p> </li> </ul>"},{"location":"reference/api/#firefighter.api.authentication.BearerTokenAuthentication","title":"BearerTokenAuthentication","text":"<p>               Bases: <code>TokenAuthentication</code></p> <p>To use <code>Authorization: Bearer &lt;token&gt;</code> instead of <code>Authorization: Token &lt;token&gt;</code>.</p>"},{"location":"reference/api/#firefighter.api.models","title":"models","text":"<p>Classes:</p> <ul> <li> <code>APITokenProxy</code>           \u2013            <p>Proxy mapping pk to user pk for use in admin.</p> </li> </ul>"},{"location":"reference/api/#firefighter.api.models.APITokenProxy","title":"APITokenProxy","text":"<p>               Bases: <code>APIToken</code></p> <p>Proxy mapping pk to user pk for use in admin.</p> <p>Overrides default permissions.</p>"},{"location":"reference/api/#firefighter.api.permissions","title":"permissions","text":"<p>Classes:</p> <ul> <li> <code>StrictDjangoModelPermissions</code>           \u2013            <p>Custom class to restrict GET requests.</p> </li> </ul>"},{"location":"reference/api/#firefighter.api.permissions.StrictDjangoModelPermissions","title":"StrictDjangoModelPermissions","text":"<p>               Bases: <code>DjangoModelPermissions</code></p> <p>Custom class to restrict GET requests.</p>"},{"location":"reference/api/#firefighter.api.renderer","title":"renderer","text":"<p>Classes:</p> <ul> <li> <code>CSVRenderer</code>           \u2013            <p>Renderer which serializes to CSV</p> </li> <li> <code>TSVRenderer</code>           \u2013            <p>Renderer which serializes to TSV.</p> </li> </ul>"},{"location":"reference/api/#firefighter.api.renderer.CSVRenderer","title":"CSVRenderer","text":"<p>               Bases: <code>CSVRenderer</code></p> <p>Renderer which serializes to CSV Override the default CSV Renderer to allow hiding header fields. Hide head by setting labels to \"hidden\".</p> <p>Methods:</p> <ul> <li> <code>tablize</code>             \u2013              <p>Convert a list of data into a table.</p> </li> </ul>"},{"location":"reference/api/#firefighter.api.renderer.CSVRenderer.tablize","title":"tablize","text":"<pre><code>tablize(data: Any, header: Any | None = None, labels: Any | None = None) -&gt; Generator[list[Any], None, None]\n</code></pre> <p>Convert a list of data into a table.</p> <p>If there is a header provided to tablize it will efficiently yield each row as needed. If no header is provided, tablize will need to process each row in the data in order to construct a complete header. Thus, if you have a lot of data and want to stream it, you should probably provide a header to the renderer (using the <code>header</code> attribute, or via the <code>renderer_context</code>).</p> Source code in <code>src/firefighter/api/renderer.py</code> <pre><code>def tablize(\n    self, data: Any, header: Any | None = None, labels: Any | None = None\n) -&gt; Generator[list[Any], None, None]:\n    \"\"\"Convert a list of data into a table.\n\n    If there is a header provided to tablize it will efficiently yield each\n    row as needed. If no header is provided, tablize will need to process\n    each row in the data in order to construct a complete header. Thus, if\n    you have a lot of data and want to stream it, you should probably\n    provide a header to the renderer (using the `header` attribute, or via\n    the `renderer_context`).\n    \"\"\"\n    # Try to pull the header off of the data, if it's not passed in as an\n    # argument.\n    if not header and hasattr(data, \"header\"):\n        header = data.header\n\n    if data:\n        # First, flatten the data (i.e., convert it to a list of\n        # dictionaries that are each exactly one level deep).  The key for\n        # each item designates the name of the column that the item will\n        # fall into.\n        data = self.flatten_data(data)\n\n        # Get the set of all unique headers, and sort them (unless already provided).\n        data, header = self._get_headers(data, header)\n\n        # Return your \"table\", with the headers as the first row.\n        if labels != \"__hidden__\":\n            if labels:\n                yield [labels.get(x, x) for x in header]\n            else:\n                yield header\n\n        # Create a row for each dictionary, filling in columns for which the\n        # item has no data with None values.\n        for item in data:\n            row = [item.get(key, None) for key in header]\n            yield row\n\n    elif header:\n        # If there's no data but a header was supplied, yield the header.\n        if labels:\n            yield [labels.get(x, x) for x in header]\n        else:\n            yield header\n\n    else:\n        # Generator will yield nothing if there's no data and no header\n        pass\n</code></pre>"},{"location":"reference/api/#firefighter.api.renderer.TSVRenderer","title":"TSVRenderer","text":"<p>               Bases: <code>CSVRenderer</code></p> <p>Renderer which serializes to TSV.</p> <p>Methods:</p> <ul> <li> <code>tablize</code>             \u2013              <p>Convert a list of data into a table.</p> </li> </ul>"},{"location":"reference/api/#firefighter.api.renderer.TSVRenderer.tablize","title":"tablize","text":"<pre><code>tablize(data: Any, header: Any | None = None, labels: Any | None = None) -&gt; Generator[list[Any], None, None]\n</code></pre> <p>Convert a list of data into a table.</p> <p>If there is a header provided to tablize it will efficiently yield each row as needed. If no header is provided, tablize will need to process each row in the data in order to construct a complete header. Thus, if you have a lot of data and want to stream it, you should probably provide a header to the renderer (using the <code>header</code> attribute, or via the <code>renderer_context</code>).</p> Source code in <code>src/firefighter/api/renderer.py</code> <pre><code>def tablize(\n    self, data: Any, header: Any | None = None, labels: Any | None = None\n) -&gt; Generator[list[Any], None, None]:\n    \"\"\"Convert a list of data into a table.\n\n    If there is a header provided to tablize it will efficiently yield each\n    row as needed. If no header is provided, tablize will need to process\n    each row in the data in order to construct a complete header. Thus, if\n    you have a lot of data and want to stream it, you should probably\n    provide a header to the renderer (using the `header` attribute, or via\n    the `renderer_context`).\n    \"\"\"\n    # Try to pull the header off of the data, if it's not passed in as an\n    # argument.\n    if not header and hasattr(data, \"header\"):\n        header = data.header\n\n    if data:\n        # First, flatten the data (i.e., convert it to a list of\n        # dictionaries that are each exactly one level deep).  The key for\n        # each item designates the name of the column that the item will\n        # fall into.\n        data = self.flatten_data(data)\n\n        # Get the set of all unique headers, and sort them (unless already provided).\n        data, header = self._get_headers(data, header)\n\n        # Return your \"table\", with the headers as the first row.\n        if labels != \"__hidden__\":\n            if labels:\n                yield [labels.get(x, x) for x in header]\n            else:\n                yield header\n\n        # Create a row for each dictionary, filling in columns for which the\n        # item has no data with None values.\n        for item in data:\n            row = [item.get(key, None) for key in header]\n            yield row\n\n    elif header:\n        # If there's no data but a header was supplied, yield the header.\n        if labels:\n            yield [labels.get(x, x) for x in header]\n        else:\n            yield header\n\n    else:\n        # Generator will yield nothing if there's no data and no header\n        pass\n</code></pre>"},{"location":"reference/api/#firefighter.api.serializers","title":"serializers","text":"<p>Classes:</p> <ul> <li> <code>CreatableSlugRelatedField</code>           \u2013            <p>Like SlugRelatedField, but allows to create an object that is not present in DB.</p> </li> <li> <code>GroupedModelSerializer</code>           \u2013            <p>Generic implementation for a model with a One2Many, where instead of a list we want the items grouped by a field, like costs or metrics.</p> </li> <li> <code>IncidentSerializer</code>           \u2013            </li> </ul>"},{"location":"reference/api/#firefighter.api.serializers.CreatableSlugRelatedField","title":"CreatableSlugRelatedField","text":"<p>               Bases: <code>SlugRelatedField[T]</code>, <code>Generic[T]</code></p> <p>Like SlugRelatedField, but allows to create an object that is not present in DB.</p> <p>Methods:</p> <ul> <li> <code>run_validation</code>             \u2013              <p>Override the default validation to perform the validation before trying to create the object.</p> </li> </ul>"},{"location":"reference/api/#firefighter.api.serializers.CreatableSlugRelatedField.run_validation","title":"run_validation","text":"<pre><code>run_validation(data: Any = empty) -&gt; T | Any | None\n</code></pre> <p>Override the default validation to perform the validation before trying to create the object.</p> Source code in <code>src/firefighter/api/serializers.py</code> <pre><code>def run_validation(self, data: Any = empty) -&gt; T | Any | None:\n    \"\"\"Override the default validation to perform the validation before trying to create the object.\"\"\"\n    (is_empty_value, data) = self.validate_empty_values(data)\n    if is_empty_value:\n        return data\n    self.run_validators(data)\n    return self.to_internal_value(data)\n</code></pre>"},{"location":"reference/api/#firefighter.api.serializers.GroupedModelSerializer","title":"GroupedModelSerializer","text":"<pre><code>GroupedModelSerializer(child_serializer: type[ModelSerializer[T]], key_getter: Callable[[T], str] = lambda x: str(pk), **kwargs: Any)\n</code></pre> <p>               Bases: <code>RelatedField[T, Any, Any]</code>, <code>Generic[T]</code></p> <p>Generic implementation for a model with a One2Many, where instead of a list we want the items grouped by a field, like costs or metrics.</p> Source code in <code>src/firefighter/api/serializers.py</code> <pre><code>def __init__(\n    self,\n    child_serializer: type[serializers.ModelSerializer[T]],\n    key_getter: Callable[[T], str] = lambda x: str(x.pk),\n    **kwargs: Any,\n):\n    self.child_serializer = child_serializer\n    self.key_getter = key_getter\n    if not kwargs.get(\"read_only\", True):\n        raise ValueError(\"GroupedModelSerializer can only be read_only\")\n    if \"read_only\" not in kwargs:\n        kwargs[\"read_only\"] = True\n    kwargs[\"many\"] = True\n    super().__init__(**kwargs)\n</code></pre>"},{"location":"reference/api/#firefighter.api.serializers.IncidentSerializer","title":"IncidentSerializer","text":"<pre><code>IncidentSerializer(*args: Any, **kwargs: Any)\n</code></pre> <p>               Bases: <code>TaggitSerializer</code>, <code>ModelSerializer[Incident]</code></p> <p>Methods:</p> <ul> <li> <code>get_postmortem_url</code>             \u2013              <p>Return the Confluence post-mortem page URL if it exists.</p> </li> </ul> Source code in <code>src/firefighter/api/serializers.py</code> <pre><code>def __init__(self, *args: Any, **kwargs: Any) -&gt; None:\n    remove_fields = get_in(kwargs, \"context.remove_fields\", [])\n    super().__init__(*args, **kwargs)\n\n    if remove_fields:\n        # for multiple fields in a list\n        for field_name in remove_fields:\n            self.fields.pop(field_name)\n</code></pre>"},{"location":"reference/api/#firefighter.api.serializers.IncidentSerializer.get_postmortem_url","title":"get_postmortem_url  <code>staticmethod</code>","text":"<pre><code>get_postmortem_url(obj: Incident) -&gt; str | None\n</code></pre> <p>Return the Confluence post-mortem page URL if it exists.</p> Source code in <code>src/firefighter/api/serializers.py</code> <pre><code>@staticmethod\ndef get_postmortem_url(obj: Incident) -&gt; str | None:\n    \"\"\"Return the Confluence post-mortem page URL if it exists.\"\"\"\n    if hasattr(obj, \"postmortem_for\"):\n        return obj.postmortem_for.page_url\n    return None\n</code></pre>"},{"location":"reference/api/#firefighter.api.views","title":"views","text":"<p>Modules:</p> <ul> <li> <code>incidents</code>           \u2013            </li> </ul>"},{"location":"reference/api/#firefighter.api.views.incidents","title":"incidents","text":"<p>Classes:</p> <ul> <li> <code>CreateIncidentViewSet</code>           \u2013            </li> <li> <code>IncidentViewSet</code>           \u2013            </li> <li> <code>ProcessAfterResponse</code>           \u2013            <p>Custom DRF Response, to trigger the Slack workflow after creating the incident and returning HTTP 201.</p> </li> </ul>"},{"location":"reference/api/#firefighter.api.views.incidents.CreateIncidentViewSet","title":"CreateIncidentViewSet","text":"<p>               Bases: <code>CreateModelMixin</code>, <code>GenericViewSet[Incident]</code></p> <p>Methods:</p> <ul> <li> <code>create</code>             \u2013              <p>Allow to create an incident.</p> </li> </ul>"},{"location":"reference/api/#firefighter.api.views.incidents.CreateIncidentViewSet.create","title":"create","text":"<pre><code>create(request: Request, *args: Never, **kwargs: Never) -&gt; Response\n</code></pre> <p>Allow to create an incident. Requires a valid Bearer token, that you can create in the back-office if you have the right permissions.</p> Source code in <code>src/firefighter/api/views/incidents.py</code> <pre><code>def create(self, request: Request, *args: Never, **kwargs: Never) -&gt; Response:\n    \"\"\"Allow to create an incident.\n    Requires a valid Bearer token, that you can create in the back-office if you have the right permissions.\n    \"\"\"\n    serializer: BaseSerializer[Incident] = self.get_serializer(data=request.data)\n    serializer.is_valid(raise_exception=True)\n    self.perform_create(serializer)\n    headers = self.get_success_headers(serializer.data)\n    return ProcessAfterResponse(\n        serializer.data, status=status.HTTP_201_CREATED, headers=headers\n    )\n</code></pre>"},{"location":"reference/api/#firefighter.api.views.incidents.IncidentViewSet","title":"IncidentViewSet","text":"<p>               Bases: <code>RetrieveModelMixin</code>, <code>ListModelMixin</code>, <code>AdvancedGenericViewSet[Incident]</code></p> <p>Methods:</p> <ul> <li> <code>list</code>             \u2013              <p>List all incidents. Allows to show or hide tags which is DB intensive, with the show_tags parameters.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>labels</code>               (<code>dict[str, str]</code>)           \u2013            <p>Dict mapping attributes/properties to a more friendly string to be shown in the header row for CSV/TSV renders.</p> </li> </ul>"},{"location":"reference/api/#firefighter.api.views.incidents.IncidentViewSet.labels","title":"labels  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>labels: dict[str, str] = {}\n</code></pre> <p>Dict mapping attributes/properties to a more friendly string to be shown in the header row for CSV/TSV renders.</p> <p>E.g. <code>labels = {\"slack_channel_name\": \"Slack Channel\"}</code></p>"},{"location":"reference/api/#firefighter.api.views.incidents.IncidentViewSet.list","title":"list","text":"<pre><code>list(request: Request, *args: Never, **kwargs: Never) -&gt; Response\n</code></pre> <p>List all incidents. Allows to show or hide tags which is DB intensive, with the show_tags parameters.</p> <p><code>status</code> and <code>_status__*</code> uses an enum: <pre><code>10, \"Open\"\n20, \"Investigating\"\n30, \"Mitigating\"\n40, \"Mitigated\"\n50, \"Post-mortem\"\n60, \"Closed\"\n</code></pre></p> Source code in <code>src/firefighter/api/views/incidents.py</code> <pre><code>def list(self, request: Request, *args: Never, **kwargs: Never) -&gt; Response:\n    \"\"\"List all incidents. Allows to show or hide tags which is DB intensive, with the show_tags parameters.\n\n    `status` and `_status__*` uses an enum:\n    ```\n    10, \"Open\"\n    20, \"Investigating\"\n    30, \"Mitigating\"\n    40, \"Mitigated\"\n    50, \"Post-mortem\"\n    60, \"Closed\"\n    ```\n    \"\"\"\n    queryset = self.filter_queryset(self.get_queryset())\n    serializer: BaseSerializer[Incident]\n    if request.query_params.get(\"show_tags\") == \"true\":\n        serializer = IncidentSerializer(\n            queryset, many=True, context={\"remove_fields\": []}\n        )\n    else:\n        serializer = self.get_serializer(\n            queryset, many=True, context={\"remove_fields\": [\"tags\"]}\n        )\n    return Response(serializer.data)\n</code></pre>"},{"location":"reference/api/#firefighter.api.views.incidents.ProcessAfterResponse","title":"ProcessAfterResponse","text":"<p>               Bases: <code>Response</code></p> <p>Custom DRF Response, to trigger the Slack workflow after creating the incident and returning HTTP 201.</p>"},{"location":"reference/confluence/","title":"confluence","text":""},{"location":"reference/confluence/#firefighter.confluence","title":"confluence","text":"<p>Modules:</p> <ul> <li> <code>client</code>           \u2013            </li> <li> <code>models</code>           \u2013            </li> <li> <code>service</code>           \u2013            </li> <li> <code>tasks</code>           \u2013            </li> <li> <code>utils</code>           \u2013            </li> <li> <code>views</code>           \u2013            </li> </ul>"},{"location":"reference/confluence/#firefighter.confluence.client","title":"client","text":"<p>Classes:</p> <ul> <li> <code>ConfluenceClient</code>           \u2013            <p>Helper methods for Confluence API.</p> </li> </ul>"},{"location":"reference/confluence/#firefighter.confluence.client.ConfluenceClient","title":"ConfluenceClient","text":"<pre><code>ConfluenceClient(base_url: str, username: str, api_key: str)\n</code></pre> <p>               Bases: <code>HttpClient</code></p> <p>Helper methods for Confluence API.</p> <p>Should not be used directly, be used by firefighter.confluence.service.ConfluenceService.</p> <p>Attributes:</p> <ul> <li> <code>base_url</code>           \u2013            <p>Confluence base URL. (with <code>/wiki</code>, without <code>/rest/api</code>)</p> </li> <li> <code>base_url_api</code>               (<code>str</code>)           \u2013            <p>Confluence API base URL. (with <code>/wiki/rest/api</code>)</p> </li> </ul> Source code in <code>src/firefighter/confluence/client.py</code> <pre><code>def __init__(self, base_url: str, username: str, api_key: str):\n    super().__init__(client_kwargs={\"auth\": (username, api_key)})\n    self.base_url_api = base_url\n    \"\"\"Confluence API base URL. (with `/wiki/rest/api`)\"\"\"\n    self.base_url = self.base_url_api.removesuffix(\"/rest/api\")\n    \"\"\"Confluence base URL. (with `/wiki`, without `/rest/api`)\"\"\"\n</code></pre>"},{"location":"reference/confluence/#firefighter.confluence.client.ConfluenceClient.base_url","title":"base_url  <code>instance-attribute</code>","text":"<pre><code>base_url = removesuffix('/rest/api')\n</code></pre> <p>Confluence base URL. (with <code>/wiki</code>, without <code>/rest/api</code>)</p>"},{"location":"reference/confluence/#firefighter.confluence.client.ConfluenceClient.base_url_api","title":"base_url_api  <code>instance-attribute</code>","text":"<pre><code>base_url_api: str = base_url\n</code></pre> <p>Confluence API base URL. (with <code>/wiki/rest/api</code>)</p>"},{"location":"reference/confluence/#firefighter.confluence.models","title":"models","text":"<p>Classes:</p> <ul> <li> <code>ConfluencePage</code>           \u2013            <p>Represents a Confluence page.</p> </li> <li> <code>PostMortem</code>           \u2013            <p>Represents a Confluence PostMortem page.</p> </li> <li> <code>RunbookFilterSet</code>           \u2013            <p>Set of filters for Runbooks.</p> </li> <li> <code>RunbookManager</code>           \u2013            </li> </ul>"},{"location":"reference/confluence/#firefighter.confluence.models.ConfluencePage","title":"ConfluencePage","text":"<p>               Bases: <code>Model</code></p> <p>Represents a Confluence page.</p>"},{"location":"reference/confluence/#firefighter.confluence.models.PostMortem","title":"PostMortem","text":"<p>               Bases: <code>ConfluencePage</code></p> <p>Represents a Confluence PostMortem page.</p>"},{"location":"reference/confluence/#firefighter.confluence.models.RunbookFilterSet","title":"RunbookFilterSet","text":"<p>               Bases: <code>FilterSet</code></p> <p>Set of filters for Runbooks.</p>"},{"location":"reference/confluence/#firefighter.confluence.models.RunbookManager","title":"RunbookManager","text":"<p>               Bases: <code>Manager['Runbook']</code></p> <p>Methods:</p> <ul> <li> <code>search</code>             \u2013              <p>Args:</p> </li> </ul>"},{"location":"reference/confluence/#firefighter.confluence.models.RunbookManager.search","title":"search  <code>staticmethod</code>","text":"<pre><code>search(queryset: QuerySet[Runbook] | None, search_term: str) -&gt; tuple[QuerySet[Runbook], bool]\n</code></pre> <p>Parameters:</p> <ul> <li> <code>queryset</code>               (<code>QuerySet[Runbook] | None</code>)           \u2013            <p>Queryset to search in. If None, search in all incidents. The Queryset allows to search on a subset of Runbooks (already filtered).</p> </li> <li> <code>search_term</code>               (<code>str</code>)           \u2013            <p>Search term.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple[QuerySet[Runbook], bool]</code>           \u2013            <p>tuple[QuerySet[Runbook], bool]: Queryset of Runbooks matching the search term, and a boolean indicating if the search may contain duplicates objects.</p> </li> </ul> Source code in <code>src/firefighter/confluence/models.py</code> <pre><code>@staticmethod\ndef search(\n    queryset: QuerySet[Runbook] | None, search_term: str\n) -&gt; tuple[QuerySet[Runbook], bool]:\n    \"\"\"Args:\n        queryset (QuerySet[Runbook] | None): Queryset to search in. If None, search in all incidents. The Queryset allows to search on a subset of Runbooks (already filtered).\n        search_term (str): Search term.\n\n    Returns:\n        tuple[QuerySet[Runbook], bool]: Queryset of Runbooks matching the search term, and a boolean indicating if the search may contain duplicates objects.\n    \"\"\"\n    if queryset is None:\n        queryset = Runbook.objects.all()\n\n    # If not search, return the original queryset\n    if search_term is None or search_term.strip() == \"\":\n        return queryset, False\n\n    # XXX Improve search performance and relevance\n    vector = (\n        SearchVector(\"name\", config=\"english\", weight=\"A\")\n        + SearchVector(\"service_name\", config=\"english\", weight=\"B\")\n        + SearchVector(\"body_storage\", config=\"english\", weight=\"C\")\n    )\n    query = SearchQuery(search_term, config=\"english\", search_type=\"websearch\")\n    queryset = (\n        queryset.annotate(rank=SearchRank(vector, query))\n        .filter(rank__gte=0.05)\n        .order_by(\"-rank\")\n    )\n\n    return queryset, False\n</code></pre>"},{"location":"reference/confluence/#firefighter.confluence.service","title":"service","text":"<p>Classes:</p> <ul> <li> <code>ConfluenceService</code>           \u2013            <p>Provide methods to interact with Confluence, without regards to the underlying library or HTTP client used.</p> </li> </ul>"},{"location":"reference/confluence/#firefighter.confluence.service.ConfluenceService","title":"ConfluenceService","text":"<pre><code>ConfluenceService()\n</code></pre> <p>Provide methods to interact with Confluence, without regards to the underlying library or HTTP client used.</p> <p>TODO: The service should provide Pythonic errors and return types, and should not leak the underlying library or Confluence errors. It is not a priority for now, as the Confluence API is not used in critical paths.</p> <p>Methods:</p> <ul> <li> <code>create_page</code>             \u2013              <p>TODO: Errors.</p> </li> <li> <code>create_postmortem</code>             \u2013              <p>Create a PostMortem page.</p> </li> <li> <code>get_page</code>             \u2013              <p>TODO: Errors.</p> </li> <li> <code>get_page_children_pages</code>             \u2013              <p>Get all children pages of a given page.</p> </li> <li> <code>get_page_descendant_pages</code>             \u2013              <p>Get all descendant (nested children) pages of a given page.</p> </li> <li> <code>move_page</code>             \u2013              <p>Args:</p> </li> <li> <code>parse_confluence_page</code>             \u2013              <p>Helper to parse a Confluence page into a PageInfo object.</p> </li> <li> <code>sort_pages</code>             \u2013              <p>Sort pages according to the list order.</p> </li> <li> <code>update_oncall_page</code>             \u2013              <p>Update the Confluence list of On-Call users, if the page needs to be updated.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>base_url</code>               (<code>str</code>)           \u2013            <p>Confluence base URL. (with <code>/wiki</code>, without <code>/rest/api</code>)</p> </li> </ul> Source code in <code>src/firefighter/confluence/service.py</code> <pre><code>def __init__(self) -&gt; None:\n    self._client = None\n</code></pre>"},{"location":"reference/confluence/#firefighter.confluence.service.ConfluenceService.base_url","title":"base_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>base_url: str = removesuffix('/rest/api')\n</code></pre> <p>Confluence base URL. (with <code>/wiki</code>, without <code>/rest/api</code>)</p>"},{"location":"reference/confluence/#firefighter.confluence.service.ConfluenceService.create_page","title":"create_page","text":"<pre><code>create_page(title: str, parent_id: ConfluencePageId, body: str, space: str | None = None) -&gt; ConfluencePage\n</code></pre> <p>TODO: Errors.</p> <p>Parameters:</p> <ul> <li> <code>title</code>               (<code>str</code>)           \u2013            <p>Title of the page to create.</p> </li> <li> <code>parent_id</code>               (<code>ConfluencePageId</code>)           \u2013            <p>Where to create the page. Will be a child of this page.</p> </li> <li> <code>body</code>               (<code>str</code>)           \u2013            <p>Body of the page.</p> </li> <li> <code>space</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Space to create the page in. If None, defaults to theService's default space. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ConfluencePage</code> (              <code>ConfluencePage</code> )          \u2013            <p>The newly created page.</p> </li> </ul> Source code in <code>src/firefighter/confluence/service.py</code> <pre><code>def create_page(\n    self,\n    title: str,\n    parent_id: ConfluencePageId,\n    body: str,\n    space: str | None = None,\n) -&gt; ConfluencePage:\n    \"\"\"TODO: Errors.\n\n    Args:\n        title (str): Title of the page to create.\n        parent_id (ConfluencePageId): Where to create the page. Will be a child of this page.\n        body (str): Body of the page.\n        space (str | None, optional): Space to create the page in. If None, defaults to theService's default space. Defaults to None.\n\n    Returns:\n        ConfluencePage: The newly created page.\n    \"\"\"\n    if not space:\n        space = self.DEFAULT_SPACE\n    return self.client.create_page(title, parent_id, space, body).json()\n</code></pre>"},{"location":"reference/confluence/#firefighter.confluence.service.ConfluenceService.create_postmortem","title":"create_postmortem","text":"<pre><code>create_postmortem(title: str) -&gt; ConfluencePage | None\n</code></pre> <p>Create a PostMortem page.</p> <p>Parameters:</p> <ul> <li> <code>title</code>               (<code>str</code>)           \u2013            <p>Title of the PostMortem page.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ConfluencePage | None</code>           \u2013            <p>None | ConfluencePage: The newly created page, or None if it failed.</p> </li> </ul> Source code in <code>src/firefighter/confluence/service.py</code> <pre><code>def create_postmortem(self, title: str) -&gt; ConfluencePage | None:\n    \"\"\"Create a PostMortem page.\n\n    Args:\n        title (str): Title of the PostMortem page.\n\n    Returns:\n        None | ConfluencePage: The newly created page, or None if it failed.\n    \"\"\"\n    # Get the body from the template page\n    postmortem_template = (\n        self.client.get_page(self.POSTMORTEM_TEMPLATE_PAGE_ID)\n    ).json()\n    body = get_in(postmortem_template, \"body.storage.value\")\n    logger.debug(body)\n\n    # Create the postmortem with the template body\n    page_created: ConfluencePage = self.create_page(\n        title, self.POSTMORTEM_FOLDER_ID, body\n    )\n\n    logger.debug(\"Postmortem page id: %s \", page_created.get(\"id\"))\n    if \"statusCode\" in page_created:\n        logger.error(\n            f\"Can't create postmortem page with title {title}: {page_created}\"\n        )\n        return None\n    logger.debug(page_created)\n    return page_created\n</code></pre>"},{"location":"reference/confluence/#firefighter.confluence.service.ConfluenceService.get_page","title":"get_page","text":"<pre><code>get_page(page_id: ConfluencePageId) -&gt; ConfluencePage\n</code></pre> <p>TODO: Errors.</p> <p>Parameters:</p> <ul> <li> <code>page_id</code>               (<code>ConfluencePageId</code>)           \u2013            <p>ID of the page to get.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ConfluencePage</code> (              <code>ConfluencePage</code> )          \u2013            <p>The page.</p> </li> </ul> Source code in <code>src/firefighter/confluence/service.py</code> <pre><code>def get_page(self, page_id: ConfluencePageId) -&gt; ConfluencePage:\n    \"\"\"TODO: Errors.\n\n    Args:\n        page_id (ConfluencePageId): ID of the page to get.\n\n    Returns:\n        ConfluencePage: The page.\n    \"\"\"\n    return self.client.get_page(page_id).json()\n</code></pre>"},{"location":"reference/confluence/#firefighter.confluence.service.ConfluenceService.get_page_children_pages","title":"get_page_children_pages","text":"<pre><code>get_page_children_pages(page_id: ConfluencePageId, *args: Any, **kwargs: Any) -&gt; list[ConfluencePage]\n</code></pre> <p>Get all children pages of a given page. TODO: testing.</p> <p>Parameters:</p> <ul> <li> <code>page_id</code>               (<code>ConfluencePageId</code>)           \u2013            <p>ID of the page to get children pages from.</p> </li> <li> <code>*args</code>               (<code>Any</code>, default:                   <code>()</code> )           \u2013            <p>Arguments to pass to Confluence.</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Keyword arguments to pass to Confluence.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[ConfluencePage]</code>           \u2013            <p>list[ConfluencePage]: list of children pages.</p> </li> </ul> Source code in <code>src/firefighter/confluence/service.py</code> <pre><code>def get_page_children_pages(\n    self, page_id: ConfluencePageId, *args: Any, **kwargs: Any\n) -&gt; list[ConfluencePage]:\n    \"\"\"Get all children pages of a given page.\n    TODO: testing.\n\n    Args:\n        page_id (ConfluencePageId): ID of the page to get children pages from.\n        *args: Arguments to pass to Confluence.\n        **kwargs: Keyword arguments to pass to Confluence.\n\n    Returns:\n        list[ConfluencePage]: list of children pages.\n    \"\"\"\n    return list(self.client.get_page_children_pages(page_id, *args, **kwargs))\n</code></pre>"},{"location":"reference/confluence/#firefighter.confluence.service.ConfluenceService.get_page_descendant_pages","title":"get_page_descendant_pages","text":"<pre><code>get_page_descendant_pages(page_id: ConfluencePageId, *args: Any, **kwargs: Any) -&gt; list[ConfluencePage]\n</code></pre> <p>Get all descendant (nested children) pages of a given page. TODO: Pagination support and testing.</p> <p>Parameters:</p> <ul> <li> <code>page_id</code>               (<code>ConfluencePageId</code>)           \u2013            <p>ID of the page to get children pages from.</p> </li> <li> <code>*args</code>               (<code>Any</code>, default:                   <code>()</code> )           \u2013            <p>Arguments to pass to Confluence.</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Keyword arguments to pass to Confluence.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[ConfluencePage]</code>           \u2013            <p>list[ConfluencePage]: list of children pages.</p> </li> </ul> Source code in <code>src/firefighter/confluence/service.py</code> <pre><code>def get_page_descendant_pages(\n    self, page_id: ConfluencePageId, *args: Any, **kwargs: Any\n) -&gt; list[ConfluencePage]:\n    \"\"\"Get all descendant (nested children) pages of a given page.\n    TODO: Pagination support and testing.\n\n    Args:\n        page_id (ConfluencePageId): ID of the page to get children pages from.\n        *args: Arguments to pass to Confluence.\n        **kwargs: Keyword arguments to pass to Confluence.\n\n    Returns:\n        list[ConfluencePage]: list of children pages.\n    \"\"\"\n    return self.client.get_page_descendant_pages(page_id, *args, **kwargs).json()[\n        \"results\"\n    ]\n</code></pre>"},{"location":"reference/confluence/#firefighter.confluence.service.ConfluenceService.move_page","title":"move_page","text":"<pre><code>move_page(\n    page_id: ConfluencePageId,\n    target_page_id: ConfluencePageId,\n    position: Literal[\"before\", \"after\", \"append\"] = \"append\",\n    *,\n    dry_run: bool = False\n) -&gt; ConfluencePage | None\n</code></pre> <p>Parameters:</p> <ul> <li> <code>page_id</code>               (<code>ConfluencePageId</code>)           \u2013            <p>ID of the page to move.</p> </li> <li> <code>target_page_id</code>               (<code>ConfluencePageId</code>)           \u2013            <p>ID of the parent page to move the page in relation to.</p> </li> <li> <code>position</code>               (<code>Literal['before', 'after', 'append']</code>, default:                   <code>'append'</code> )           \u2013            <p>Where should the page be moved, in relation to the target page. Defaults to \"append\".</p> </li> <li> <code>dry_run</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, will log instead of moving. Defaults to False.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ConfluencePage | None</code>           \u2013            <p>None | ConfluencePage: The moved page, or None if it failed.</p> </li> </ul> Source code in <code>src/firefighter/confluence/service.py</code> <pre><code>def move_page(\n    self,\n    page_id: ConfluencePageId,\n    target_page_id: ConfluencePageId,\n    position: Literal[\"before\", \"after\", \"append\"] = \"append\",\n    *,\n    dry_run: bool = False,\n) -&gt; ConfluencePage | None:\n    \"\"\"Args:\n        page_id (ConfluencePageId): ID of the page to move.\n        target_page_id (ConfluencePageId): ID of the parent page to move the page in relation to.\n        position (Literal[\"before\", \"after\", \"append\"], optional): Where should the page be moved, in relation to the target page. Defaults to \"append\".\n        dry_run (bool, optional): If True, will log instead of moving. Defaults to False.\n\n    Returns:\n        None | ConfluencePage: The moved page, or None if it failed.\n    \"\"\"\n    if dry_run:\n        logger.info(\n            f\"Would have moved {page_id} {'into' if position == 'append' else position} {target_page_id} if not dry run\"\n        )\n        return None\n\n    res = self.client.move_page(page_id, target_page_id, position)\n    logger.info(\n        f\"Moved {page_id} {'into' if position == 'append' else position} {target_page_id}\"\n    )\n    if res.status_code == 200:\n        return res.json()\n    logger.error(f\"Error moving page {page_id} {res.status_code} {res.text}\")\n    return None\n</code></pre>"},{"location":"reference/confluence/#firefighter.confluence.service.ConfluenceService.parse_confluence_page","title":"parse_confluence_page","text":"<pre><code>parse_confluence_page(pm: dict[str, Any] | ConfluencePage) -&gt; PageInfo\n</code></pre> <p>Helper to parse a Confluence page into a PageInfo object.</p> <p>Parameters:</p> <ul> <li> <code>pm</code>               (<code>dict[str, Any] | ConfluencePage</code>)           \u2013            <p>ConfluencePage from the API, or a dict with the same structure.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>PageInfo</code> (              <code>PageInfo</code> )          \u2013            <p>The parsed page details that are present on firefighter.confluence.models.ConfluencePage.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>TypeError</code>             \u2013            <p>If one of page_id, page_title, page_url or page_edit_url are not strings.</p> </li> </ul> Source code in <code>src/firefighter/confluence/service.py</code> <pre><code>def parse_confluence_page(self, pm: dict[str, Any] | ConfluencePage) -&gt; PageInfo:\n    \"\"\"Helper to parse a Confluence page into a PageInfo object.\n\n    Args:\n        pm (dict[str, Any] | ConfluencePage): ConfluencePage from the API, or a dict with the same structure.\n\n    Returns:\n        PageInfo: The parsed page details that are present on [firefighter.confluence.models.ConfluencePage][].\n\n    Raises:\n        TypeError: If one of page_id, page_title, page_url or page_edit_url are not strings.\n    \"\"\"\n    page_url = f'{self.base_url}{get_in(pm, \"_links.webui\")}'\n    page_edit_url = f'{self.base_url}{get_in(pm, \"_links.editui\")}'\n\n    page_id = str(pm.get(\"id\"))\n    page_title = pm.get(\"title\")\n    if not isinstance(page_id, str):\n        raise TypeError(\"page_id is not a string\")\n    if not isinstance(page_title, str):\n        raise TypeError(\"page_title is not a string\")\n    if not isinstance(page_url, str):\n        raise TypeError(\"page_url is not a string\")\n    if not isinstance(page_edit_url, str):\n        raise TypeError(\"page_edit_url is not a string\")\n    return {\n        \"name\": page_title,\n        \"page_id\": page_id,\n        \"page_url\": page_url,\n        \"page_edit_url\": page_edit_url,\n    }\n</code></pre>"},{"location":"reference/confluence/#firefighter.confluence.service.ConfluenceService.sort_pages","title":"sort_pages","text":"<pre><code>sort_pages(page_ids: list[tuple[ConfluencePageId, ConfluencePage]], *, dry_run: bool = False) -&gt; None\n</code></pre> <p>Sort pages according to the list order.</p> <p>Be careful: - this will move pages around, and will not check if the pages are already in the right order. - this will not check that the pages are in the same parent. - this will perform n moves, where n is the number of pages in the list.</p> <p>Parameters:</p> <ul> <li> <code>page_ids</code>               (<code>list[tuple[ConfluencePageId, ConfluencePage]]</code>)           \u2013            <p>Sorted list of (PageId, Page) tuples.</p> </li> <li> <code>dry_run</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, will log instead of sorting. Defaults to False.</p> </li> </ul> Source code in <code>src/firefighter/confluence/service.py</code> <pre><code>def sort_pages(\n    self,\n    page_ids: list[tuple[ConfluencePageId, ConfluencePage]],\n    *,\n    dry_run: bool = False,\n) -&gt; None:\n    \"\"\"Sort pages according to the list order.\n\n    **Be careful**:\n    - this will move pages around, and will not check if the pages are already in the right order.\n    - this will not check that the pages are in the same parent.\n    - this will perform n moves, where n is the number of pages in the list.\n\n    Args:\n        page_ids (list[tuple[ConfluencePageId, ConfluencePage]]): Sorted list of (PageId, Page) tuples.\n        dry_run (bool, optional): If True, will log instead of sorting. Defaults to False.\n    \"\"\"\n    for index, page in enumerate(page_ids):\n        if index == 0:\n            continue\n\n        target_id = page_ids[index - 1][0]\n        page_id = page[0]\n        self.move_page(\n            page_id,\n            target_id,\n            position=\"after\",\n            dry_run=dry_run,\n        )\n</code></pre>"},{"location":"reference/confluence/#firefighter.confluence.service.ConfluenceService.update_oncall_page","title":"update_oncall_page","text":"<pre><code>update_oncall_page(users: dict[str, User]) -&gt; bool\n</code></pre> <p>Update the Confluence list of On-Call users, if the page needs to be updated. Users should have a SlackUser AND a PagerDutyUser associated.</p> <p>Parameters:</p> <ul> <li> <code>users</code>               (<code>list[User]</code>)           \u2013            <p>list of Users to update the page with.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>has the page been updated?</p> </li> </ul> Source code in <code>src/firefighter/confluence/service.py</code> <pre><code>def update_oncall_page(self, users: dict[str, User]) -&gt; bool:\n    \"\"\"Update the Confluence list of On-Call users, if the page needs to be updated.\n    Users should have a SlackUser AND a PagerDutyUser associated.\n\n    Args:\n        users (list[User]): list of Users to update the page with.\n\n    Returns:\n        bool: has the page been updated?\n    \"\"\"\n    if not settings.CONFLUENCE_ON_CALL_PAGE_ID:\n        logger.info(\"No Confluence OnCall page ID, skipping.\")\n        return False\n\n    content = (self.client.get_page(settings.CONFLUENCE_ON_CALL_PAGE_ID)).json()\n\n    page_version = get_in(content, \"version.number\")\n    if not page_version:\n        logger.error(\"No page version in Confluence page! %s\", content)\n        return False\n    page_version += 1\n    page_body = self._build_page_from_django_template(\n        \"oncall_team.xml\",\n        context={\n            \"users\": users.items(),\n            \"oncall_page_link\": urljoin(\n                settings.BASE_URL, reverse(\"pagerduty:oncall-list\")\n            ),\n        },\n    )\n    logger.debug(\"Confluence OnCall page body: %s\", page_body)\n    if get_in(content, \"body.storage.value\") != page_body:\n        res = self.client.update_page(\n            content.get(\"id\"),\n            content.get(\"type\"),\n            content.get(\"title\"),\n            page_body,\n            page_version,\n        )\n        if res.status_code != 200:\n            logger.error(\"Can't update OnCall page: %s\", res.json())\n            return False\n        return True\n\n    logger.info(\"Confluence OnCall page is up to date, and was not updated.\")\n    return False\n</code></pre>"},{"location":"reference/confluence/#firefighter.confluence.tasks","title":"tasks","text":"<p>Modules:</p> <ul> <li> <code>archive_postmortems</code>           \u2013            </li> <li> <code>sort_runbooks</code>           \u2013            </li> </ul>"},{"location":"reference/confluence/#firefighter.confluence.tasks.archive_postmortems","title":"archive_postmortems","text":"<p>Functions:</p> <ul> <li> <code>archive_and_sort_postmortems</code>             \u2013              <p>Archive postmortems that are older than 2 weeks, for incidents that are closed.</p> </li> <li> <code>sort_postmortems_in_bins</code>             \u2013              <p>Sort postmortems in each quarter archive folder.</p> </li> </ul>"},{"location":"reference/confluence/#firefighter.confluence.tasks.archive_postmortems.archive_and_sort_postmortems","title":"archive_and_sort_postmortems","text":"<pre><code>archive_and_sort_postmortems(*, dry_run: bool = True) -&gt; None\n</code></pre> <p>Archive postmortems that are older than 2 weeks, for incidents that are closed.</p> <p>Parameters:</p> <ul> <li> <code>dry_run</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Should actions be performed? If True, Confluence will be accessed in read-only mode. Defaults to False.</p> </li> </ul> Source code in <code>src/firefighter/confluence/tasks/archive_postmortems.py</code> <pre><code>@shared_task(\n    name=\"confluence.archive_and_sort_postmortems\",\n    soft_time_limit=60 * 5,\n    time_limit=60 * 7,\n)\ndef archive_and_sort_postmortems(*, dry_run: bool = True) -&gt; None:\n    \"\"\"Archive postmortems that are older than 2 weeks, for incidents that are closed.\n\n    Args:\n        dry_run (bool, optional): Should actions be performed? If True, Confluence will be accessed in read-only mode. Defaults to False.\n    \"\"\"\n    logger.info(f\"Running in {'dry run' if dry_run else 'real'} mode\")\n\n    # 1. Get top level pages\n    pm_to_sort, quarter_bins = _get_top_level_pages(\n        confluence_service.POSTMORTEM_FOLDER_ID\n    )\n\n    # 2. Create current quarter folder if it does not exist\n    create_current_bin_if_needed(quarter_bins, dry_run=dry_run)\n\n    # 3. Archive postmortems in root into their quarter folder (if appropriate)\n    _archive_postmortems(pm_to_sort, quarter_bins, dry_run=dry_run)\n\n    # 4. Move archived postmortems in the right quarter folder if there is any error\n    # Not needed atm\n\n    # 5. Sort postmortems in each quarter folder\n    sort_postmortems_in_bins(quarter_bins, dry_run=dry_run)\n</code></pre>"},{"location":"reference/confluence/#firefighter.confluence.tasks.archive_postmortems.sort_postmortems_in_bins","title":"sort_postmortems_in_bins","text":"<pre><code>sort_postmortems_in_bins(quarter_bins: dict[str, int], *, dry_run: bool = False) -&gt; None\n</code></pre> <p>Sort postmortems in each quarter archive folder.</p> <p>Parameters:</p> <ul> <li> <code>quarter_bins</code>               (<code>dict[str, int]</code>)           \u2013            <p>description</p> </li> <li> <code>dry_run</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> </ul> Source code in <code>src/firefighter/confluence/tasks/archive_postmortems.py</code> <pre><code>def sort_postmortems_in_bins(\n    quarter_bins: dict[str, int], *, dry_run: bool = False\n) -&gt; None:\n    \"\"\"Sort postmortems in each quarter archive folder.\n\n    Args:\n        quarter_bins (dict[str, int]): _description_\n        dry_run (bool, optional): _description_. Defaults to False.\n    \"\"\"\n    for quarter, quarter_page_id in quarter_bins.items():\n        # Get children per archive page\n        children: list[ConfluencePage] = confluence_service.get_page_children_pages(\n            quarter_page_id, expand=\"\"\n        )\n        logger.info(f\"Found {len(children)} postmortems in {quarter}\")\n        quarter_children: list[tuple[int, datetime, ConfluencePage]] = []\n\n        for page in children:\n            title: str = page[\"title\"]\n            page_id: int = int(page[\"id\"])\n\n            date_, fmt = parse_postmortem_title(title)\n            if date_ and fmt:\n                quarter_children.append((page_id, date_, page))\n\n        sorted_children = sorted(quarter_children, key=operator.itemgetter(1), reverse=True)\n        # Check if already sorted\n        if sorted_children == quarter_children:\n            logger.debug(f\"Quarter {quarter} is already sorted. Skipping\")\n            continue\n\n        logger.info(f\"Quarter {quarter} is not sorted. Sorting\")\n\n        clean_sorted: list[tuple[ConfluencePageId, ConfluencePage]] = [\n            (x[0], x[2]) for x in sorted_children\n        ]\n\n        confluence_service.sort_pages(clean_sorted, dry_run=dry_run)\n\n        logger.info(f\"Fetched {len(quarter_children)} postmortems\")\n</code></pre>"},{"location":"reference/confluence/#firefighter.confluence.tasks.sort_runbooks","title":"sort_runbooks","text":"<p>Functions:</p> <ul> <li> <code>sort_runbooks</code>             \u2013              <p>Sort runbooks in Confluence.</p> </li> <li> <code>sort_runbooks_in_folders</code>             \u2013              <p>Sort runbooks in each folder.</p> </li> </ul>"},{"location":"reference/confluence/#firefighter.confluence.tasks.sort_runbooks.sort_runbooks","title":"sort_runbooks","text":"<pre><code>sort_runbooks(*, dry_run: bool = False) -&gt; None\n</code></pre> <p>Sort runbooks in Confluence.</p> <p>Parameters:</p> <ul> <li> <code>dry_run</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Should actions be performed? If True, Confluence will be accessed in read-only mode. Defaults to False.</p> </li> </ul> Source code in <code>src/firefighter/confluence/tasks/sort_runbooks.py</code> <pre><code>@shared_task(name=\"confluence.sort_runbooks\", soft_time_limit=60 * 5, time_limit=60 * 7)\ndef sort_runbooks(*, dry_run: bool = False) -&gt; None:\n    \"\"\"Sort runbooks in Confluence.\n\n    Args:\n        dry_run (bool, optional): Should actions be performed? If True, Confluence will be accessed in read-only mode. Defaults to False.\n    \"\"\"\n    logger.info(f\"Running in {'dry run' if dry_run else 'real'} mode\")\n\n    # 1. Get top level pages\n    folders = _get_top_level_pages(confluence_service.RUNBOOKS_FOLDER_ID)\n\n    # 2. Sort runbooks in each folder\n    sort_runbooks_in_folders(folders, dry_run=dry_run)\n</code></pre>"},{"location":"reference/confluence/#firefighter.confluence.tasks.sort_runbooks.sort_runbooks_in_folders","title":"sort_runbooks_in_folders","text":"<pre><code>sort_runbooks_in_folders(folders: list[ConfluencePageId], *, dry_run: bool = False) -&gt; None\n</code></pre> <p>Sort runbooks in each folder.</p> <p>Parameters:</p> <ul> <li> <code>folders</code>               (<code>list[ConfluencePageId]</code>)           \u2013            <p>List of folders to sort runbooks in.</p> </li> <li> <code>dry_run</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Do not perform the sort. Defaults to False.</p> </li> </ul> Source code in <code>src/firefighter/confluence/tasks/sort_runbooks.py</code> <pre><code>def sort_runbooks_in_folders(\n    folders: list[ConfluencePageId], *, dry_run: bool = False\n) -&gt; None:\n    \"\"\"Sort runbooks in each folder.\n\n    Args:\n        folders (list[ConfluencePageId]): List of folders to sort runbooks in.\n        dry_run (bool, optional): Do not perform the sort. Defaults to False.\n    \"\"\"\n    for folder_page_id in folders:\n        # Get children per archive page\n        children: list[ConfluencePage] = confluence_service.get_page_children_pages(\n            folder_page_id, expand=\"\"\n        )\n\n        folder_children: list[tuple[ConfluencePageId, str, ConfluencePage]] = []\n\n        for page in children:\n            title: str = page[\"title\"]\n            page_id: ConfluencePageId = page[\"id\"]\n\n            runbook_name_clean = parse_runbook_title(title)\n            if runbook_name_clean:\n                folder_children.append((page_id, runbook_name_clean, page))\n\n        sorted_children = sorted(folder_children, key=lambda x: x[1].lower())\n        # Check if already sorted\n        if sorted_children == folder_children:\n            logger.debug(f\"Folder {folder_page_id} is already sorted. Skipping\")\n            continue\n        clean_sorted_children: list[tuple[ConfluencePageId, ConfluencePage]] = [\n            (x[0], x[2]) for x in sorted_children\n        ]\n        logger.info(f\"Folder {folder_page_id} is not sorted. Sorting\")\n        confluence_service.sort_pages(clean_sorted_children, dry_run=dry_run)\n</code></pre>"},{"location":"reference/confluence/#firefighter.confluence.utils","title":"utils","text":"<p>Classes:</p> <ul> <li> <code>PageInfo</code>           \u2013            <p>Dict mapped to mandatory fields for a firefighter.confluence.models.ConfluencePage.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>parse_postmortem_title</code>             \u2013              <p>Parse postmortem title and return the date and quarter associated to this date, in the format YYYYQX.</p> </li> <li> <code>parse_runbook_title</code>             \u2013              <p>Parse runbooks title and return the service name, or None if the title is not valid.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>ConfluencePageId</code>               (<code>TypeAlias</code>)           \u2013            <p>Alias of <code>int | str</code></p> </li> </ul>"},{"location":"reference/confluence/#firefighter.confluence.utils.ConfluencePageId","title":"ConfluencePageId  <code>module-attribute</code>","text":"<pre><code>ConfluencePageId: TypeAlias = int | str\n</code></pre> <p>Alias of <code>int | str</code></p>"},{"location":"reference/confluence/#firefighter.confluence.utils.PageInfo","title":"PageInfo","text":"<p>               Bases: <code>TypedDict</code></p> <p>Dict mapped to mandatory fields for a firefighter.confluence.models.ConfluencePage.</p>"},{"location":"reference/confluence/#firefighter.confluence.utils.parse_postmortem_title","title":"parse_postmortem_title","text":"<pre><code>parse_postmortem_title(title: str) -&gt; tuple[datetime, str] | tuple[None, None]\n</code></pre> <p>Parse postmortem title and return the date and quarter associated to this date, in the format YYYYQX.</p> <p>Parameters:</p> <ul> <li> <code>title</code>               (<code>str</code>)           \u2013            <p>Title of the postmortem, in the format #YYYYMMDD-- (SEV/P)  <p>Returns:</p> <ul> <li> <code>tuple[datetime, str] | tuple[None, None]</code>           \u2013            <p>tuple[datetime, str] | tuple[None, None]: Date and quarter associated to this date.</p> </li> </ul> Source code in <code>src/firefighter/confluence/utils.py</code> <pre><code>def parse_postmortem_title(title: str) -&gt; tuple[datetime, str] | tuple[None, None]:\n    \"\"\"Parse postmortem title and return the date and quarter associated to this date, in the format YYYYQX.\n\n    Args:\n        title (str): Title of the postmortem, in the format #YYYYMMDD-&lt;id&gt;-&lt;component&gt; (SEV/P&lt;N&gt;) &lt;title&gt;\n\n    Returns:\n        tuple[datetime, str] | tuple[None, None]: Date and quarter associated to this date.\n    \"\"\"\n    match = CONFLUENCE_PM_TITLE_REGEX.match(title)\n    if not match:\n        return None, None\n\n    res = match.groupdict()\n    grp = res[\"date\"]\n    grp = grp.replace(\"-inc\", \"\")\n\n    date_ = datetime.strptime(grp, \"%Y%m%d\").replace(tzinfo=get_current_timezone())\n    quarter = get_quarter_from_week(date_.isocalendar()[1])\n    year = date_.isocalendar()[0]\n    fmt = f\"{year}Q{quarter}\"\n    return date_, fmt\n</code></pre>"},{"location":"reference/confluence/#firefighter.confluence.utils.parse_runbook_title","title":"parse_runbook_title","text":"<pre><code>parse_runbook_title(title: str) -&gt; str | None\n</code></pre> <p>Parse runbooks title and return the service name, or None if the title is not valid.</p> <p>Useful to remove prefixes like [WIP] or [ARCHIVED] from the title, to sort runbooks.</p> <p>Parameters:</p> <ul> <li> <code>title</code>               (<code>str</code>)           \u2013            <p>Title of the runbook</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str | None</code>           \u2013            <p>str | None: Service name or None if the title is not valid.</p> </li> </ul> Source code in <code>src/firefighter/confluence/utils.py</code> <pre><code>def parse_runbook_title(title: str) -&gt; str | None:\n    \"\"\"Parse runbooks title and return the service name, or None if the title is not valid.\n\n    Useful to remove prefixes like [WIP] or [ARCHIVED] from the title, to sort runbooks.\n\n    Args:\n        title (str): Title of the runbook\n\n    Returns:\n        str | None: Service name or None if the title is not valid.\n    \"\"\"\n    if \"[RUNBOOK]\" not in title or \"[TEMPLATE]\" in title.upper():\n        return None\n\n    # Remove leading text in brackets\n    title = re.sub(r\"^\\[.*\\] \", \"\", title)\n    return title.strip()\n</code></pre>"},{"location":"reference/confluence/#firefighter.confluence.views","title":"views","text":"<p>Modules:</p> <ul> <li> <code>runbook</code>           \u2013            </li> </ul>"},{"location":"reference/confluence/#firefighter.confluence.views.runbook","title":"runbook","text":"<p>Modules:</p> <ul> <li> <code>runbook_list</code>           \u2013            </li> </ul>"},{"location":"reference/confluence/#firefighter.confluence.views.runbook.runbook_list","title":"runbook_list","text":"<p>Classes:</p> <ul> <li> <code>RunbooksViewList</code>           \u2013            </li> </ul>"},{"location":"reference/confluence/#firefighter.confluence.views.runbook.runbook_list.RunbooksViewList","title":"RunbooksViewList","text":"<p>               Bases: <code>SingleTableMixin</code>, <code>FilterView</code></p> <p>Methods:</p> <ul> <li> <code>get_context_data</code>             \u2013              <p>No *args to pass.</p> </li> </ul>"},{"location":"reference/confluence/#firefighter.confluence.views.runbook.runbook_list.RunbooksViewList.get_context_data","title":"get_context_data","text":"<pre><code>get_context_data(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>No *args to pass.</p> Source code in <code>src/firefighter/confluence/views/runbook/runbook_list.py</code> <pre><code>def get_context_data(self, **kwargs: Any) -&gt; dict[str, Any]:\n    \"\"\"No *args to pass.\"\"\"\n    context = super().get_context_data(**kwargs)\n    context[\"filter_order\"] = [\n        \"search\",\n        \"service_type\",\n    ]\n    context[\"page_title\"] = \"Runbooks List\"\n    return context\n</code></pre>"},{"location":"reference/firefighter/","title":"firefighter","text":""},{"location":"reference/firefighter/#firefighter.firefighter","title":"firefighter","text":"<p>This is the main entrypoint for FireFighter.</p> <p>Warning</p> <p>This app does not contain any business logic. It is responsible for loading all the settings, providing common base features and tying together all the other apps.</p>"},{"location":"reference/firefighter/#firefighter.firefighter--features","title":"Features","text":"<ul> <li>Load all settings</li> <li>Provide <code>ASGI</code> and <code>WSGI</code> entrypoints</li> <li>Configure loggers</li> <li>Provide a Celery app</li> <li>Set the base URL routing</li> <li>Provides a <code>healthcheck</code> endpoint</li> <li>Provide a <code>robots.txt</code> endpoint</li> <li>Provides some utils</li> <li>Provides SSO integration</li> <li>Register the Django admin and customize its theme</li> </ul> <p>Modules:</p> <ul> <li> <code>apps</code>           \u2013            </li> <li> <code>asgi</code>           \u2013            <p>ASGI config for firefighter project.</p> </li> <li> <code>fields_forms_widgets</code>           \u2013            </li> <li> <code>filters</code>           \u2013            <p>Collection of custom Django template filters. They are added as built-in filters and thus can be used in templates of any app.</p> </li> <li> <code>formats</code>           \u2013            <p>See Django docs: https://docs.djangoproject.com/en/4.2/topics/i18n/formatting/ .</p> </li> <li> <code>http_client</code>           \u2013            </li> <li> <code>middleware</code>           \u2013            </li> <li> <code>settings</code>           \u2013            <p>This module define all the settings for the FireFighter project.</p> </li> <li> <code>urls</code>           \u2013            <p>firefighter URL Configuration.</p> </li> <li> <code>utils</code>           \u2013            </li> <li> <code>views</code>           \u2013            </li> <li> <code>wsgi</code>           \u2013            <p>WSGI config for firefighter project.</p> </li> </ul>"},{"location":"reference/firefighter/#firefighter.firefighter.apps","title":"apps","text":""},{"location":"reference/firefighter/#firefighter.firefighter.asgi","title":"asgi","text":"<p>ASGI config for firefighter project.</p> <p>It exposes the ASGI callable as a module-level variable named <code>application</code>.</p> <p>For more information on this file, see https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/</p>"},{"location":"reference/firefighter/#firefighter.firefighter.fields_forms_widgets","title":"fields_forms_widgets","text":"<p>Classes:</p> <ul> <li> <code>CustomCheckboxSelectMultiple</code>           \u2013            <p>Custom template.</p> </li> <li> <code>FFDateRangeSingleFilter</code>           \u2013            <p>TODO Fix typings, implement tests, move in proper location.</p> </li> <li> <code>GroupedCheckboxSelectMultiple</code>           \u2013            <p>Widget to group checkboxes in a select multiple.</p> </li> <li> <code>TextDateRangeField</code>           \u2013            </li> </ul>"},{"location":"reference/firefighter/#firefighter.firefighter.fields_forms_widgets.CustomCheckboxSelectMultiple","title":"CustomCheckboxSelectMultiple","text":"<p>               Bases: <code>CheckboxSelectMultiple</code></p> <p>Custom template.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.fields_forms_widgets.FFDateRangeSingleFilter","title":"FFDateRangeSingleFilter","text":"<p>               Bases: <code>Filter</code></p> <p>TODO Fix typings, implement tests, move in proper location.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.fields_forms_widgets.GroupedCheckboxSelectMultiple","title":"GroupedCheckboxSelectMultiple","text":"<p>               Bases: <code>CustomCheckboxSelectMultiple</code></p> <p>Widget to group checkboxes in a select multiple. TODO Make this generic!</p> <p>Methods:</p> <ul> <li> <code>optgroups</code>             \u2013              <p>Return a list of optgroups for this widget.</p> </li> </ul>"},{"location":"reference/firefighter/#firefighter.firefighter.fields_forms_widgets.GroupedCheckboxSelectMultiple.optgroups","title":"optgroups","text":"<pre><code>optgroups(name: str, value: list[Any], attrs: dict[str, Any] | None = None) -&gt; list[tuple[str | None, list[dict[str, Any]], int | None]]\n</code></pre> <p>Return a list of optgroups for this widget.</p> Source code in <code>src/firefighter/firefighter/fields_forms_widgets.py</code> <pre><code>def optgroups(\n    self, name: str, value: list[Any], attrs: dict[str, Any] | None = None\n) -&gt; list[tuple[str | None, list[dict[str, Any]], int | None]]:\n    \"\"\"Return a list of optgroups for this widget.\"\"\"\n    self.choices = [\n        (key, list(group))\n        for key, group in groupby(self.choices, key=lambda x: x[0].instance.group)  # type: ignore[union-attr]\n    ]\n    return super().optgroups(name, value, attrs)\n</code></pre>"},{"location":"reference/firefighter/#firefighter.firefighter.fields_forms_widgets.TextDateRangeField","title":"TextDateRangeField","text":"<p>               Bases: <code>Field</code></p> <p>Methods:</p> <ul> <li> <code>to_python</code>             \u2013              <p>Validate date range. Field is optional.</p> </li> </ul>"},{"location":"reference/firefighter/#firefighter.firefighter.fields_forms_widgets.TextDateRangeField.to_python","title":"to_python","text":"<pre><code>to_python(value: str | None) -&gt; tuple[date | None, date | None, str | None, str | None] | None\n</code></pre> <p>Validate date range. Field is optional.</p> Source code in <code>src/firefighter/firefighter/fields_forms_widgets.py</code> <pre><code>def to_python(\n    self, value: str | None\n) -&gt; tuple[date | None, date | None, str | None, str | None] | None:\n    \"\"\"Validate date range. Field is optional.\"\"\"\n    if not value or value.strip() == \"\":\n        return None\n    date_range = get_date_range_from_special_date(value)\n    if date_range[0] is None and date_range[1] is None:\n        err_msg = f\"Invalid date range: {value}\"\n        raise ValidationError(err_msg)\n    if (date_range[0] is not None and date_range[1] is not None) and date_range[\n        0\n    ] &gt; date_range[1]:\n        err_msg = f\"Start date must be before end date ({date_range[0].strftime('%Y-%m-%d %H:%M:%S')} &gt; {date_range[1].strftime('%Y-%m-%d %H:%M:%S')}).\"\n        raise ValidationError(err_msg)\n\n    return date_range\n</code></pre>"},{"location":"reference/firefighter/#firefighter.firefighter.filters","title":"filters","text":"<p>Collection of custom Django template filters. They are added as built-in filters and thus can be used in templates of any app.</p> <p>Functions:</p> <ul> <li> <code>apply_filter</code>             \u2013              <p>Applies a filter function to a given value.</p> </li> <li> <code>get_item</code>             \u2013              <p>Get the value of a key from a dictionary or object.</p> </li> <li> <code>markdown</code>             \u2013              <p>Converts markdown-formatted text to HTML.</p> </li> <li> <code>readable_time_delta</code>             \u2013              <p>Format a time delta as a string. Ignore seconds and microseconds</p> </li> <li> <code>timedelta_chop_microseconds</code>             \u2013              <p>Removes microseconds from a timedelta object.</p> </li> </ul>"},{"location":"reference/firefighter/#firefighter.firefighter.filters.apply_filter","title":"apply_filter","text":"<pre><code>apply_filter(value: Any, fn_holder: dict[Literal['filter_args', 'filter'], Callable[..., V]]) -&gt; V | Any\n</code></pre> <p>Applies a filter function to a given value.</p> <p>Parameters:</p> <ul> <li> <code>value</code>               (<code>Any</code>)           \u2013            <p>The value to be filtered.</p> </li> <li> <code>fn_holder</code>               (<code>dict[Literal['filter_args', 'filter'], Callable[..., V]]</code>)           \u2013            <p>A dictionary containing the filter function and its arguments.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>V | Any</code>           \u2013            <p>The filtered value.</p> </li> </ul> Source code in <code>src/firefighter/firefighter/filters.py</code> <pre><code>@register_global.filter\ndef apply_filter(\n    value: Any,\n    fn_holder: dict[Literal[\"filter_args\", \"filter\"], Callable[..., V]],\n) -&gt; V | Any:\n    \"\"\"Applies a filter function to a given value.\n\n    Args:\n        value: The value to be filtered.\n        fn_holder: A dictionary containing the filter function and its arguments.\n\n    Returns:\n        The filtered value.\n    \"\"\"\n    fn = fn_holder.get(\"filter\")\n\n    if not fn:\n        return value\n\n    args = fn_holder.get(\"filter_args\")\n    if args:\n        return fn(value, args)\n    return fn(value)\n</code></pre>"},{"location":"reference/firefighter/#firefighter.firefighter.filters.get_item","title":"get_item","text":"<pre><code>get_item(dictionary: dict[str, Any], key: Any) -&gt; Any\n</code></pre> <p>Get the value of a key from a dictionary or object.</p> <p>Parameters:</p> <ul> <li> <code>dictionary</code>               (<code>dict[str, Any]</code>)           \u2013            <p>The dictionary or object to get the value from.</p> </li> <li> <code>key</code>               (<code>Any</code>)           \u2013            <p>The key to get the value for.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Any</code> (              <code>Any</code> )          \u2013            <p>The value of the key in the dictionary or object.</p> </li> </ul> Source code in <code>src/firefighter/firefighter/filters.py</code> <pre><code>@register_global.filter\ndef get_item(dictionary: dict[str, Any], key: Any) -&gt; Any:\n    \"\"\"Get the value of a key from a dictionary or object.\n\n    Args:\n        dictionary (dict[str, Any]): The dictionary or object to get the value from.\n        key (Any): The key to get the value for.\n\n    Returns:\n        Any: The value of the key in the dictionary or object.\n    \"\"\"\n    if hasattr(dictionary, key):\n        return getattr(dictionary, key)\n    if hasattr(dictionary, \"__getitem__\"):\n        try:\n            return dictionary[key]\n        except KeyError:\n            pass\n    if hasattr(dictionary, \"get\"):\n        return dictionary.get(key)\n    if not isinstance(dictionary, dict):\n        dictionary = dictionary.__dict__  # type: ignore\n\n    return dictionary.get(key)\n</code></pre>"},{"location":"reference/firefighter/#firefighter.firefighter.filters.markdown","title":"markdown","text":"<pre><code>markdown(text: str) -&gt; str\n</code></pre> <p>Converts markdown-formatted text to HTML.</p> <p>Sanitize the HTML to only allow a subset of tags.</p> <p>Parameters:</p> <ul> <li> <code>text</code>               (<code>str</code>)           \u2013            <p>The markdown-formatted text to convert.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code> (              <code>str</code> )          \u2013            <p>The HTML-formatted text.</p> </li> </ul> Source code in <code>src/firefighter/firefighter/filters.py</code> <pre><code>@register_global.filter\ndef markdown(text: str) -&gt; str:\n    \"\"\"Converts markdown-formatted text to HTML.\n\n    Sanitize the HTML to only allow a subset of tags.\n\n    Args:\n        text (str): The markdown-formatted text to convert.\n\n    Returns:\n        str: The HTML-formatted text.\n    \"\"\"\n    return nh3.clean(md.markdown(text, output_format=\"html\"), tags=nh3.ALLOWED_TAGS)\n</code></pre>"},{"location":"reference/firefighter/#firefighter.firefighter.filters.readable_time_delta","title":"readable_time_delta","text":"<pre><code>readable_time_delta(delta: timedelta) -&gt; str\n</code></pre> <p>Format a time delta as a string. Ignore seconds and microseconds From https://github.com/wimglenn/readabledelta/blob/master/readabledelta.py (The Unlicense).</p> Source code in <code>src/firefighter/firefighter/filters.py</code> <pre><code>@register_global.filter\ndef readable_time_delta(delta: timedelta) -&gt; str:\n    \"\"\"Format a time delta as a string. Ignore seconds and microseconds\n    From https://github.com/wimglenn/readabledelta/blob/master/readabledelta.py (The Unlicense).\n    \"\"\"\n    negative = delta &lt; timedelta(0)\n    delta = abs(delta)\n\n    # Other allowed values are  \"seconds\", \"milliseconds\", \"microseconds\".\n    keys = [\n        \"weeks\",\n        \"days\",\n        \"hours\",\n        \"minutes\",\n    ]\n\n    # datetime.timedelta are normalized internally in Python to the units days, seconds, microseconds allowing a unique\n    # representation.  This is not the only possible basis; the calculations below rebase onto more human friendly keys\n    # noinspection PyDictCreation\n    data = {}\n    # rebase days onto weeks, days\n    data[\"weeks\"], data[\"days\"] = divmod(delta.days, 7)\n    # rebase seconds onto hours, minutes, seconds\n    data[\"hours\"], data[\"seconds\"] = divmod(delta.seconds, 60 * 60)\n    data[\"minutes\"], data[\"seconds\"] = divmod(data[\"seconds\"], 60)\n    # rebase microseconds onto milliseconds, microseconds\n\n    if data[\"weeks\"] != 0 or data[\"days\"] != 0:\n        keys.remove(\"minutes\")\n        keys.remove(\"hours\")\n\n    output = [\n        f\"{data[k]} {k[:-1] if data[k] == 1 else k}\" for k in keys if data[k] != 0\n    ]\n\n    if not output:\n        result = \"an instant\"\n    elif len(output) == 1:\n        [result] = output\n    else:\n        left, right = output[:-1], output[-1:]\n        result = \", \".join(left) + \" and \" + right[0]\n\n    if negative:\n        return \"-\" + result\n    return result\n</code></pre>"},{"location":"reference/firefighter/#firefighter.firefighter.filters.timedelta_chop_microseconds","title":"timedelta_chop_microseconds","text":"<pre><code>timedelta_chop_microseconds(delta: timedelta) -&gt; timedelta\n</code></pre> <p>Removes microseconds from a timedelta object.</p> <p>Parameters:</p> <ul> <li> <code>delta</code>               (<code>timedelta</code>)           \u2013            <p>The timedelta object to remove microseconds from.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>timedelta</code> (              <code>timedelta</code> )          \u2013            <p>A new timedelta object with microseconds removed.</p> </li> </ul> Source code in <code>src/firefighter/firefighter/filters.py</code> <pre><code>@register_global.filter\ndef timedelta_chop_microseconds(delta: timedelta) -&gt; timedelta:\n    \"\"\"Removes microseconds from a timedelta object.\n\n    Args:\n        delta (timedelta): The timedelta object to remove microseconds from.\n\n    Returns:\n        timedelta: A new timedelta object with microseconds removed.\n    \"\"\"\n    return delta - timedelta(microseconds=delta.microseconds)\n</code></pre>"},{"location":"reference/firefighter/#firefighter.firefighter.formats","title":"formats","text":"<p>See Django docs: https://docs.djangoproject.com/en/4.2/topics/i18n/formatting/ .</p>"},{"location":"reference/firefighter/#firefighter.firefighter.http_client","title":"http_client","text":"<p>Classes:</p> <ul> <li> <code>HttpClient</code>           \u2013            <p>Base class for HTTP clients. Uses httpx under the hood.</p> </li> </ul>"},{"location":"reference/firefighter/#firefighter.firefighter.http_client.HttpClient","title":"HttpClient","text":"<pre><code>HttpClient(client_kwargs: dict[str, Any] | None = None)\n</code></pre> <p>Base class for HTTP clients. Uses httpx under the hood.</p> <p>Sets some defaults, including: - a timeout of 15 seconds for the connection and 20 seconds for the read, to avoid hanging indefinitely - access logging</p> <p>Used by firefighter.confluence.client.ConfluenceClient.</p> Source code in <code>src/firefighter/firefighter/http_client.py</code> <pre><code>def __init__(self, client_kwargs: dict[str, Any] | None = None) -&gt; None:\n    self._client = httpx.Client(**(client_kwargs or {}))\n    self._client.timeout = httpx.Timeout(15, read=20)\n    if FF_HTTP_CLIENT_ADDITIONAL_HEADERS:\n        self._client.headers = httpx.Headers({\n            **self._client.headers,\n            **FF_HTTP_CLIENT_ADDITIONAL_HEADERS,\n        })\n</code></pre>"},{"location":"reference/firefighter/#firefighter.firefighter.middleware","title":"middleware","text":"<p>Classes:</p> <ul> <li> <code>HeaderUser</code>           \u2013            <p>Adds the user ID to the response headers configured with \"FF-User-Id\", to log in access logs.</p> </li> </ul>"},{"location":"reference/firefighter/#firefighter.firefighter.middleware.HeaderUser","title":"HeaderUser","text":"<pre><code>HeaderUser(get_response: Callable[[HttpRequest], HttpResponse])\n</code></pre> <p>Adds the user ID to the response headers configured with \"FF-User-Id\", to log in access logs.</p> Source code in <code>src/firefighter/firefighter/middleware.py</code> <pre><code>def __init__(self, get_response: Callable[[HttpRequest], HttpResponse]) -&gt; None:\n    self.get_response = get_response\n</code></pre>"},{"location":"reference/firefighter/#firefighter.firefighter.settings","title":"settings","text":"<p>This module define all the settings for the FireFighter project.</p> <p>Warning</p> <p>It should NOT be imported directly from any other module.</p> <p>To use the settings, import them through Django's django.conf.settings object: <pre><code>from django.conf import settings\n</code></pre></p> <p>Modules:</p> <ul> <li> <code>components</code>           \u2013            </li> <li> <code>environments</code>           \u2013            <p>Overriding settings based on the environment.</p> </li> <li> <code>settings_builder</code>           \u2013            </li> <li> <code>settings_utils</code>           \u2013            </li> </ul> <p>Classes:</p> <ul> <li> <code>AccessLogFilter</code>           \u2013            <p>Filter Gunicorn.access logs to avoid logging static files and healthcheck requests logging.</p> </li> <li> <code>CustomJsonFormatter</code>           \u2013            <p>Custom JSON formatter for Python loggin, with Datadog specific attributes.</p> </li> <li> <code>PrettyFormatter</code>           \u2013            <p>A custom logging formatter that formats log records with colors and a pretty output, for local development.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>APP_DISPLAY_NAME</code>               (<code>str</code>)           \u2013            <p>The name of the app. Used in the title of the app, and in the navigation bar.</p> </li> <li> <code>BASE_URL</code>               (<code>str</code>)           \u2013            <p>The base URL of the app. Used for links in externals surfaces, like Slack or documents.</p> </li> <li> <code>CONFLUENCE_API_KEY</code>               (<code>str</code>)           \u2013            <p>The Confluence API key to use.</p> </li> <li> <code>CONFLUENCE_ON_CALL_PAGE_ID</code>               (<code>int | None</code>)           \u2013            <p>The Confluence page ID where to export the current on-call schedule. If not set, export tasks will be skipped.</p> </li> <li> <code>CONFLUENCE_POSTMORTEM_FOLDER_ID</code>               (<code>int</code>)           \u2013            <p>The Confluence page ID  where to create and nest postmortems.</p> </li> <li> <code>CONFLUENCE_POSTMORTEM_SPACE</code>               (<code>str</code>)           \u2013            <p>XXX To rename CONFLUENCE_DEFAULT_SPACE. The Confluence space where to create pages by default, mainly for postmortems.</p> </li> <li> <code>CONFLUENCE_POSTMORTEM_TEMPLATE_PAGE_ID</code>               (<code>int</code>)           \u2013            <p>The Confluence page ID of the template to use for postmortems.</p> </li> <li> <code>CONFLUENCE_RUNBOOKS_FOLDER_ID</code>               (<code>int</code>)           \u2013            <p>The Confluence page ID where runbooks are stored.</p> </li> <li> <code>CONFLUENCE_URL</code>               (<code>str</code>)           \u2013            <p>The Confluence URL to use. If no protocol is defined, https will be used.</p> </li> <li> <code>CONFLUENCE_USERNAME</code>               (<code>str</code>)           \u2013            <p>The Confluence username to use.</p> </li> <li> <code>DRF_STANDARDIZED_ERRORS</code>           \u2013            <p>Additional servers to add to the OpenAPI schema</p> </li> <li> <code>ENABLE_CONFLUENCE</code>           \u2013            <p>Enable the Confluence app.</p> </li> <li> <code>ENABLE_JIRA</code>               (<code>bool</code>)           \u2013            <p>Enable the Jira app.</p> </li> <li> <code>ENABLE_PAGERDUTY</code>               (<code>bool</code>)           \u2013            <p>Enable PagerDuty integration.</p> </li> <li> <code>ENABLE_RAID</code>               (<code>bool</code>)           \u2013            <p>Enable the Raid app. Jira app must be enabled and configured as well.</p> </li> <li> <code>FF_HTTP_CLIENT_ADDITIONAL_HEADERS</code>               (<code>dict[str, Any] | None</code>)           \u2013            <p>Additional headers to send with every HTTP request made using our HttpClient. Useful for global auth, or adding a specific User-Agent.</p> </li> <li> <code>FF_OVERRIDE_MENUS_CREATION</code>               (<code>Callable[[], None] | None</code>)           \u2013            <p>Override the default menus creation. Useful for custom menus.</p> </li> <li> <code>FF_ROLE_REMINDER_MIN_DAYS_INTERVAL</code>           \u2013            <p>Number of days between role explanation/reminders, for each role. -1 disable the messages, and 0 will send the message everytime.</p> </li> <li> <code>FF_SKIP_SECRET_KEY_CHECK</code>               (<code>bool</code>)           \u2013            <p>Skip the SECRET_KEY check. Make sure to set a strong SECRET_KEY in production.</p> </li> <li> <code>FF_SLACK_SKIP_CHECKS</code>               (<code>bool</code>)           \u2013            <p>Skip Slack checks. Only use for testing or demo.</p> </li> <li> <code>FF_USER_ID_HEADER</code>               (<code>str</code>)           \u2013            <p>Header name to add to every HTTP request made using our HttpClient. Useful for logging.</p> </li> <li> <code>PAGERDUTY_ACCOUNT_EMAIL</code>               (<code>str</code>)           \u2013            <p>PagerDuty account email, linked to the API key.</p> </li> <li> <code>PAGERDUTY_API_KEY</code>               (<code>str</code>)           \u2013            <p>PagerDuty API key.</p> </li> <li> <code>PAGERDUTY_URL</code>               (<code>str</code>)           \u2013            <p>PagerDuty API URL.</p> </li> <li> <code>RAID_DEFAULT_JIRA_QRAFT_USER_ID</code>               (<code>str</code>)           \u2013            <p>The default Jira user ID to use for creating issues</p> </li> <li> <code>RAID_JIRA_API_PASSWORD</code>               (<code>str</code>)           \u2013            <p>The Jira API password to use.</p> </li> <li> <code>RAID_JIRA_API_URL</code>               (<code>str</code>)           \u2013            <p>The Jira API URL to use. If no protocol is defined, https will be used.</p> </li> <li> <code>RAID_JIRA_API_USER</code>               (<code>str</code>)           \u2013            <p>The Jira API user to use.</p> </li> <li> <code>RAID_JIRA_INCIDENT_CATEGORY_FIELD</code>               (<code>str</code>)           \u2013            <p>Jira custom field ID for incident category (e.g. 'customfield_12345')</p> </li> <li> <code>RAID_JIRA_PROJECT_KEY</code>               (<code>str</code>)           \u2013            <p>The Jira project key to use for creating issues, e.g. 'INC'</p> </li> <li> <code>RAID_JIRA_USER_IDS</code>               (<code>dict[str, str]</code>)           \u2013            <p>Mapping of domain to default Jira user ID</p> </li> <li> <code>RAID_TOOLBOX_URL</code>               (<code>str</code>)           \u2013            <p>Toolbox URL</p> </li> <li> <code>SLACK_APP_EMOJI</code>               (<code>str</code>)           \u2013            <p>Emoji to represent the app in Slack surfaces. Can be an actual emoji, or a string for a custom emoji present in your Workspace, like \":incident_logo:\".</p> </li> <li> <code>SLACK_BOT_TOKEN</code>               (<code>str</code>)           \u2013            <p>The Slack bot token to use.</p> </li> <li> <code>SLACK_EMERGENCY_COMMUNICATION_GUIDE_URL</code>               (<code>str | None</code>)           \u2013            <p>URL to add in the Slack emergency message. Useful to point to your own documentation.</p> </li> <li> <code>SLACK_EMERGENCY_USERGROUP_ID</code>               (<code>str | None</code>)           \u2013            <p>The Slack usergroup ID to use for emergency notifications. If not set, no group will be mentionned in the message.</p> </li> <li> <code>SLACK_INCIDENT_COMMAND</code>               (<code>str</code>)           \u2013            <p>The Slack slash command to use to create and manage incidents.</p> </li> <li> <code>SLACK_INCIDENT_COMMAND_ALIASES</code>               (<code>list[str]</code>)           \u2013            <p>Comma-separated list of aliases for the incident command.</p> </li> <li> <code>SLACK_INCIDENT_HELP_GUIDE_URL</code>               (<code>str | None</code>)           \u2013            <p>URL to add in the Slack help message (/incident help). Useful to point to your own documentation.</p> </li> <li> <code>SLACK_POSTMORTEM_HELP_URL</code>               (<code>str | None</code>)           \u2013            <p>URL to a guide on how to write a postmortem. Useful to point to your own documentation.</p> </li> <li> <code>SLACK_SEVERITY_HELP_GUIDE_URL</code>               (<code>str | None</code>)           \u2013            <p>URL to add in the form to choose the priority. Useful to point to your own documentation.</p> </li> <li> <code>SLACK_SIGNING_SECRET</code>               (<code>str</code>)           \u2013            <p>The Slack signing secret to use.</p> </li> </ul>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.APP_DISPLAY_NAME","title":"APP_DISPLAY_NAME  <code>module-attribute</code>","text":"<pre><code>APP_DISPLAY_NAME: str = config('APP_DISPLAY_NAME', default='FireFighter')\n</code></pre> <p>The name of the app. Used in the title of the app, and in the navigation bar.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.BASE_URL","title":"BASE_URL  <code>module-attribute</code>","text":"<pre><code>BASE_URL: str = config('BASE_URL')\n</code></pre> <p>The base URL of the app. Used for links in externals surfaces, like Slack or documents.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.CONFLUENCE_API_KEY","title":"CONFLUENCE_API_KEY  <code>module-attribute</code>","text":"<pre><code>CONFLUENCE_API_KEY: str = config('CONFLUENCE_API_KEY')\n</code></pre> <p>The Confluence API key to use.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.CONFLUENCE_ON_CALL_PAGE_ID","title":"CONFLUENCE_ON_CALL_PAGE_ID  <code>module-attribute</code>","text":"<pre><code>CONFLUENCE_ON_CALL_PAGE_ID: int | None = config('CONFLUENCE_ON_CALL_PAGE_ID', cast=int, default=None)\n</code></pre> <p>The Confluence page ID where to export the current on-call schedule. If not set, export tasks will be skipped.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.CONFLUENCE_POSTMORTEM_FOLDER_ID","title":"CONFLUENCE_POSTMORTEM_FOLDER_ID  <code>module-attribute</code>","text":"<pre><code>CONFLUENCE_POSTMORTEM_FOLDER_ID: int = config('CONFLUENCE_POSTMORTEM_FOLDER_ID', cast=int)\n</code></pre> <p>The Confluence page ID  where to create and nest postmortems.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.CONFLUENCE_POSTMORTEM_SPACE","title":"CONFLUENCE_POSTMORTEM_SPACE  <code>module-attribute</code>","text":"<pre><code>CONFLUENCE_POSTMORTEM_SPACE: str = config('CONFLUENCE_POSTMORTEM_SPACE')\n</code></pre> <p>XXX To rename CONFLUENCE_DEFAULT_SPACE. The Confluence space where to create pages by default, mainly for postmortems.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.CONFLUENCE_POSTMORTEM_TEMPLATE_PAGE_ID","title":"CONFLUENCE_POSTMORTEM_TEMPLATE_PAGE_ID  <code>module-attribute</code>","text":"<pre><code>CONFLUENCE_POSTMORTEM_TEMPLATE_PAGE_ID: int = config('CONFLUENCE_POSTMORTEM_TEMPLATE_PAGE_ID', cast=int)\n</code></pre> <p>The Confluence page ID of the template to use for postmortems.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.CONFLUENCE_RUNBOOKS_FOLDER_ID","title":"CONFLUENCE_RUNBOOKS_FOLDER_ID  <code>module-attribute</code>","text":"<pre><code>CONFLUENCE_RUNBOOKS_FOLDER_ID: int = config('CONFLUENCE_RUNBOOKS_FOLDER_ID', cast=int)\n</code></pre> <p>The Confluence page ID where runbooks are stored.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.CONFLUENCE_URL","title":"CONFLUENCE_URL  <code>module-attribute</code>","text":"<pre><code>CONFLUENCE_URL: str = config('CONFLUENCE_URL')\n</code></pre> <p>The Confluence URL to use. If no protocol is defined, https will be used.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.CONFLUENCE_USERNAME","title":"CONFLUENCE_USERNAME  <code>module-attribute</code>","text":"<pre><code>CONFLUENCE_USERNAME: str = config('CONFLUENCE_USERNAME')\n</code></pre> <p>The Confluence username to use.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.DRF_STANDARDIZED_ERRORS","title":"DRF_STANDARDIZED_ERRORS  <code>module-attribute</code>","text":"<pre><code>DRF_STANDARDIZED_ERRORS = {'ALLOWED_ERROR_STATUS_CODES': ['400', '401', '403', '404', '429', '500']}\n</code></pre> <p>Additional servers to add to the OpenAPI schema</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.ENABLE_CONFLUENCE","title":"ENABLE_CONFLUENCE  <code>module-attribute</code>","text":"<pre><code>ENABLE_CONFLUENCE = config('ENABLE_CONFLUENCE', cast=bool, default=False)\n</code></pre> <p>Enable the Confluence app.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.ENABLE_JIRA","title":"ENABLE_JIRA  <code>module-attribute</code>","text":"<pre><code>ENABLE_JIRA: bool = config('ENABLE_JIRA', cast=bool, default=False)\n</code></pre> <p>Enable the Jira app.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.ENABLE_PAGERDUTY","title":"ENABLE_PAGERDUTY  <code>module-attribute</code>","text":"<pre><code>ENABLE_PAGERDUTY: bool = config('ENABLE_PAGERDUTY', cast=bool, default=False)\n</code></pre> <p>Enable PagerDuty integration.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.ENABLE_RAID","title":"ENABLE_RAID  <code>module-attribute</code>","text":"<pre><code>ENABLE_RAID: bool = config('ENABLE_RAID', cast=bool, default=False)\n</code></pre> <p>Enable the Raid app. Jira app must be enabled and configured as well.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.FF_HTTP_CLIENT_ADDITIONAL_HEADERS","title":"FF_HTTP_CLIENT_ADDITIONAL_HEADERS  <code>module-attribute</code>","text":"<pre><code>FF_HTTP_CLIENT_ADDITIONAL_HEADERS: dict[str, Any] | None = None\n</code></pre> <p>Additional headers to send with every HTTP request made using our HttpClient. Useful for global auth, or adding a specific User-Agent.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.FF_OVERRIDE_MENUS_CREATION","title":"FF_OVERRIDE_MENUS_CREATION  <code>module-attribute</code>","text":"<pre><code>FF_OVERRIDE_MENUS_CREATION: Callable[[], None] | None = None\n</code></pre> <p>Override the default menus creation. Useful for custom menus.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.FF_ROLE_REMINDER_MIN_DAYS_INTERVAL","title":"FF_ROLE_REMINDER_MIN_DAYS_INTERVAL  <code>module-attribute</code>","text":"<pre><code>FF_ROLE_REMINDER_MIN_DAYS_INTERVAL = config('FF_ROLE_REMINDER_MIN_DAYS_INTERVAL', default=90, cast=int)\n</code></pre> <p>Number of days between role explanation/reminders, for each role. -1 disable the messages, and 0 will send the message everytime.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.FF_SKIP_SECRET_KEY_CHECK","title":"FF_SKIP_SECRET_KEY_CHECK  <code>module-attribute</code>","text":"<pre><code>FF_SKIP_SECRET_KEY_CHECK: bool = config('FF_SKIP_SECRET_KEY_CHECK', default=False, cast=bool)\n</code></pre> <p>Skip the SECRET_KEY check. Make sure to set a strong SECRET_KEY in production.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.FF_SLACK_SKIP_CHECKS","title":"FF_SLACK_SKIP_CHECKS  <code>module-attribute</code>","text":"<pre><code>FF_SLACK_SKIP_CHECKS: bool = config('FF_SLACK_SKIP_CHECKS', cast=bool, default=_is_default_skip_check_cmd)\n</code></pre> <p>Skip Slack checks. Only use for testing or demo.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.FF_USER_ID_HEADER","title":"FF_USER_ID_HEADER  <code>module-attribute</code>","text":"<pre><code>FF_USER_ID_HEADER: str = 'FF-User-Id'\n</code></pre> <p>Header name to add to every HTTP request made using our HttpClient. Useful for logging.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.PAGERDUTY_ACCOUNT_EMAIL","title":"PAGERDUTY_ACCOUNT_EMAIL  <code>module-attribute</code>","text":"<pre><code>PAGERDUTY_ACCOUNT_EMAIL: str = config('PAGERDUTY_ACCOUNT_EMAIL')\n</code></pre> <p>PagerDuty account email, linked to the API key.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.PAGERDUTY_API_KEY","title":"PAGERDUTY_API_KEY  <code>module-attribute</code>","text":"<pre><code>PAGERDUTY_API_KEY: str = config('PAGERDUTY_API_KEY')\n</code></pre> <p>PagerDuty API key.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.PAGERDUTY_URL","title":"PAGERDUTY_URL  <code>module-attribute</code>","text":"<pre><code>PAGERDUTY_URL: str = config('PAGERDUTY_URL', default='https://api.pagerduty.com')\n</code></pre> <p>PagerDuty API URL.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.RAID_DEFAULT_JIRA_QRAFT_USER_ID","title":"RAID_DEFAULT_JIRA_QRAFT_USER_ID  <code>module-attribute</code>","text":"<pre><code>RAID_DEFAULT_JIRA_QRAFT_USER_ID: str = config('RAID_DEFAULT_JIRA_QRAFT_USER_ID')\n</code></pre> <p>The default Jira user ID to use for creating issues</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.RAID_JIRA_API_PASSWORD","title":"RAID_JIRA_API_PASSWORD  <code>module-attribute</code>","text":"<pre><code>RAID_JIRA_API_PASSWORD: str = config('RAID_JIRA_API_PASSWORD')\n</code></pre> <p>The Jira API password to use.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.RAID_JIRA_API_URL","title":"RAID_JIRA_API_URL  <code>module-attribute</code>","text":"<pre><code>RAID_JIRA_API_URL: str = config('RAID_JIRA_API_URL')\n</code></pre> <p>The Jira API URL to use. If no protocol is defined, https will be used.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.RAID_JIRA_API_USER","title":"RAID_JIRA_API_USER  <code>module-attribute</code>","text":"<pre><code>RAID_JIRA_API_USER: str = config('RAID_JIRA_API_USER')\n</code></pre> <p>The Jira API user to use.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.RAID_JIRA_INCIDENT_CATEGORY_FIELD","title":"RAID_JIRA_INCIDENT_CATEGORY_FIELD  <code>module-attribute</code>","text":"<pre><code>RAID_JIRA_INCIDENT_CATEGORY_FIELD: str = config('RAID_JIRA_INCIDENT_CATEGORY_FIELD', default='')\n</code></pre> <p>Jira custom field ID for incident category (e.g. 'customfield_12345')</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.RAID_JIRA_PROJECT_KEY","title":"RAID_JIRA_PROJECT_KEY  <code>module-attribute</code>","text":"<pre><code>RAID_JIRA_PROJECT_KEY: str = config('RAID_JIRA_PROJECT_KEY')\n</code></pre> <p>The Jira project key to use for creating issues, e.g. 'INC'</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.RAID_JIRA_USER_IDS","title":"RAID_JIRA_USER_IDS  <code>module-attribute</code>","text":"<pre><code>RAID_JIRA_USER_IDS: dict[str, str] = {}\n</code></pre> <p>Mapping of domain to default Jira user ID</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.RAID_TOOLBOX_URL","title":"RAID_TOOLBOX_URL  <code>module-attribute</code>","text":"<pre><code>RAID_TOOLBOX_URL: str = config('RAID_TOOLBOX_URL')\n</code></pre> <p>Toolbox URL</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.SLACK_APP_EMOJI","title":"SLACK_APP_EMOJI  <code>module-attribute</code>","text":"<pre><code>SLACK_APP_EMOJI: str = config('SLACK_APP_EMOJI', default=':fire_extinguisher:')\n</code></pre> <p>Emoji to represent the app in Slack surfaces. Can be an actual emoji, or a string for a custom emoji present in your Workspace, like \":incident_logo:\".</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.SLACK_BOT_TOKEN","title":"SLACK_BOT_TOKEN  <code>module-attribute</code>","text":"<pre><code>SLACK_BOT_TOKEN: str = config('SLACK_BOT_TOKEN')\n</code></pre> <p>The Slack bot token to use.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.SLACK_EMERGENCY_COMMUNICATION_GUIDE_URL","title":"SLACK_EMERGENCY_COMMUNICATION_GUIDE_URL  <code>module-attribute</code>","text":"<pre><code>SLACK_EMERGENCY_COMMUNICATION_GUIDE_URL: str | None = config('SLACK_EMERGENCY_COMMUNICATION_GUIDE_URL', default=None)\n</code></pre> <p>URL to add in the Slack emergency message. Useful to point to your own documentation.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.SLACK_EMERGENCY_USERGROUP_ID","title":"SLACK_EMERGENCY_USERGROUP_ID  <code>module-attribute</code>","text":"<pre><code>SLACK_EMERGENCY_USERGROUP_ID: str | None = config('SLACK_EMERGENCY_USERGROUP_ID', default=None)\n</code></pre> <p>The Slack usergroup ID to use for emergency notifications. If not set, no group will be mentionned in the message.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.SLACK_INCIDENT_COMMAND","title":"SLACK_INCIDENT_COMMAND  <code>module-attribute</code>","text":"<pre><code>SLACK_INCIDENT_COMMAND: str = config('SLACK_INCIDENT_COMMAND', default='/incident')\n</code></pre> <p>The Slack slash command to use to create and manage incidents.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.SLACK_INCIDENT_COMMAND_ALIASES","title":"SLACK_INCIDENT_COMMAND_ALIASES  <code>module-attribute</code>","text":"<pre><code>SLACK_INCIDENT_COMMAND_ALIASES: list[str] = config('SLACK_INCIDENT_COMMAND_ALIASES', cast=Csv(), default='')\n</code></pre> <p>Comma-separated list of aliases for the incident command.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.SLACK_INCIDENT_HELP_GUIDE_URL","title":"SLACK_INCIDENT_HELP_GUIDE_URL  <code>module-attribute</code>","text":"<pre><code>SLACK_INCIDENT_HELP_GUIDE_URL: str | None = config('SLACK_INCIDENT_HELP_GUIDE_URL', default=None)\n</code></pre> <p>URL to add in the Slack help message (/incident help). Useful to point to your own documentation.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.SLACK_POSTMORTEM_HELP_URL","title":"SLACK_POSTMORTEM_HELP_URL  <code>module-attribute</code>","text":"<pre><code>SLACK_POSTMORTEM_HELP_URL: str | None = config('SLACK_POSTMORTEM_HELP_URL', default=None)\n</code></pre> <p>URL to a guide on how to write a postmortem. Useful to point to your own documentation.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.SLACK_SEVERITY_HELP_GUIDE_URL","title":"SLACK_SEVERITY_HELP_GUIDE_URL  <code>module-attribute</code>","text":"<pre><code>SLACK_SEVERITY_HELP_GUIDE_URL: str | None = config('SLACK_SEVERITY_HELP_GUIDE_URL', default=None)\n</code></pre> <p>URL to add in the form to choose the priority. Useful to point to your own documentation.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.SLACK_SIGNING_SECRET","title":"SLACK_SIGNING_SECRET  <code>module-attribute</code>","text":"<pre><code>SLACK_SIGNING_SECRET: str = config('SLACK_SIGNING_SECRET')\n</code></pre> <p>The Slack signing secret to use.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.AccessLogFilter","title":"AccessLogFilter","text":"<p>               Bases: <code>Filter</code></p> <p>Filter Gunicorn.access logs to avoid logging static files and healthcheck requests logging.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.CustomJsonFormatter","title":"CustomJsonFormatter","text":"<pre><code>CustomJsonFormatter(*args: Any, **kwargs: Any)\n</code></pre> <p>               Bases: <code>JsonFormatter</code></p> <p>Custom JSON formatter for Python loggin, with Datadog specific attributes.</p> Source code in <code>src/firefighter/logging/custom_json_formatter.py</code> <pre><code>def __init__(self, *args: Any, **kwargs: Any) -&gt; None:\n    self.FF_USER_ID_HEADER: str = settings.FF_USER_ID_HEADER\n    super().__init__(*args, **kwargs)\n</code></pre>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.PrettyFormatter","title":"PrettyFormatter","text":"<p>               Bases: <code>Formatter</code></p> <p>A custom logging formatter that formats log records with colors and a pretty output, for local development.</p> <p>Opiniated about what is pretty.</p> <p>Attributes:</p> <ul> <li> <code>_style</code>               (<code>_STYLES</code>)           \u2013            <p>The logging style used for formatting.</p> </li> <li> <code>_fmt</code>               (<code>str</code>)           \u2013            <p>The logging format string used for formatting.</p> </li> </ul>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components","title":"components","text":"<p>Modules:</p> <ul> <li> <code>api</code>           \u2013            </li> <li> <code>celery</code>           \u2013            <p>Celery settings definition.</p> </li> <li> <code>common</code>           \u2013            <p>Django settings for server project.</p> </li> <li> <code>confluence</code>           \u2013            </li> <li> <code>jira_app</code>           \u2013            </li> <li> <code>logging</code>           \u2013            </li> <li> <code>pagerduty</code>           \u2013            </li> <li> <code>raid</code>           \u2013            </li> <li> <code>slack</code>           \u2013            </li> </ul>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.api","title":"api","text":"<p>Attributes:</p> <ul> <li> <code>DRF_STANDARDIZED_ERRORS</code>           \u2013            <p>Additional servers to add to the OpenAPI schema</p> </li> </ul>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.api.DRF_STANDARDIZED_ERRORS","title":"DRF_STANDARDIZED_ERRORS  <code>module-attribute</code>","text":"<pre><code>DRF_STANDARDIZED_ERRORS = {'ALLOWED_ERROR_STATUS_CODES': ['400', '401', '403', '404', '429', '500']}\n</code></pre> <p>Additional servers to add to the OpenAPI schema</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.celery","title":"celery","text":"<p>Celery settings definition.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.common","title":"common","text":"<p>Django settings for server project.</p> <p>For more information on this file, see https://docs.djangoproject.com/en/4.2/topics/settings/</p> <p>For the full list of settings and their config, see https://docs.djangoproject.com/en/4.2/ref/settings/</p> <p>Attributes:</p> <ul> <li> <code>FF_DEBUG_ERROR_PAGES</code>               (<code>bool</code>)           \u2013            <p>Add routes to display error pages. Useful for debugging.</p> </li> <li> <code>FF_EXPOSE_API_DOCS</code>               (<code>bool</code>)           \u2013            <p>Expose the API documentation. Useful for debugging. Can be a security issue.</p> </li> <li> <code>FF_HTTP_CLIENT_ADDITIONAL_HEADERS</code>               (<code>dict[str, Any] | None</code>)           \u2013            <p>Additional headers to send with every HTTP request made using our HttpClient. Useful for global auth, or adding a specific User-Agent.</p> </li> <li> <code>FF_OVERRIDE_MENUS_CREATION</code>               (<code>Callable[[], None] | None</code>)           \u2013            <p>Override the default menus creation. Useful for custom menus.</p> </li> <li> <code>FF_ROLE_REMINDER_MIN_DAYS_INTERVAL</code>           \u2013            <p>Number of days between role explanation/reminders, for each role. -1 disable the messages, and 0 will send the message everytime.</p> </li> <li> <code>FF_SKIP_SECRET_KEY_CHECK</code>               (<code>bool</code>)           \u2013            <p>Skip the SECRET_KEY check. Make sure to set a strong SECRET_KEY in production.</p> </li> <li> <code>FF_USER_ID_HEADER</code>               (<code>str</code>)           \u2013            <p>Header name to add to every HTTP request made using our HttpClient. Useful for logging.</p> </li> </ul>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.common.FF_DEBUG_ERROR_PAGES","title":"FF_DEBUG_ERROR_PAGES  <code>module-attribute</code>","text":"<pre><code>FF_DEBUG_ERROR_PAGES: bool = config('FF_DEBUG_ERROR_PAGES', default=False, cast=bool)\n</code></pre> <p>Add routes to display error pages. Useful for debugging.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.common.FF_EXPOSE_API_DOCS","title":"FF_EXPOSE_API_DOCS  <code>module-attribute</code>","text":"<pre><code>FF_EXPOSE_API_DOCS: bool = config('FF_EXPOSE_API_DOCS', default=False, cast=bool)\n</code></pre> <p>Expose the API documentation. Useful for debugging. Can be a security issue.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.common.FF_HTTP_CLIENT_ADDITIONAL_HEADERS","title":"FF_HTTP_CLIENT_ADDITIONAL_HEADERS  <code>module-attribute</code>","text":"<pre><code>FF_HTTP_CLIENT_ADDITIONAL_HEADERS: dict[str, Any] | None = None\n</code></pre> <p>Additional headers to send with every HTTP request made using our HttpClient. Useful for global auth, or adding a specific User-Agent.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.common.FF_OVERRIDE_MENUS_CREATION","title":"FF_OVERRIDE_MENUS_CREATION  <code>module-attribute</code>","text":"<pre><code>FF_OVERRIDE_MENUS_CREATION: Callable[[], None] | None = None\n</code></pre> <p>Override the default menus creation. Useful for custom menus.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.common.FF_ROLE_REMINDER_MIN_DAYS_INTERVAL","title":"FF_ROLE_REMINDER_MIN_DAYS_INTERVAL  <code>module-attribute</code>","text":"<pre><code>FF_ROLE_REMINDER_MIN_DAYS_INTERVAL = config('FF_ROLE_REMINDER_MIN_DAYS_INTERVAL', default=90, cast=int)\n</code></pre> <p>Number of days between role explanation/reminders, for each role. -1 disable the messages, and 0 will send the message everytime.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.common.FF_SKIP_SECRET_KEY_CHECK","title":"FF_SKIP_SECRET_KEY_CHECK  <code>module-attribute</code>","text":"<pre><code>FF_SKIP_SECRET_KEY_CHECK: bool = config('FF_SKIP_SECRET_KEY_CHECK', default=False, cast=bool)\n</code></pre> <p>Skip the SECRET_KEY check. Make sure to set a strong SECRET_KEY in production.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.common.FF_USER_ID_HEADER","title":"FF_USER_ID_HEADER  <code>module-attribute</code>","text":"<pre><code>FF_USER_ID_HEADER: str = 'FF-User-Id'\n</code></pre> <p>Header name to add to every HTTP request made using our HttpClient. Useful for logging.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.confluence","title":"confluence","text":"<p>Attributes:</p> <ul> <li> <code>CONFLUENCE_API_KEY</code>               (<code>str</code>)           \u2013            <p>The Confluence API key to use.</p> </li> <li> <code>CONFLUENCE_ON_CALL_PAGE_ID</code>               (<code>int | None</code>)           \u2013            <p>The Confluence page ID where to export the current on-call schedule. If not set, export tasks will be skipped.</p> </li> <li> <code>CONFLUENCE_POSTMORTEM_FOLDER_ID</code>               (<code>int</code>)           \u2013            <p>The Confluence page ID  where to create and nest postmortems.</p> </li> <li> <code>CONFLUENCE_POSTMORTEM_SPACE</code>               (<code>str</code>)           \u2013            <p>XXX To rename CONFLUENCE_DEFAULT_SPACE. The Confluence space where to create pages by default, mainly for postmortems.</p> </li> <li> <code>CONFLUENCE_POSTMORTEM_TEMPLATE_PAGE_ID</code>               (<code>int</code>)           \u2013            <p>The Confluence page ID of the template to use for postmortems.</p> </li> <li> <code>CONFLUENCE_RUNBOOKS_FOLDER_ID</code>               (<code>int</code>)           \u2013            <p>The Confluence page ID where runbooks are stored.</p> </li> <li> <code>CONFLUENCE_URL</code>               (<code>str</code>)           \u2013            <p>The Confluence URL to use. If no protocol is defined, https will be used.</p> </li> <li> <code>CONFLUENCE_USERNAME</code>               (<code>str</code>)           \u2013            <p>The Confluence username to use.</p> </li> <li> <code>ENABLE_CONFLUENCE</code>           \u2013            <p>Enable the Confluence app.</p> </li> </ul>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.confluence.CONFLUENCE_API_KEY","title":"CONFLUENCE_API_KEY  <code>module-attribute</code>","text":"<pre><code>CONFLUENCE_API_KEY: str = config('CONFLUENCE_API_KEY')\n</code></pre> <p>The Confluence API key to use.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.confluence.CONFLUENCE_ON_CALL_PAGE_ID","title":"CONFLUENCE_ON_CALL_PAGE_ID  <code>module-attribute</code>","text":"<pre><code>CONFLUENCE_ON_CALL_PAGE_ID: int | None = config('CONFLUENCE_ON_CALL_PAGE_ID', cast=int, default=None)\n</code></pre> <p>The Confluence page ID where to export the current on-call schedule. If not set, export tasks will be skipped.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.confluence.CONFLUENCE_POSTMORTEM_FOLDER_ID","title":"CONFLUENCE_POSTMORTEM_FOLDER_ID  <code>module-attribute</code>","text":"<pre><code>CONFLUENCE_POSTMORTEM_FOLDER_ID: int = config('CONFLUENCE_POSTMORTEM_FOLDER_ID', cast=int)\n</code></pre> <p>The Confluence page ID  where to create and nest postmortems.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.confluence.CONFLUENCE_POSTMORTEM_SPACE","title":"CONFLUENCE_POSTMORTEM_SPACE  <code>module-attribute</code>","text":"<pre><code>CONFLUENCE_POSTMORTEM_SPACE: str = config('CONFLUENCE_POSTMORTEM_SPACE')\n</code></pre> <p>XXX To rename CONFLUENCE_DEFAULT_SPACE. The Confluence space where to create pages by default, mainly for postmortems.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.confluence.CONFLUENCE_POSTMORTEM_TEMPLATE_PAGE_ID","title":"CONFLUENCE_POSTMORTEM_TEMPLATE_PAGE_ID  <code>module-attribute</code>","text":"<pre><code>CONFLUENCE_POSTMORTEM_TEMPLATE_PAGE_ID: int = config('CONFLUENCE_POSTMORTEM_TEMPLATE_PAGE_ID', cast=int)\n</code></pre> <p>The Confluence page ID of the template to use for postmortems.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.confluence.CONFLUENCE_RUNBOOKS_FOLDER_ID","title":"CONFLUENCE_RUNBOOKS_FOLDER_ID  <code>module-attribute</code>","text":"<pre><code>CONFLUENCE_RUNBOOKS_FOLDER_ID: int = config('CONFLUENCE_RUNBOOKS_FOLDER_ID', cast=int)\n</code></pre> <p>The Confluence page ID where runbooks are stored.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.confluence.CONFLUENCE_URL","title":"CONFLUENCE_URL  <code>module-attribute</code>","text":"<pre><code>CONFLUENCE_URL: str = config('CONFLUENCE_URL')\n</code></pre> <p>The Confluence URL to use. If no protocol is defined, https will be used.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.confluence.CONFLUENCE_USERNAME","title":"CONFLUENCE_USERNAME  <code>module-attribute</code>","text":"<pre><code>CONFLUENCE_USERNAME: str = config('CONFLUENCE_USERNAME')\n</code></pre> <p>The Confluence username to use.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.confluence.ENABLE_CONFLUENCE","title":"ENABLE_CONFLUENCE  <code>module-attribute</code>","text":"<pre><code>ENABLE_CONFLUENCE = config('ENABLE_CONFLUENCE', cast=bool, default=False)\n</code></pre> <p>Enable the Confluence app.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.jira_app","title":"jira_app","text":"<p>Attributes:</p> <ul> <li> <code>ENABLE_JIRA</code>               (<code>bool</code>)           \u2013            <p>Enable the Jira app.</p> </li> <li> <code>RAID_JIRA_API_PASSWORD</code>               (<code>str</code>)           \u2013            <p>The Jira API password to use.</p> </li> <li> <code>RAID_JIRA_API_URL</code>               (<code>str</code>)           \u2013            <p>The Jira API URL to use. If no protocol is defined, https will be used.</p> </li> <li> <code>RAID_JIRA_API_USER</code>               (<code>str</code>)           \u2013            <p>The Jira API user to use.</p> </li> </ul>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.jira_app.ENABLE_JIRA","title":"ENABLE_JIRA  <code>module-attribute</code>","text":"<pre><code>ENABLE_JIRA: bool = config('ENABLE_JIRA', cast=bool, default=False)\n</code></pre> <p>Enable the Jira app.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.jira_app.RAID_JIRA_API_PASSWORD","title":"RAID_JIRA_API_PASSWORD  <code>module-attribute</code>","text":"<pre><code>RAID_JIRA_API_PASSWORD: str = config('RAID_JIRA_API_PASSWORD')\n</code></pre> <p>The Jira API password to use.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.jira_app.RAID_JIRA_API_URL","title":"RAID_JIRA_API_URL  <code>module-attribute</code>","text":"<pre><code>RAID_JIRA_API_URL: str = config('RAID_JIRA_API_URL')\n</code></pre> <p>The Jira API URL to use. If no protocol is defined, https will be used.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.jira_app.RAID_JIRA_API_USER","title":"RAID_JIRA_API_USER  <code>module-attribute</code>","text":"<pre><code>RAID_JIRA_API_USER: str = config('RAID_JIRA_API_USER')\n</code></pre> <p>The Jira API user to use.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.logging","title":"logging","text":"<p>Classes:</p> <ul> <li> <code>AccessLogFilter</code>           \u2013            <p>Filter Gunicorn.access logs to avoid logging static files and healthcheck requests logging.</p> </li> </ul>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.logging.AccessLogFilter","title":"AccessLogFilter","text":"<p>               Bases: <code>Filter</code></p> <p>Filter Gunicorn.access logs to avoid logging static files and healthcheck requests logging.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.pagerduty","title":"pagerduty","text":"<p>Attributes:</p> <ul> <li> <code>ENABLE_PAGERDUTY</code>               (<code>bool</code>)           \u2013            <p>Enable PagerDuty integration.</p> </li> <li> <code>PAGERDUTY_ACCOUNT_EMAIL</code>               (<code>str</code>)           \u2013            <p>PagerDuty account email, linked to the API key.</p> </li> <li> <code>PAGERDUTY_API_KEY</code>               (<code>str</code>)           \u2013            <p>PagerDuty API key.</p> </li> <li> <code>PAGERDUTY_URL</code>               (<code>str</code>)           \u2013            <p>PagerDuty API URL.</p> </li> </ul>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.pagerduty.ENABLE_PAGERDUTY","title":"ENABLE_PAGERDUTY  <code>module-attribute</code>","text":"<pre><code>ENABLE_PAGERDUTY: bool = config('ENABLE_PAGERDUTY', cast=bool, default=False)\n</code></pre> <p>Enable PagerDuty integration.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.pagerduty.PAGERDUTY_ACCOUNT_EMAIL","title":"PAGERDUTY_ACCOUNT_EMAIL  <code>module-attribute</code>","text":"<pre><code>PAGERDUTY_ACCOUNT_EMAIL: str = config('PAGERDUTY_ACCOUNT_EMAIL')\n</code></pre> <p>PagerDuty account email, linked to the API key.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.pagerduty.PAGERDUTY_API_KEY","title":"PAGERDUTY_API_KEY  <code>module-attribute</code>","text":"<pre><code>PAGERDUTY_API_KEY: str = config('PAGERDUTY_API_KEY')\n</code></pre> <p>PagerDuty API key.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.pagerduty.PAGERDUTY_URL","title":"PAGERDUTY_URL  <code>module-attribute</code>","text":"<pre><code>PAGERDUTY_URL: str = config('PAGERDUTY_URL', default='https://api.pagerduty.com')\n</code></pre> <p>PagerDuty API URL.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.raid","title":"raid","text":"<p>Attributes:</p> <ul> <li> <code>ENABLE_RAID</code>               (<code>bool</code>)           \u2013            <p>Enable the Raid app. Jira app must be enabled and configured as well.</p> </li> <li> <code>RAID_DEFAULT_JIRA_QRAFT_USER_ID</code>               (<code>str</code>)           \u2013            <p>The default Jira user ID to use for creating issues</p> </li> <li> <code>RAID_JIRA_INCIDENT_CATEGORY_FIELD</code>               (<code>str</code>)           \u2013            <p>Jira custom field ID for incident category (e.g. 'customfield_12345')</p> </li> <li> <code>RAID_JIRA_PROJECT_KEY</code>               (<code>str</code>)           \u2013            <p>The Jira project key to use for creating issues, e.g. 'INC'</p> </li> <li> <code>RAID_JIRA_USER_IDS</code>               (<code>dict[str, str]</code>)           \u2013            <p>Mapping of domain to default Jira user ID</p> </li> <li> <code>RAID_TOOLBOX_URL</code>               (<code>str</code>)           \u2013            <p>Toolbox URL</p> </li> </ul>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.raid.ENABLE_RAID","title":"ENABLE_RAID  <code>module-attribute</code>","text":"<pre><code>ENABLE_RAID: bool = config('ENABLE_RAID', cast=bool, default=False)\n</code></pre> <p>Enable the Raid app. Jira app must be enabled and configured as well.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.raid.RAID_DEFAULT_JIRA_QRAFT_USER_ID","title":"RAID_DEFAULT_JIRA_QRAFT_USER_ID  <code>module-attribute</code>","text":"<pre><code>RAID_DEFAULT_JIRA_QRAFT_USER_ID: str = config('RAID_DEFAULT_JIRA_QRAFT_USER_ID')\n</code></pre> <p>The default Jira user ID to use for creating issues</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.raid.RAID_JIRA_INCIDENT_CATEGORY_FIELD","title":"RAID_JIRA_INCIDENT_CATEGORY_FIELD  <code>module-attribute</code>","text":"<pre><code>RAID_JIRA_INCIDENT_CATEGORY_FIELD: str = config('RAID_JIRA_INCIDENT_CATEGORY_FIELD', default='')\n</code></pre> <p>Jira custom field ID for incident category (e.g. 'customfield_12345')</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.raid.RAID_JIRA_PROJECT_KEY","title":"RAID_JIRA_PROJECT_KEY  <code>module-attribute</code>","text":"<pre><code>RAID_JIRA_PROJECT_KEY: str = config('RAID_JIRA_PROJECT_KEY')\n</code></pre> <p>The Jira project key to use for creating issues, e.g. 'INC'</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.raid.RAID_JIRA_USER_IDS","title":"RAID_JIRA_USER_IDS  <code>module-attribute</code>","text":"<pre><code>RAID_JIRA_USER_IDS: dict[str, str] = {}\n</code></pre> <p>Mapping of domain to default Jira user ID</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.raid.RAID_TOOLBOX_URL","title":"RAID_TOOLBOX_URL  <code>module-attribute</code>","text":"<pre><code>RAID_TOOLBOX_URL: str = config('RAID_TOOLBOX_URL')\n</code></pre> <p>Toolbox URL</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.slack","title":"slack","text":"<p>Attributes:</p> <ul> <li> <code>FF_SLACK_SKIP_CHECKS</code>               (<code>bool</code>)           \u2013            <p>Skip Slack checks. Only use for testing or demo.</p> </li> <li> <code>SLACK_APP_EMOJI</code>               (<code>str</code>)           \u2013            <p>Emoji to represent the app in Slack surfaces. Can be an actual emoji, or a string for a custom emoji present in your Workspace, like \":incident_logo:\".</p> </li> <li> <code>SLACK_BOT_TOKEN</code>               (<code>str</code>)           \u2013            <p>The Slack bot token to use.</p> </li> <li> <code>SLACK_EMERGENCY_COMMUNICATION_GUIDE_URL</code>               (<code>str | None</code>)           \u2013            <p>URL to add in the Slack emergency message. Useful to point to your own documentation.</p> </li> <li> <code>SLACK_EMERGENCY_USERGROUP_ID</code>               (<code>str | None</code>)           \u2013            <p>The Slack usergroup ID to use for emergency notifications. If not set, no group will be mentionned in the message.</p> </li> <li> <code>SLACK_INCIDENT_COMMAND</code>               (<code>str</code>)           \u2013            <p>The Slack slash command to use to create and manage incidents.</p> </li> <li> <code>SLACK_INCIDENT_COMMAND_ALIASES</code>               (<code>list[str]</code>)           \u2013            <p>Comma-separated list of aliases for the incident command.</p> </li> <li> <code>SLACK_INCIDENT_HELP_GUIDE_URL</code>               (<code>str | None</code>)           \u2013            <p>URL to add in the Slack help message (/incident help). Useful to point to your own documentation.</p> </li> <li> <code>SLACK_POSTMORTEM_HELP_URL</code>               (<code>str | None</code>)           \u2013            <p>URL to a guide on how to write a postmortem. Useful to point to your own documentation.</p> </li> <li> <code>SLACK_SEVERITY_HELP_GUIDE_URL</code>               (<code>str | None</code>)           \u2013            <p>URL to add in the form to choose the priority. Useful to point to your own documentation.</p> </li> <li> <code>SLACK_SIGNING_SECRET</code>               (<code>str</code>)           \u2013            <p>The Slack signing secret to use.</p> </li> </ul>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.slack.FF_SLACK_SKIP_CHECKS","title":"FF_SLACK_SKIP_CHECKS  <code>module-attribute</code>","text":"<pre><code>FF_SLACK_SKIP_CHECKS: bool = config('FF_SLACK_SKIP_CHECKS', cast=bool, default=_is_default_skip_check_cmd)\n</code></pre> <p>Skip Slack checks. Only use for testing or demo.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.slack.SLACK_APP_EMOJI","title":"SLACK_APP_EMOJI  <code>module-attribute</code>","text":"<pre><code>SLACK_APP_EMOJI: str = config('SLACK_APP_EMOJI', default=':fire_extinguisher:')\n</code></pre> <p>Emoji to represent the app in Slack surfaces. Can be an actual emoji, or a string for a custom emoji present in your Workspace, like \":incident_logo:\".</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.slack.SLACK_BOT_TOKEN","title":"SLACK_BOT_TOKEN  <code>module-attribute</code>","text":"<pre><code>SLACK_BOT_TOKEN: str = config('SLACK_BOT_TOKEN')\n</code></pre> <p>The Slack bot token to use.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.slack.SLACK_EMERGENCY_COMMUNICATION_GUIDE_URL","title":"SLACK_EMERGENCY_COMMUNICATION_GUIDE_URL  <code>module-attribute</code>","text":"<pre><code>SLACK_EMERGENCY_COMMUNICATION_GUIDE_URL: str | None = config('SLACK_EMERGENCY_COMMUNICATION_GUIDE_URL', default=None)\n</code></pre> <p>URL to add in the Slack emergency message. Useful to point to your own documentation.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.slack.SLACK_EMERGENCY_USERGROUP_ID","title":"SLACK_EMERGENCY_USERGROUP_ID  <code>module-attribute</code>","text":"<pre><code>SLACK_EMERGENCY_USERGROUP_ID: str | None = config('SLACK_EMERGENCY_USERGROUP_ID', default=None)\n</code></pre> <p>The Slack usergroup ID to use for emergency notifications. If not set, no group will be mentionned in the message.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.slack.SLACK_INCIDENT_COMMAND","title":"SLACK_INCIDENT_COMMAND  <code>module-attribute</code>","text":"<pre><code>SLACK_INCIDENT_COMMAND: str = config('SLACK_INCIDENT_COMMAND', default='/incident')\n</code></pre> <p>The Slack slash command to use to create and manage incidents.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.slack.SLACK_INCIDENT_COMMAND_ALIASES","title":"SLACK_INCIDENT_COMMAND_ALIASES  <code>module-attribute</code>","text":"<pre><code>SLACK_INCIDENT_COMMAND_ALIASES: list[str] = config('SLACK_INCIDENT_COMMAND_ALIASES', cast=Csv(), default='')\n</code></pre> <p>Comma-separated list of aliases for the incident command.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.slack.SLACK_INCIDENT_HELP_GUIDE_URL","title":"SLACK_INCIDENT_HELP_GUIDE_URL  <code>module-attribute</code>","text":"<pre><code>SLACK_INCIDENT_HELP_GUIDE_URL: str | None = config('SLACK_INCIDENT_HELP_GUIDE_URL', default=None)\n</code></pre> <p>URL to add in the Slack help message (/incident help). Useful to point to your own documentation.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.slack.SLACK_POSTMORTEM_HELP_URL","title":"SLACK_POSTMORTEM_HELP_URL  <code>module-attribute</code>","text":"<pre><code>SLACK_POSTMORTEM_HELP_URL: str | None = config('SLACK_POSTMORTEM_HELP_URL', default=None)\n</code></pre> <p>URL to a guide on how to write a postmortem. Useful to point to your own documentation.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.slack.SLACK_SEVERITY_HELP_GUIDE_URL","title":"SLACK_SEVERITY_HELP_GUIDE_URL  <code>module-attribute</code>","text":"<pre><code>SLACK_SEVERITY_HELP_GUIDE_URL: str | None = config('SLACK_SEVERITY_HELP_GUIDE_URL', default=None)\n</code></pre> <p>URL to add in the form to choose the priority. Useful to point to your own documentation.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.components.slack.SLACK_SIGNING_SECRET","title":"SLACK_SIGNING_SECRET  <code>module-attribute</code>","text":"<pre><code>SLACK_SIGNING_SECRET: str = config('SLACK_SIGNING_SECRET')\n</code></pre> <p>The Slack signing secret to use.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.environments","title":"environments","text":"<p>Overriding settings based on the environment.</p> <p>Modules:</p> <ul> <li> <code>dev</code>           \u2013            <p>This file contains all the settings that defines the development server.</p> </li> <li> <code>prod</code>           \u2013            <p>This file contains all the settings used in production environments.</p> </li> </ul>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.environments.dev","title":"dev","text":"<p>This file contains all the settings that defines the development server.</p> <p>SECURITY WARNING: don't run with debug turned on in production!</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.environments.prod","title":"prod","text":"<p>This file contains all the settings used in production environments.</p> <p>This file is required and if <code>ENV=dev</code> these values are not used.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder","title":"settings_builder","text":"<p>Classes:</p> <ul> <li> <code>AccessLogFilter</code>           \u2013            <p>Filter Gunicorn.access logs to avoid logging static files and healthcheck requests logging.</p> </li> <li> <code>CustomJsonFormatter</code>           \u2013            <p>Custom JSON formatter for Python loggin, with Datadog specific attributes.</p> </li> <li> <code>PrettyFormatter</code>           \u2013            <p>A custom logging formatter that formats log records with colors and a pretty output, for local development.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>APP_DISPLAY_NAME</code>               (<code>str</code>)           \u2013            <p>The name of the app. Used in the title of the app, and in the navigation bar.</p> </li> <li> <code>BASE_URL</code>               (<code>str</code>)           \u2013            <p>The base URL of the app. Used for links in externals surfaces, like Slack or documents.</p> </li> <li> <code>CONFLUENCE_API_KEY</code>               (<code>str</code>)           \u2013            <p>The Confluence API key to use.</p> </li> <li> <code>CONFLUENCE_ON_CALL_PAGE_ID</code>               (<code>int | None</code>)           \u2013            <p>The Confluence page ID where to export the current on-call schedule. If not set, export tasks will be skipped.</p> </li> <li> <code>CONFLUENCE_POSTMORTEM_FOLDER_ID</code>               (<code>int</code>)           \u2013            <p>The Confluence page ID  where to create and nest postmortems.</p> </li> <li> <code>CONFLUENCE_POSTMORTEM_SPACE</code>               (<code>str</code>)           \u2013            <p>XXX To rename CONFLUENCE_DEFAULT_SPACE. The Confluence space where to create pages by default, mainly for postmortems.</p> </li> <li> <code>CONFLUENCE_POSTMORTEM_TEMPLATE_PAGE_ID</code>               (<code>int</code>)           \u2013            <p>The Confluence page ID of the template to use for postmortems.</p> </li> <li> <code>CONFLUENCE_RUNBOOKS_FOLDER_ID</code>               (<code>int</code>)           \u2013            <p>The Confluence page ID where runbooks are stored.</p> </li> <li> <code>CONFLUENCE_URL</code>               (<code>str</code>)           \u2013            <p>The Confluence URL to use. If no protocol is defined, https will be used.</p> </li> <li> <code>CONFLUENCE_USERNAME</code>               (<code>str</code>)           \u2013            <p>The Confluence username to use.</p> </li> <li> <code>DRF_STANDARDIZED_ERRORS</code>           \u2013            <p>Additional servers to add to the OpenAPI schema</p> </li> <li> <code>ENABLE_CONFLUENCE</code>           \u2013            <p>Enable the Confluence app.</p> </li> <li> <code>ENABLE_JIRA</code>               (<code>bool</code>)           \u2013            <p>Enable the Jira app.</p> </li> <li> <code>ENABLE_PAGERDUTY</code>               (<code>bool</code>)           \u2013            <p>Enable PagerDuty integration.</p> </li> <li> <code>ENABLE_RAID</code>               (<code>bool</code>)           \u2013            <p>Enable the Raid app. Jira app must be enabled and configured as well.</p> </li> <li> <code>FF_HTTP_CLIENT_ADDITIONAL_HEADERS</code>               (<code>dict[str, Any] | None</code>)           \u2013            <p>Additional headers to send with every HTTP request made using our HttpClient. Useful for global auth, or adding a specific User-Agent.</p> </li> <li> <code>FF_OVERRIDE_MENUS_CREATION</code>               (<code>Callable[[], None] | None</code>)           \u2013            <p>Override the default menus creation. Useful for custom menus.</p> </li> <li> <code>FF_ROLE_REMINDER_MIN_DAYS_INTERVAL</code>           \u2013            <p>Number of days between role explanation/reminders, for each role. -1 disable the messages, and 0 will send the message everytime.</p> </li> <li> <code>FF_SKIP_SECRET_KEY_CHECK</code>               (<code>bool</code>)           \u2013            <p>Skip the SECRET_KEY check. Make sure to set a strong SECRET_KEY in production.</p> </li> <li> <code>FF_SLACK_SKIP_CHECKS</code>               (<code>bool</code>)           \u2013            <p>Skip Slack checks. Only use for testing or demo.</p> </li> <li> <code>FF_USER_ID_HEADER</code>               (<code>str</code>)           \u2013            <p>Header name to add to every HTTP request made using our HttpClient. Useful for logging.</p> </li> <li> <code>PAGERDUTY_ACCOUNT_EMAIL</code>               (<code>str</code>)           \u2013            <p>PagerDuty account email, linked to the API key.</p> </li> <li> <code>PAGERDUTY_API_KEY</code>               (<code>str</code>)           \u2013            <p>PagerDuty API key.</p> </li> <li> <code>PAGERDUTY_URL</code>               (<code>str</code>)           \u2013            <p>PagerDuty API URL.</p> </li> <li> <code>RAID_DEFAULT_JIRA_QRAFT_USER_ID</code>               (<code>str</code>)           \u2013            <p>The default Jira user ID to use for creating issues</p> </li> <li> <code>RAID_JIRA_API_PASSWORD</code>               (<code>str</code>)           \u2013            <p>The Jira API password to use.</p> </li> <li> <code>RAID_JIRA_API_URL</code>               (<code>str</code>)           \u2013            <p>The Jira API URL to use. If no protocol is defined, https will be used.</p> </li> <li> <code>RAID_JIRA_API_USER</code>               (<code>str</code>)           \u2013            <p>The Jira API user to use.</p> </li> <li> <code>RAID_JIRA_INCIDENT_CATEGORY_FIELD</code>               (<code>str</code>)           \u2013            <p>Jira custom field ID for incident category (e.g. 'customfield_12345')</p> </li> <li> <code>RAID_JIRA_PROJECT_KEY</code>               (<code>str</code>)           \u2013            <p>The Jira project key to use for creating issues, e.g. 'INC'</p> </li> <li> <code>RAID_JIRA_USER_IDS</code>               (<code>dict[str, str]</code>)           \u2013            <p>Mapping of domain to default Jira user ID</p> </li> <li> <code>RAID_TOOLBOX_URL</code>               (<code>str</code>)           \u2013            <p>Toolbox URL</p> </li> <li> <code>SLACK_APP_EMOJI</code>               (<code>str</code>)           \u2013            <p>Emoji to represent the app in Slack surfaces. Can be an actual emoji, or a string for a custom emoji present in your Workspace, like \":incident_logo:\".</p> </li> <li> <code>SLACK_BOT_TOKEN</code>               (<code>str</code>)           \u2013            <p>The Slack bot token to use.</p> </li> <li> <code>SLACK_EMERGENCY_COMMUNICATION_GUIDE_URL</code>               (<code>str | None</code>)           \u2013            <p>URL to add in the Slack emergency message. Useful to point to your own documentation.</p> </li> <li> <code>SLACK_EMERGENCY_USERGROUP_ID</code>               (<code>str | None</code>)           \u2013            <p>The Slack usergroup ID to use for emergency notifications. If not set, no group will be mentionned in the message.</p> </li> <li> <code>SLACK_INCIDENT_COMMAND</code>               (<code>str</code>)           \u2013            <p>The Slack slash command to use to create and manage incidents.</p> </li> <li> <code>SLACK_INCIDENT_COMMAND_ALIASES</code>               (<code>list[str]</code>)           \u2013            <p>Comma-separated list of aliases for the incident command.</p> </li> <li> <code>SLACK_INCIDENT_HELP_GUIDE_URL</code>               (<code>str | None</code>)           \u2013            <p>URL to add in the Slack help message (/incident help). Useful to point to your own documentation.</p> </li> <li> <code>SLACK_POSTMORTEM_HELP_URL</code>               (<code>str | None</code>)           \u2013            <p>URL to a guide on how to write a postmortem. Useful to point to your own documentation.</p> </li> <li> <code>SLACK_SEVERITY_HELP_GUIDE_URL</code>               (<code>str | None</code>)           \u2013            <p>URL to add in the form to choose the priority. Useful to point to your own documentation.</p> </li> <li> <code>SLACK_SIGNING_SECRET</code>               (<code>str</code>)           \u2013            <p>The Slack signing secret to use.</p> </li> </ul>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.APP_DISPLAY_NAME","title":"APP_DISPLAY_NAME  <code>module-attribute</code>","text":"<pre><code>APP_DISPLAY_NAME: str = config('APP_DISPLAY_NAME', default='FireFighter')\n</code></pre> <p>The name of the app. Used in the title of the app, and in the navigation bar.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.BASE_URL","title":"BASE_URL  <code>module-attribute</code>","text":"<pre><code>BASE_URL: str = config('BASE_URL')\n</code></pre> <p>The base URL of the app. Used for links in externals surfaces, like Slack or documents.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.CONFLUENCE_API_KEY","title":"CONFLUENCE_API_KEY  <code>module-attribute</code>","text":"<pre><code>CONFLUENCE_API_KEY: str = config('CONFLUENCE_API_KEY')\n</code></pre> <p>The Confluence API key to use.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.CONFLUENCE_ON_CALL_PAGE_ID","title":"CONFLUENCE_ON_CALL_PAGE_ID  <code>module-attribute</code>","text":"<pre><code>CONFLUENCE_ON_CALL_PAGE_ID: int | None = config('CONFLUENCE_ON_CALL_PAGE_ID', cast=int, default=None)\n</code></pre> <p>The Confluence page ID where to export the current on-call schedule. If not set, export tasks will be skipped.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.CONFLUENCE_POSTMORTEM_FOLDER_ID","title":"CONFLUENCE_POSTMORTEM_FOLDER_ID  <code>module-attribute</code>","text":"<pre><code>CONFLUENCE_POSTMORTEM_FOLDER_ID: int = config('CONFLUENCE_POSTMORTEM_FOLDER_ID', cast=int)\n</code></pre> <p>The Confluence page ID  where to create and nest postmortems.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.CONFLUENCE_POSTMORTEM_SPACE","title":"CONFLUENCE_POSTMORTEM_SPACE  <code>module-attribute</code>","text":"<pre><code>CONFLUENCE_POSTMORTEM_SPACE: str = config('CONFLUENCE_POSTMORTEM_SPACE')\n</code></pre> <p>XXX To rename CONFLUENCE_DEFAULT_SPACE. The Confluence space where to create pages by default, mainly for postmortems.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.CONFLUENCE_POSTMORTEM_TEMPLATE_PAGE_ID","title":"CONFLUENCE_POSTMORTEM_TEMPLATE_PAGE_ID  <code>module-attribute</code>","text":"<pre><code>CONFLUENCE_POSTMORTEM_TEMPLATE_PAGE_ID: int = config('CONFLUENCE_POSTMORTEM_TEMPLATE_PAGE_ID', cast=int)\n</code></pre> <p>The Confluence page ID of the template to use for postmortems.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.CONFLUENCE_RUNBOOKS_FOLDER_ID","title":"CONFLUENCE_RUNBOOKS_FOLDER_ID  <code>module-attribute</code>","text":"<pre><code>CONFLUENCE_RUNBOOKS_FOLDER_ID: int = config('CONFLUENCE_RUNBOOKS_FOLDER_ID', cast=int)\n</code></pre> <p>The Confluence page ID where runbooks are stored.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.CONFLUENCE_URL","title":"CONFLUENCE_URL  <code>module-attribute</code>","text":"<pre><code>CONFLUENCE_URL: str = config('CONFLUENCE_URL')\n</code></pre> <p>The Confluence URL to use. If no protocol is defined, https will be used.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.CONFLUENCE_USERNAME","title":"CONFLUENCE_USERNAME  <code>module-attribute</code>","text":"<pre><code>CONFLUENCE_USERNAME: str = config('CONFLUENCE_USERNAME')\n</code></pre> <p>The Confluence username to use.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.DRF_STANDARDIZED_ERRORS","title":"DRF_STANDARDIZED_ERRORS  <code>module-attribute</code>","text":"<pre><code>DRF_STANDARDIZED_ERRORS = {'ALLOWED_ERROR_STATUS_CODES': ['400', '401', '403', '404', '429', '500']}\n</code></pre> <p>Additional servers to add to the OpenAPI schema</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.ENABLE_CONFLUENCE","title":"ENABLE_CONFLUENCE  <code>module-attribute</code>","text":"<pre><code>ENABLE_CONFLUENCE = config('ENABLE_CONFLUENCE', cast=bool, default=False)\n</code></pre> <p>Enable the Confluence app.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.ENABLE_JIRA","title":"ENABLE_JIRA  <code>module-attribute</code>","text":"<pre><code>ENABLE_JIRA: bool = config('ENABLE_JIRA', cast=bool, default=False)\n</code></pre> <p>Enable the Jira app.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.ENABLE_PAGERDUTY","title":"ENABLE_PAGERDUTY  <code>module-attribute</code>","text":"<pre><code>ENABLE_PAGERDUTY: bool = config('ENABLE_PAGERDUTY', cast=bool, default=False)\n</code></pre> <p>Enable PagerDuty integration.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.ENABLE_RAID","title":"ENABLE_RAID  <code>module-attribute</code>","text":"<pre><code>ENABLE_RAID: bool = config('ENABLE_RAID', cast=bool, default=False)\n</code></pre> <p>Enable the Raid app. Jira app must be enabled and configured as well.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.FF_HTTP_CLIENT_ADDITIONAL_HEADERS","title":"FF_HTTP_CLIENT_ADDITIONAL_HEADERS  <code>module-attribute</code>","text":"<pre><code>FF_HTTP_CLIENT_ADDITIONAL_HEADERS: dict[str, Any] | None = None\n</code></pre> <p>Additional headers to send with every HTTP request made using our HttpClient. Useful for global auth, or adding a specific User-Agent.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.FF_OVERRIDE_MENUS_CREATION","title":"FF_OVERRIDE_MENUS_CREATION  <code>module-attribute</code>","text":"<pre><code>FF_OVERRIDE_MENUS_CREATION: Callable[[], None] | None = None\n</code></pre> <p>Override the default menus creation. Useful for custom menus.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.FF_ROLE_REMINDER_MIN_DAYS_INTERVAL","title":"FF_ROLE_REMINDER_MIN_DAYS_INTERVAL  <code>module-attribute</code>","text":"<pre><code>FF_ROLE_REMINDER_MIN_DAYS_INTERVAL = config('FF_ROLE_REMINDER_MIN_DAYS_INTERVAL', default=90, cast=int)\n</code></pre> <p>Number of days between role explanation/reminders, for each role. -1 disable the messages, and 0 will send the message everytime.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.FF_SKIP_SECRET_KEY_CHECK","title":"FF_SKIP_SECRET_KEY_CHECK  <code>module-attribute</code>","text":"<pre><code>FF_SKIP_SECRET_KEY_CHECK: bool = config('FF_SKIP_SECRET_KEY_CHECK', default=False, cast=bool)\n</code></pre> <p>Skip the SECRET_KEY check. Make sure to set a strong SECRET_KEY in production.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.FF_SLACK_SKIP_CHECKS","title":"FF_SLACK_SKIP_CHECKS  <code>module-attribute</code>","text":"<pre><code>FF_SLACK_SKIP_CHECKS: bool = config('FF_SLACK_SKIP_CHECKS', cast=bool, default=_is_default_skip_check_cmd)\n</code></pre> <p>Skip Slack checks. Only use for testing or demo.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.FF_USER_ID_HEADER","title":"FF_USER_ID_HEADER  <code>module-attribute</code>","text":"<pre><code>FF_USER_ID_HEADER: str = 'FF-User-Id'\n</code></pre> <p>Header name to add to every HTTP request made using our HttpClient. Useful for logging.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.PAGERDUTY_ACCOUNT_EMAIL","title":"PAGERDUTY_ACCOUNT_EMAIL  <code>module-attribute</code>","text":"<pre><code>PAGERDUTY_ACCOUNT_EMAIL: str = config('PAGERDUTY_ACCOUNT_EMAIL')\n</code></pre> <p>PagerDuty account email, linked to the API key.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.PAGERDUTY_API_KEY","title":"PAGERDUTY_API_KEY  <code>module-attribute</code>","text":"<pre><code>PAGERDUTY_API_KEY: str = config('PAGERDUTY_API_KEY')\n</code></pre> <p>PagerDuty API key.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.PAGERDUTY_URL","title":"PAGERDUTY_URL  <code>module-attribute</code>","text":"<pre><code>PAGERDUTY_URL: str = config('PAGERDUTY_URL', default='https://api.pagerduty.com')\n</code></pre> <p>PagerDuty API URL.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.RAID_DEFAULT_JIRA_QRAFT_USER_ID","title":"RAID_DEFAULT_JIRA_QRAFT_USER_ID  <code>module-attribute</code>","text":"<pre><code>RAID_DEFAULT_JIRA_QRAFT_USER_ID: str = config('RAID_DEFAULT_JIRA_QRAFT_USER_ID')\n</code></pre> <p>The default Jira user ID to use for creating issues</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.RAID_JIRA_API_PASSWORD","title":"RAID_JIRA_API_PASSWORD  <code>module-attribute</code>","text":"<pre><code>RAID_JIRA_API_PASSWORD: str = config('RAID_JIRA_API_PASSWORD')\n</code></pre> <p>The Jira API password to use.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.RAID_JIRA_API_URL","title":"RAID_JIRA_API_URL  <code>module-attribute</code>","text":"<pre><code>RAID_JIRA_API_URL: str = config('RAID_JIRA_API_URL')\n</code></pre> <p>The Jira API URL to use. If no protocol is defined, https will be used.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.RAID_JIRA_API_USER","title":"RAID_JIRA_API_USER  <code>module-attribute</code>","text":"<pre><code>RAID_JIRA_API_USER: str = config('RAID_JIRA_API_USER')\n</code></pre> <p>The Jira API user to use.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.RAID_JIRA_INCIDENT_CATEGORY_FIELD","title":"RAID_JIRA_INCIDENT_CATEGORY_FIELD  <code>module-attribute</code>","text":"<pre><code>RAID_JIRA_INCIDENT_CATEGORY_FIELD: str = config('RAID_JIRA_INCIDENT_CATEGORY_FIELD', default='')\n</code></pre> <p>Jira custom field ID for incident category (e.g. 'customfield_12345')</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.RAID_JIRA_PROJECT_KEY","title":"RAID_JIRA_PROJECT_KEY  <code>module-attribute</code>","text":"<pre><code>RAID_JIRA_PROJECT_KEY: str = config('RAID_JIRA_PROJECT_KEY')\n</code></pre> <p>The Jira project key to use for creating issues, e.g. 'INC'</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.RAID_JIRA_USER_IDS","title":"RAID_JIRA_USER_IDS  <code>module-attribute</code>","text":"<pre><code>RAID_JIRA_USER_IDS: dict[str, str] = {}\n</code></pre> <p>Mapping of domain to default Jira user ID</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.RAID_TOOLBOX_URL","title":"RAID_TOOLBOX_URL  <code>module-attribute</code>","text":"<pre><code>RAID_TOOLBOX_URL: str = config('RAID_TOOLBOX_URL')\n</code></pre> <p>Toolbox URL</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.SLACK_APP_EMOJI","title":"SLACK_APP_EMOJI  <code>module-attribute</code>","text":"<pre><code>SLACK_APP_EMOJI: str = config('SLACK_APP_EMOJI', default=':fire_extinguisher:')\n</code></pre> <p>Emoji to represent the app in Slack surfaces. Can be an actual emoji, or a string for a custom emoji present in your Workspace, like \":incident_logo:\".</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.SLACK_BOT_TOKEN","title":"SLACK_BOT_TOKEN  <code>module-attribute</code>","text":"<pre><code>SLACK_BOT_TOKEN: str = config('SLACK_BOT_TOKEN')\n</code></pre> <p>The Slack bot token to use.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.SLACK_EMERGENCY_COMMUNICATION_GUIDE_URL","title":"SLACK_EMERGENCY_COMMUNICATION_GUIDE_URL  <code>module-attribute</code>","text":"<pre><code>SLACK_EMERGENCY_COMMUNICATION_GUIDE_URL: str | None = config('SLACK_EMERGENCY_COMMUNICATION_GUIDE_URL', default=None)\n</code></pre> <p>URL to add in the Slack emergency message. Useful to point to your own documentation.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.SLACK_EMERGENCY_USERGROUP_ID","title":"SLACK_EMERGENCY_USERGROUP_ID  <code>module-attribute</code>","text":"<pre><code>SLACK_EMERGENCY_USERGROUP_ID: str | None = config('SLACK_EMERGENCY_USERGROUP_ID', default=None)\n</code></pre> <p>The Slack usergroup ID to use for emergency notifications. If not set, no group will be mentionned in the message.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.SLACK_INCIDENT_COMMAND","title":"SLACK_INCIDENT_COMMAND  <code>module-attribute</code>","text":"<pre><code>SLACK_INCIDENT_COMMAND: str = config('SLACK_INCIDENT_COMMAND', default='/incident')\n</code></pre> <p>The Slack slash command to use to create and manage incidents.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.SLACK_INCIDENT_COMMAND_ALIASES","title":"SLACK_INCIDENT_COMMAND_ALIASES  <code>module-attribute</code>","text":"<pre><code>SLACK_INCIDENT_COMMAND_ALIASES: list[str] = config('SLACK_INCIDENT_COMMAND_ALIASES', cast=Csv(), default='')\n</code></pre> <p>Comma-separated list of aliases for the incident command.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.SLACK_INCIDENT_HELP_GUIDE_URL","title":"SLACK_INCIDENT_HELP_GUIDE_URL  <code>module-attribute</code>","text":"<pre><code>SLACK_INCIDENT_HELP_GUIDE_URL: str | None = config('SLACK_INCIDENT_HELP_GUIDE_URL', default=None)\n</code></pre> <p>URL to add in the Slack help message (/incident help). Useful to point to your own documentation.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.SLACK_POSTMORTEM_HELP_URL","title":"SLACK_POSTMORTEM_HELP_URL  <code>module-attribute</code>","text":"<pre><code>SLACK_POSTMORTEM_HELP_URL: str | None = config('SLACK_POSTMORTEM_HELP_URL', default=None)\n</code></pre> <p>URL to a guide on how to write a postmortem. Useful to point to your own documentation.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.SLACK_SEVERITY_HELP_GUIDE_URL","title":"SLACK_SEVERITY_HELP_GUIDE_URL  <code>module-attribute</code>","text":"<pre><code>SLACK_SEVERITY_HELP_GUIDE_URL: str | None = config('SLACK_SEVERITY_HELP_GUIDE_URL', default=None)\n</code></pre> <p>URL to add in the form to choose the priority. Useful to point to your own documentation.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.SLACK_SIGNING_SECRET","title":"SLACK_SIGNING_SECRET  <code>module-attribute</code>","text":"<pre><code>SLACK_SIGNING_SECRET: str = config('SLACK_SIGNING_SECRET')\n</code></pre> <p>The Slack signing secret to use.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.AccessLogFilter","title":"AccessLogFilter","text":"<p>               Bases: <code>Filter</code></p> <p>Filter Gunicorn.access logs to avoid logging static files and healthcheck requests logging.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.CustomJsonFormatter","title":"CustomJsonFormatter","text":"<pre><code>CustomJsonFormatter(*args: Any, **kwargs: Any)\n</code></pre> <p>               Bases: <code>JsonFormatter</code></p> <p>Custom JSON formatter for Python loggin, with Datadog specific attributes.</p> Source code in <code>src/firefighter/logging/custom_json_formatter.py</code> <pre><code>def __init__(self, *args: Any, **kwargs: Any) -&gt; None:\n    self.FF_USER_ID_HEADER: str = settings.FF_USER_ID_HEADER\n    super().__init__(*args, **kwargs)\n</code></pre>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_builder.PrettyFormatter","title":"PrettyFormatter","text":"<p>               Bases: <code>Formatter</code></p> <p>A custom logging formatter that formats log records with colors and a pretty output, for local development.</p> <p>Opiniated about what is pretty.</p> <p>Attributes:</p> <ul> <li> <code>_style</code>               (<code>_STYLES</code>)           \u2013            <p>The logging style used for formatting.</p> </li> <li> <code>_fmt</code>               (<code>str</code>)           \u2013            <p>The logging format string used for formatting.</p> </li> </ul>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_utils","title":"settings_utils","text":"<p>Attributes:</p> <ul> <li> <code>APP_DISPLAY_NAME</code>               (<code>str</code>)           \u2013            <p>The name of the app. Used in the title of the app, and in the navigation bar.</p> </li> <li> <code>BASE_URL</code>               (<code>str</code>)           \u2013            <p>The base URL of the app. Used for links in externals surfaces, like Slack or documents.</p> </li> </ul>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_utils.APP_DISPLAY_NAME","title":"APP_DISPLAY_NAME  <code>module-attribute</code>","text":"<pre><code>APP_DISPLAY_NAME: str = config('APP_DISPLAY_NAME', default='FireFighter')\n</code></pre> <p>The name of the app. Used in the title of the app, and in the navigation bar.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.settings.settings_utils.BASE_URL","title":"BASE_URL  <code>module-attribute</code>","text":"<pre><code>BASE_URL: str = config('BASE_URL')\n</code></pre> <p>The base URL of the app. Used for links in externals surfaces, like Slack or documents.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.urls","title":"urls","text":"<p>firefighter URL Configuration.</p> <p>The <code>urlpatterns</code> list routes URLs to views. For more information please see:     https://docs.djangoproject.com/en/4.2/topics/http/urls/</p>"},{"location":"reference/firefighter/#firefighter.firefighter.urls--examples","title":"Examples:","text":""},{"location":"reference/firefighter/#firefighter.firefighter.urls--function-views","title":"Function views","text":"<ol> <li>Add an import:  <code>from my_app import views</code></li> <li>Add a URL to urlpatterns:  <code>path('', views.home, name='home')</code></li> </ol>"},{"location":"reference/firefighter/#firefighter.firefighter.urls--class-based-views","title":"Class-based views","text":"<ol> <li>Add an import:  <code>from other_app.views import Home</code></li> <li>Add a URL to urlpatterns:  <code>path('', Home.as_view(), name='home')</code></li> </ol>"},{"location":"reference/firefighter/#firefighter.firefighter.urls--including-another-urlconf","title":"Including another URLconf","text":"<ol> <li>Import the include() function: <code>from django.urls import include, path</code></li> <li>Add a URL to urlpatterns:  <code>path('blog/', include('blog.urls'))</code></li> </ol>"},{"location":"reference/firefighter/#firefighter.firefighter.utils","title":"utils","text":"<p>Functions:</p> <ul> <li> <code>get_first_in</code>             \u2013              <p>Returns the first element of a list of dicts, where the value of a key matches one in the provided iterable.</p> </li> <li> <code>get_in</code>             \u2013              <p>Get a value from arbitrarily nested dicts.</p> </li> <li> <code>is_during_office_hours</code>             \u2013              <p>Check whether a datetime is during office hours. 9am-5pm, Mon-Fri.</p> </li> </ul>"},{"location":"reference/firefighter/#firefighter.firefighter.utils.get_first_in","title":"get_first_in","text":"<pre><code>get_first_in(ulist: list[T], key: str | Sequence[str], matches: Iterable[str], default: V | None = None) -&gt; T | V | None\n</code></pre> <p>Returns the first element of a list of dicts, where the value of a key matches one in the provided iterable.</p> Source code in <code>src/firefighter/firefighter/utils.py</code> <pre><code>def get_first_in(\n    ulist: list[T],\n    key: str | Sequence[str],\n    matches: Iterable[str],\n    default: V | None = None,\n) -&gt; T | V | None:\n    \"\"\"Returns the first element of a list of dicts, where the value of a key matches one in the provided iterable.\"\"\"\n    if not isinstance(ulist, list) or ulist is None:\n        return default  # type: ignore[unreachable]\n    return next(\n        (e for e in ulist if get_in(e, key) in matches),\n        default,\n    )\n</code></pre>"},{"location":"reference/firefighter/#firefighter.firefighter.utils.get_in","title":"get_in","text":"<pre><code>get_in(dictionary: dict[str, Any] | Any | None, keys: str | Sequence[str], default: Any | None = None) -&gt; Any\n</code></pre> <p>Get a value from arbitrarily nested dicts.</p> Source code in <code>src/firefighter/firefighter/utils.py</code> <pre><code>def get_in(\n    dictionary: dict[str, Any] | Any | None,\n    keys: str | Sequence[str],\n    default: Any | None = None,\n) -&gt; Any:\n    \"\"\"Get a value from arbitrarily nested dicts.\"\"\"\n    if dictionary is None:\n        return None\n\n    if isinstance(keys, str):\n        keys = keys.split(\".\")\n    if not keys:\n        return dictionary\n    if len(keys) == 1:\n        return dictionary.get(keys[0], default)\n    return get_in(dictionary.get(keys[0], {}), keys[1:], default=default)\n</code></pre>"},{"location":"reference/firefighter/#firefighter.firefighter.utils.is_during_office_hours","title":"is_during_office_hours","text":"<pre><code>is_during_office_hours(dt: datetime) -&gt; bool\n</code></pre> <p>Check whether a datetime is during office hours. 9am-5pm, Mon-Fri.</p> <p>Parameters:</p> <ul> <li> <code>dt</code>               (<code>datetime</code>)           \u2013            <p>datetime with TZ info.</p> </li> </ul> Source code in <code>src/firefighter/firefighter/utils.py</code> <pre><code>def is_during_office_hours(dt: datetime) -&gt; bool:\n    \"\"\"Check whether a datetime is during office hours. 9am-5pm, Mon-Fri.\n\n    Args:\n        dt (datetime): datetime with TZ info.\n    \"\"\"\n    return (9 &lt;= dt.hour &lt;= 17) and (dt.weekday() &lt; 5)\n</code></pre>"},{"location":"reference/firefighter/#firefighter.firefighter.views","title":"views","text":"<p>Classes:</p> <ul> <li> <code>CustomDetailView</code>           \u2013            <p>A custom detail view that adds the admin edit URL to the context, as <code>admin_edit_url</code>.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>get_admin_edit_url</code>             \u2013              <p>Construct the URL name for the admin edit page using the model's app_label and model_name.</p> </li> </ul>"},{"location":"reference/firefighter/#firefighter.firefighter.views.CustomDetailView","title":"CustomDetailView","text":"<p>               Bases: <code>DetailView[_MT]</code>, <code>Generic[_MT]</code></p> <p>A custom detail view that adds the admin edit URL to the context, as <code>admin_edit_url</code>.</p>"},{"location":"reference/firefighter/#firefighter.firefighter.views.get_admin_edit_url","title":"get_admin_edit_url  <code>cached</code>","text":"<pre><code>get_admin_edit_url(model_class: type[Model], object_pk: Any) -&gt; str | None\n</code></pre> <p>Construct the URL name for the admin edit page using the model's app_label and model_name.</p> Source code in <code>src/firefighter/firefighter/views.py</code> <pre><code>@cache\ndef get_admin_edit_url(model_class: type[Model], object_pk: Any) -&gt; str | None:\n    \"\"\"Construct the URL name for the admin edit page using the model's app_label and model_name.\"\"\"\n    app_label: str = model_class._meta.app_label  # noqa: SLF001\n    model_name = model_class._meta.model_name  # noqa: SLF001\n    url_name: str = f\"admin:{app_label}_{model_name}_change\"\n\n    try:\n        return reverse(url_name, args=[object_pk])\n    except NoReverseMatch:\n        return None\n</code></pre>"},{"location":"reference/firefighter/#firefighter.firefighter.wsgi","title":"wsgi","text":"<p>WSGI config for firefighter project.</p> <p>It exposes the WSGI callable as a module-level variable named <code>application</code>.</p> <p>For more information on this file, see https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/</p>"},{"location":"reference/incidents/","title":"Incidents","text":"<p>The incidents module is the core of FireFighter, managing incident lifecycle, priorities, and integrations.</p>"},{"location":"reference/incidents/#priority-system","title":"Priority System","text":"<p>FireFighter uses a 5-level priority system (P1-P5) to categorize incident severity:</p>"},{"location":"reference/incidents/#priority-levels","title":"Priority Levels","text":"Priority Emoji Level Description Example P1 \ud83d\udd25 Critical Complete service outage, system-wide failure Payment system down, entire website offline P2 \ud83d\udea8 High Major functionality impaired, significant user impact Core feature broken, major performance degradation P3 \u26a0\ufe0f Medium Minor functionality affected, moderate impact Non-critical feature issue, isolated component problem P4 \ud83d\udce2 Low Small issues, minimal impact UI glitches, minor bugs in secondary features P5 \ud83d\udca1 Lowest Cosmetic issues, enhancement requests Typos, improvement suggestions, non-urgent requests"},{"location":"reference/incidents/#priority-usage","title":"Priority Usage","text":"<p>Incident Creation: When creating an incident, the priority determines: - Notification urgency and channels - Automatic escalations (PagerDuty for P1/P2) - Jira ticket priority mapping - SLA expectations</p> <p>Integration Mapping: - Jira: P1-P5 maps directly to Jira priorities 1-5 - PagerDuty: P1-P2 typically trigger immediate escalation - Slack: Higher priorities get broader notification reach</p>"},{"location":"reference/incidents/#priority-assignment-guidelines","title":"Priority Assignment Guidelines","text":"<p>P1 (Critical) - Use when: - Complete service unavailability - Data loss or corruption - Security breaches - Payment processing failures</p> <p>P2 (High) - Use when: - Major feature completely broken - Significant performance degradation - Multiple users affected by the same issue</p> <p>P3 (Medium) - Use when: - Single feature partially broken - Workaround exists - Limited user impact</p> <p>P4 (Low) - Use when: - Minor UI issues - Edge case bugs - Enhancement requests with business value</p> <p>P5 (Lowest) - Use when: - Cosmetic improvements - Documentation updates - Nice-to-have features</p> <p>Priority Validation</p> <p>Invalid priority values automatically fallback to P1 to ensure critical handling.</p>"},{"location":"reference/incidents/#api-reference","title":"API Reference","text":""},{"location":"reference/incidents/#firefighter.incidents","title":"incidents","text":"<p>Modules:</p> <ul> <li> <code>admin</code>           \u2013            </li> <li> <code>enums</code>           \u2013            </li> <li> <code>factories</code>           \u2013            </li> <li> <code>forms</code>           \u2013            </li> <li> <code>menus</code>           \u2013            </li> <li> <code>migrations</code>           \u2013            </li> <li> <code>models</code>           \u2013            </li> <li> <code>signals</code>           \u2013            </li> <li> <code>tasks</code>           \u2013            </li> <li> <code>views</code>           \u2013            </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.admin","title":"admin","text":"<p>Classes:</p> <ul> <li> <code>EnvironmentAdmin</code>           \u2013            </li> <li> <code>IncidentAdmin</code>           \u2013            </li> <li> <code>IncidentRoleTypeAdmin</code>           \u2013            <p>IncidentRoleTypes are fixed at the moment (only commander and communication lead).</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.admin.EnvironmentAdmin","title":"EnvironmentAdmin","text":"<p>               Bases: <code>ModelAdmin[Environment]</code></p> <p>Methods:</p> <ul> <li> <code>get_readonly_fields</code>             \u2013              <p>Deny changing the value of an existing object.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.admin.EnvironmentAdmin.get_readonly_fields","title":"get_readonly_fields","text":"<pre><code>get_readonly_fields(request: HttpRequest, obj: Environment | None = None) -&gt; _ListOrTuple[str]\n</code></pre> <p>Deny changing the value of an existing object.</p> Source code in <code>src/firefighter/incidents/admin.py</code> <pre><code>def get_readonly_fields(\n    self,\n    request: HttpRequest,  # noqa: ARG002\n    obj: Environment | None = None,\n) -&gt; _ListOrTuple[str]:\n    \"\"\"Deny changing the value of an existing object.\"\"\"\n    if obj:  # editing an existing object\n        return *self.readonly_fields, \"value\"\n    return self.readonly_fields\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.admin.IncidentAdmin","title":"IncidentAdmin","text":"<p>               Bases: <code>ModelAdmin[Incident]</code></p> <p>Methods:</p> <ul> <li> <code>compute_and_purge_metrics</code>             \u2013              <p>Will compute metrics for selected incidents and delete metrics that can no longer be computed.</p> </li> <li> <code>send_message</code>             \u2013              <p>Action to send a message in selected channels.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.admin.IncidentAdmin.compute_and_purge_metrics","title":"compute_and_purge_metrics","text":"<pre><code>compute_and_purge_metrics(request: HttpRequest, queryset: QuerySet[Incident]) -&gt; None\n</code></pre> <p>Will compute metrics for selected incidents and delete metrics that can no longer be computed.</p> Source code in <code>src/firefighter/incidents/admin.py</code> <pre><code>@action(description=_(\"Compute and purge metrics from milestones\"))\ndef compute_and_purge_metrics(\n    self, request: HttpRequest, queryset: QuerySet[Incident]\n) -&gt; None:\n    \"\"\"Will compute metrics for selected incidents and delete metrics that can no longer be computed.\"\"\"\n    for incident in queryset:\n        incident.compute_metrics(purge=True)\n    self.message_user(\n        request,\n        ngettext(\n            \"Computed/purged metrics for %d incident.\",\n            \"Computed/purged metrics for %d incidents.\",\n            len(queryset),\n        )\n        % len(queryset),\n        constants.SUCCESS,\n    )\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.admin.IncidentAdmin.send_message","title":"send_message","text":"<pre><code>send_message(request: HttpRequest, queryset: QuerySet[Incident]) -&gt; TemplateResponse | None\n</code></pre> <p>Action to send a message in selected channels. This action first displays a confirmation page to enter the message. Next, it sends the message on all selected objects and redirects back to the change list (other fn).</p> Source code in <code>src/firefighter/incidents/admin.py</code> <pre><code>@action(\n    description=_(\"Send message on conversation\"),\n)\ndef send_message(\n    self, request: HttpRequest, queryset: QuerySet[Incident]\n) -&gt; TemplateResponse | None:\n    \"\"\"Action to send a message in selected channels.\n    This action first displays a confirmation page to enter the message.\n    Next, it sends the message on all selected objects and redirects back to the change list (other fn).\n    \"\"\"\n    opts = self.model._meta  # noqa: SLF001\n\n    # Get all the targeted conversations\n    target_conversations: list[IncidentChannel] = [\n        inc.conversation for inc in queryset.all() if inc.conversation\n    ]\n\n    deletable_objects = target_conversations\n\n    # The user has already entered the messages.\n    # Send message(s) and return None to display the change list view again.\n    if request.POST.get(\"post\"):\n        self.process_action_send_message(\n            request=request, target_conversations=target_conversations\n        )\n        return None\n\n    objects_name = model_ngettext(queryset)\n\n    title = _(\"Type your message\")\n\n    context = {\n        **self.admin_site.each_context(request),\n        \"title\": title,\n        \"objects_name\": str(objects_name),\n        \"deletable_objects\": [deletable_objects],\n        \"queryset\": queryset,\n        \"opts\": opts,\n        \"action_checkbox_name\": helpers.ACTION_CHECKBOX_NAME,\n        \"media\": self.media,\n    }\n\n    # Display the message edit page\n    return TemplateResponse(\n        request, \"admin/send_message_conversation.html\", context\n    )\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.admin.IncidentRoleTypeAdmin","title":"IncidentRoleTypeAdmin","text":"<p>               Bases: <code>ModelAdmin[IncidentRoleType]</code></p> <p>IncidentRoleTypes are fixed at the moment (only commander and communication lead).</p>"},{"location":"reference/incidents/#firefighter.incidents.enums","title":"enums","text":"<p>Classes:</p> <ul> <li> <code>ClosureReason</code>           \u2013            <p>Reasons for direct incident closure bypassing normal workflow.</p> </li> <li> <code>IncidentStatus</code>           \u2013            </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.enums.ClosureReason","title":"ClosureReason","text":"<p>               Bases: <code>TextChoices</code></p> <p>Reasons for direct incident closure bypassing normal workflow.</p>"},{"location":"reference/incidents/#firefighter.incidents.enums.IncidentStatus","title":"IncidentStatus","text":"<p>               Bases: <code>IntegerChoices</code></p> <p>Methods:</p> <ul> <li> <code>choices_lte_skip_postmortem</code>             \u2013              <p>Return choices up to val but excluding POST_MORTEM (for P3+ incidents).</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.enums.IncidentStatus.choices_lte_skip_postmortem","title":"choices_lte_skip_postmortem  <code>staticmethod</code>","text":"<pre><code>choices_lte_skip_postmortem(val: int) -&gt; list[tuple[int, str]]\n</code></pre> <p>Return choices up to val but excluding POST_MORTEM (for P3+ incidents).</p> Source code in <code>src/firefighter/incidents/enums.py</code> <pre><code>@staticmethod\ndef choices_lte_skip_postmortem(val: int) -&gt; list[tuple[int, str]]:\n    \"\"\"Return choices up to val but excluding POST_MORTEM (for P3+ incidents).\"\"\"\n    return [i for i in IncidentStatus.choices if i[0] &lt;= val and i[0] != IncidentStatus.POST_MORTEM]\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.factories","title":"factories","text":"<p>Classes:</p> <ul> <li> <code>PriorityFactory</code>           \u2013            <p>Factory for creating Priority instances in tests.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.factories.PriorityFactory","title":"PriorityFactory","text":"<p>               Bases: <code>DjangoModelFactory[Priority]</code></p> <p>Factory for creating Priority instances in tests.</p> <p>Creates Priority objects with random values. Use specific values in tests when testing priority-specific behavior (e.g., P1-P5 JIRA mapping).</p>"},{"location":"reference/incidents/#firefighter.incidents.forms","title":"forms","text":"<p>Modules:</p> <ul> <li> <code>closure_reason</code>           \u2013            <p>Form for incident closure with reason when closing from early statuses.</p> </li> <li> <code>select_impact</code>           \u2013            </li> <li> <code>unified_incident</code>           \u2013            </li> <li> <code>update_key_events</code>           \u2013            </li> <li> <code>update_roles</code>           \u2013            </li> <li> <code>update_status</code>           \u2013            </li> <li> <code>utils</code>           \u2013            </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.forms.closure_reason","title":"closure_reason","text":"<p>Form for incident closure with reason when closing from early statuses.</p> <p>Classes:</p> <ul> <li> <code>IncidentClosureReasonForm</code>           \u2013            <p>Form for closing an incident with a mandatory reason from early statuses.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.forms.closure_reason.IncidentClosureReasonForm","title":"IncidentClosureReasonForm","text":"<pre><code>IncidentClosureReasonForm(*args: Any, incident: Incident | None = None, **kwargs: Any)\n</code></pre> <p>               Bases: <code>Form</code></p> <p>Form for closing an incident with a mandatory reason from early statuses.</p> Source code in <code>src/firefighter/incidents/forms/closure_reason.py</code> <pre><code>def __init__(self, *args: Any, incident: Incident | None = None, **kwargs: Any) -&gt; None:  # noqa: ARG002\n    super().__init__(*args, **kwargs)\n\n    # Exclude RESOLVED from choices as it's for normal workflow closure\n    closure_field = self.fields[\"closure_reason\"]\n    if hasattr(closure_field, \"choices\"):\n        closure_field.choices = [\n            choice for choice in ClosureReason.choices\n            if choice[0] != ClosureReason.RESOLVED\n        ]\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.forms.select_impact","title":"select_impact","text":"<p>Classes:</p> <ul> <li> <code>SelectImpactForm</code>           \u2013            </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.forms.select_impact.SelectImpactForm","title":"SelectImpactForm","text":"<pre><code>SelectImpactForm(*args: Any, **kwargs: Any)\n</code></pre> <p>               Bases: <code>Form</code></p> <p>Methods:</p> <ul> <li> <code>save</code>             \u2013              <p>Save the impact choices to the incident.</p> </li> <li> <code>suggest_priority_from_impact</code>             \u2013              <p>Suggest a priority from 1 (highest) to 5 (lowest) based on the impact choices.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>business_impact_new</code>               (<code>str | None</code>)           \u2013            <p>Get business impact. Will return N/A, Lowest, Low, Medium, High or Highest.</p> </li> </ul> Source code in <code>src/firefighter/incidents/forms/select_impact.py</code> <pre><code>def __init__(self, *args: Any, **kwargs: Any) -&gt; None:\n    if \"data\" in kwargs:\n        for key, value in kwargs[\"data\"].items():\n            if (\n                isinstance(key, str)\n                and key.startswith(\"set_impact_type_\")\n                and isinstance(value, str)\n            ):\n                impact_type_name = key[len(\"set_impact_type_\") :]\n                with contextlib.suppress(ImpactLevel.DoesNotExist):\n                    kwargs[\"data\"][key] = ImpactLevel.objects.get(\n                        value=value, impact_type__value=impact_type_name\n                    )\n\n    super().__init__(*args, **kwargs)\n\n    for impact_type in ImpactType.objects.all().order_by(\"order\"):\n        field_name = f\"set_impact_type_{impact_type.value}\"\n        self.fields[field_name] = forms.ModelChoiceField(\n            label=impact_type.emoji + \" \" + impact_type.name,\n            queryset=impact_type.levels.all().order_by(\"-order\"),\n            help_text=impact_type.help_text,\n            initial=impact_type.levels.get(value=LevelChoices.NONE.value),\n        )\n        self.fields[field_name].label_from_instance = (  # type: ignore[attr-defined]\n            lambda obj: obj.emoji + \" \" + obj.name\n        )\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.forms.select_impact.SelectImpactForm.business_impact_new","title":"business_impact_new  <code>property</code>","text":"<pre><code>business_impact_new: str | None\n</code></pre> <p>Get business impact. Will return N/A, Lowest, Low, Medium, High or Highest.</p>"},{"location":"reference/incidents/#firefighter.incidents.forms.select_impact.SelectImpactForm.save","title":"save","text":"<pre><code>save(incident: HasImpactProtocol) -&gt; None\n</code></pre> <p>Save the impact choices to the incident.</p> Source code in <code>src/firefighter/incidents/forms/select_impact.py</code> <pre><code>def save(self, incident: HasImpactProtocol) -&gt; None:\n    \"\"\"Save the impact choices to the incident.\"\"\"\n    if self.is_valid():\n        impacts: dict[str, ImpactLevel] = self.cleaned_data\n\n        # Prepare a list of impact type slugs by removing the 'set_impact_type_' prefix\n        impact_type_slugs: list[str] = [\n            slug.replace(\"set_impact_type_\", \"\") for slug in impacts\n        ]\n\n        # Fetch all relevant ImpactType instances in a single query\n        impact_types: dict[str, ImpactType] = ImpactType.objects.in_bulk(\n            impact_type_slugs, field_name=\"value\"\n        )\n\n        impact_objects: list[Impact] = []\n\n        for impact_type_slug, impact_level in impacts.items():\n            impact_type_slug = impact_type_slug.replace(  # noqa: PLW2901\n                \"set_impact_type_\", \"\"\n            )\n            impact_type = impact_types.get(impact_type_slug)\n            if impact_type is None:\n                logger.warning(\n                    f\"Could not find impact type {impact_type_slug} in incident {incident.id}\"\n                )\n                continue\n\n            impact = Impact(impact_type=impact_type, impact_level=impact_level)\n            impact_objects.append(impact)\n\n        # Create and save all Impact instances in one database call\n        Impact.objects.bulk_create(impact_objects)\n        impacts_related_manager: ManyRelatedManager[Impact] = cast(\n            \"ManyRelatedManager[Impact]\",\n            incident.impacts,\n        )\n        impacts_related_manager.add(*impact_objects)\n\n    else:\n        raise forms.ValidationError(\"Form is not valid\")\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.forms.select_impact.SelectImpactForm.suggest_priority_from_impact","title":"suggest_priority_from_impact","text":"<pre><code>suggest_priority_from_impact() -&gt; int\n</code></pre> <p>Suggest a priority from 1 (highest) to 5 (lowest) based on the impact choices.</p> Source code in <code>src/firefighter/incidents/forms/select_impact.py</code> <pre><code>def suggest_priority_from_impact(self) -&gt; int:\n    \"\"\"Suggest a priority from 1 (highest) to 5 (lowest) based on the impact choices.\"\"\"\n    if self.is_valid():\n        impact: dict[str, ImpactLevel] = self.cleaned_data\n\n        impact_values = [impact_type.value for impact_type in impact.values()]\n        priorities = [level.priority for level in LevelChoices if level in impact_values]\n        return min(priorities) if priorities else LevelChoices.NONE.priority\n    return LevelChoices.NONE.priority\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.forms.unified_incident","title":"unified_incident","text":"<p>Classes:</p> <ul> <li> <code>PlatformChoices</code>           \u2013            <p>Platform choices for incidents.</p> </li> <li> <code>UnifiedIncidentForm</code>           \u2013            <p>Unified form for all incident types and priorities (P1-P5).</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>initial_environments</code>             \u2013              <p>Get default environments.</p> </li> <li> <code>initial_platform</code>             \u2013              <p>Get default platform.</p> </li> <li> <code>initial_priority</code>             \u2013              <p>Get default priority.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.forms.unified_incident.PlatformChoices","title":"PlatformChoices","text":"<p>               Bases: <code>TextChoices</code></p> <p>Platform choices for incidents.</p>"},{"location":"reference/incidents/#firefighter.incidents.forms.unified_incident.UnifiedIncidentForm","title":"UnifiedIncidentForm","text":"<pre><code>UnifiedIncidentForm(*args: Any, **kwargs: Any)\n</code></pre> <p>               Bases: <code>CreateIncidentFormBase</code></p> <p>Unified form for all incident types and priorities (P1-P5).</p> <p>This form dynamically shows/hides fields based on: - Priority/response_type (critical vs normal) - Selected impacts (customer, seller, employee)</p> <p>Common fields (always shown): - title, description, incident_category - environment (multiple choice) - platform (multiple choice, default ALL) - priority (hidden)</p> <p>Conditional fields: - suggested_team_routing (P4-P5 only) - zendesk_ticket_id (if customer impact selected) - seller_contract_id, is_key_account, etc. (if seller impact selected)</p> <p>Methods:</p> <ul> <li> <code>clean</code>             \u2013              <p>Custom validation based on response type and impacts.</p> </li> <li> <code>get_visible_fields_for_impacts</code>             \u2013              <p>Determine which fields should be visible based on impacts and response type.</p> </li> <li> <code>trigger_incident_workflow</code>             \u2013              <p>Trigger the appropriate incident workflow based on response type.</p> </li> </ul> Source code in <code>src/firefighter/incidents/forms/unified_incident.py</code> <pre><code>def __init__(self, *args: Any, **kwargs: Any) -&gt; None:\n    \"\"\"Initialize form with dynamic queryset for suggested_team_routing.\"\"\"\n    super().__init__(*args, **kwargs)\n\n    # Set queryset for suggested_team_routing\n    try:\n        from firefighter.raid.models import FeatureTeam  # noqa: PLC0415\n\n        field = typing_cast(\"forms.ModelChoiceField[Any]\", self.fields[\"suggested_team_routing\"])\n        field.queryset = FeatureTeam.objects.only(\"name\").order_by(\"name\")\n    except ImportError:\n        # RAID module not available\n        logger.warning(\"RAID module not available, suggested_team_routing will not work\")\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.forms.unified_incident.UnifiedIncidentForm.clean","title":"clean","text":"<pre><code>clean() -&gt; dict[str, Any]\n</code></pre> <p>Custom validation based on response type and impacts.</p> Source code in <code>src/firefighter/incidents/forms/unified_incident.py</code> <pre><code>def clean(self) -&gt; dict[str, Any]:\n    \"\"\"Custom validation based on response type and impacts.\"\"\"\n    cleaned_data = super().clean()\n    if cleaned_data is None:\n        cleaned_data = {}\n\n    # Get response_type from initial data if available\n    initial = self.initial or {}\n    response_type = initial.get(\"response_type\", \"critical\")\n\n    # Validate suggested_team_routing is required for normal incidents\n    if response_type == \"normal\" and not cleaned_data.get(\"suggested_team_routing\"):\n        self.add_error(\n            \"suggested_team_routing\",\n            \"Feature Team is required for P4/P5 incidents\",\n        )\n\n    return cleaned_data\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.forms.unified_incident.UnifiedIncidentForm.get_visible_fields_for_impacts","title":"get_visible_fields_for_impacts","text":"<pre><code>get_visible_fields_for_impacts(impacts_data: dict[str, ImpactLevel | str], response_type: str) -&gt; list[str]\n</code></pre> <p>Determine which fields should be visible based on impacts and response type.</p> <p>Parameters:</p> <ul> <li> <code>impacts_data</code>               (<code>dict[str, ImpactLevel | str]</code>)           \u2013            <p>Dictionary of impact type \u2192 impact level (ImpactLevel object or UUID string)</p> </li> <li> <code>response_type</code>               (<code>str</code>)           \u2013            <p>\"critical\" or \"normal\"</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>List of field names that should be visible</p> </li> </ul> Source code in <code>src/firefighter/incidents/forms/unified_incident.py</code> <pre><code>def get_visible_fields_for_impacts(\n    self, impacts_data: dict[str, ImpactLevel | str], response_type: str\n) -&gt; list[str]:\n    \"\"\"Determine which fields should be visible based on impacts and response type.\n\n    Args:\n        impacts_data: Dictionary of impact type \u2192 impact level (ImpactLevel object or UUID string)\n        response_type: \"critical\" or \"normal\"\n\n    Returns:\n        List of field names that should be visible\n    \"\"\"\n    visible_fields = [\n        \"title\",\n        \"description\",\n        \"incident_category\",\n        \"environment\",\n        \"platform\",\n        \"priority\",\n    ]\n\n    # Add suggested_team_routing for normal incidents (P4-P5)\n    if response_type == \"normal\":\n        visible_fields.append(\"suggested_team_routing\")\n\n    # Check impact selections\n    customer_impact = None\n    seller_impact = None\n\n    for field_name, impact_level in impacts_data.items():\n        if \"customers_impact\" in field_name:\n            customer_impact = impact_level\n        elif \"sellers_impact\" in field_name:\n            seller_impact = impact_level\n\n    # Helper to check if impact is not NONE\n    def has_impact(impact: ImpactLevel | str | None) -&gt; bool:\n        if impact is None:\n            return False\n\n        # If it's a UUID string, fetch the ImpactLevel from database\n        if isinstance(impact, str):\n            from firefighter.incidents.models.impact import (  # noqa: PLC0415\n                ImpactLevel as ImpactLevelModel,\n            )\n\n            try:\n                impact_obj = ImpactLevelModel.objects.get(id=impact)\n            except ImpactLevelModel.DoesNotExist:\n                return False\n            else:\n                return impact_obj.value != LevelChoices.NONE.value\n\n        # Otherwise it's an ImpactLevel object\n        return impact.value != LevelChoices.NONE.value\n\n    # Add customer-specific fields\n    if has_impact(customer_impact):\n        visible_fields.append(\"zendesk_ticket_id\")\n\n    # Add seller-specific fields\n    if has_impact(seller_impact):\n        visible_fields.extend([\n            \"seller_contract_id\",\n            \"is_key_account\",\n            \"is_seller_in_golden_list\",\n            \"zoho_desk_ticket_id\",\n        ])\n\n    return visible_fields\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.forms.unified_incident.UnifiedIncidentForm.trigger_incident_workflow","title":"trigger_incident_workflow","text":"<pre><code>trigger_incident_workflow(\n    creator: User, impacts_data: dict[str, ImpactLevel], response_type: str = \"critical\", *args: Any, **kwargs: Any\n) -&gt; None\n</code></pre> <p>Trigger the appropriate incident workflow based on response type.</p> <p>Parameters:</p> <ul> <li> <code>creator</code>               (<code>User</code>)           \u2013            <p>User creating the incident</p> </li> <li> <code>impacts_data</code>               (<code>dict[str, ImpactLevel]</code>)           \u2013            <p>Dictionary of impact data</p> </li> <li> <code>response_type</code>               (<code>str</code>, default:                   <code>'critical'</code> )           \u2013            <p>\"critical\" or \"normal\"</p> </li> <li> <code>*args</code>               (<code>Any</code>, default:                   <code>()</code> )           \u2013            <p>Additional positional arguments (unused)</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional keyword arguments (unused)</p> </li> </ul> Source code in <code>src/firefighter/incidents/forms/unified_incident.py</code> <pre><code>def trigger_incident_workflow(\n    self,\n    creator: User,\n    impacts_data: dict[str, ImpactLevel],\n    response_type: str = \"critical\",\n    *args: Any,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"Trigger the appropriate incident workflow based on response type.\n\n    Args:\n        creator: User creating the incident\n        impacts_data: Dictionary of impact data\n        response_type: \"critical\" or \"normal\"\n        *args: Additional positional arguments (unused)\n        **kwargs: Additional keyword arguments (unused)\n    \"\"\"\n    if response_type == \"critical\":\n        self._trigger_critical_incident_workflow(creator, impacts_data)\n    else:\n        self._trigger_normal_incident_workflow(creator, impacts_data)\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.forms.unified_incident.initial_environments","title":"initial_environments","text":"<pre><code>initial_environments() -&gt; list[Environment]\n</code></pre> <p>Get default environments.</p> Source code in <code>src/firefighter/incidents/forms/unified_incident.py</code> <pre><code>def initial_environments() -&gt; list[Environment]:\n    \"\"\"Get default environments.\"\"\"\n    return list(Environment.objects.filter(default=True))\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.forms.unified_incident.initial_platform","title":"initial_platform","text":"<pre><code>initial_platform() -&gt; str\n</code></pre> <p>Get default platform.</p> Source code in <code>src/firefighter/incidents/forms/unified_incident.py</code> <pre><code>def initial_platform() -&gt; str:\n    \"\"\"Get default platform.\"\"\"\n    return PlatformChoices.ALL.value\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.forms.unified_incident.initial_priority","title":"initial_priority","text":"<pre><code>initial_priority() -&gt; Priority\n</code></pre> <p>Get default priority.</p> Source code in <code>src/firefighter/incidents/forms/unified_incident.py</code> <pre><code>def initial_priority() -&gt; Priority:\n    \"\"\"Get default priority.\"\"\"\n    return Priority.objects.get(default=True)\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.forms.update_key_events","title":"update_key_events","text":"<p>Classes:</p> <ul> <li> <code>IncidentUpdateKeyEventsForm</code>           \u2013            </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.forms.update_key_events.IncidentUpdateKeyEventsForm","title":"IncidentUpdateKeyEventsForm","text":"<pre><code>IncidentUpdateKeyEventsForm(*args: Any, **kwargs: Any)\n</code></pre> <p>               Bases: <code>Form</code></p> <p>Methods:</p> <ul> <li> <code>get_milestones_with_data</code>             \u2013              <p>Get each firefighter.incidents.models.milestone_type.MilestoneType with its <code>event_ts</code> from the IncidentUpdate.</p> </li> <li> <code>save</code>             \u2013              <p>Custom save method to save each changed key event.</p> </li> </ul> Source code in <code>src/firefighter/incidents/forms/update_key_events.py</code> <pre><code>def __init__(self, *args: Any, **kwargs: Any) -&gt; None:\n    self.incident = kwargs.pop(\"incident\")\n    self.user = kwargs.pop(\"user\", None)\n    super().__init__(*args, **kwargs)\n    self.generate_fields_dynamically()\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.forms.update_key_events.IncidentUpdateKeyEventsForm.get_milestones_with_data","title":"get_milestones_with_data","text":"<pre><code>get_milestones_with_data(milestones_definitions: Iterable[MilestoneType]) -&gt; list[MilestoneTypeData]\n</code></pre> <p>Get each firefighter.incidents.models.milestone_type.MilestoneType with its <code>event_ts</code> from the IncidentUpdate.</p> Source code in <code>src/firefighter/incidents/forms/update_key_events.py</code> <pre><code>def get_milestones_with_data(\n    self,\n    milestones_definitions: Iterable[MilestoneType],\n) -&gt; list[MilestoneTypeData]:\n    \"\"\"Get each [firefighter.incidents.models.milestone_type.MilestoneType][] with its `event_ts` from the IncidentUpdate.\"\"\"\n    milestones_objects = self.incident.latest_updates_by_type\n    ass = []\n    for milestone_def in milestones_definitions:\n        event = milestones_objects.get(milestone_def.event_type)\n        event_ts = event.event_ts if event and event.event_ts else None\n        association = MilestoneTypeData(\n            milestone_type=milestone_def, data=MilestoneData(event_ts)\n        )\n        ass.append(association)\n    return ass\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.forms.update_key_events.IncidentUpdateKeyEventsForm.save","title":"save","text":"<pre><code>save() -&gt; None\n</code></pre> <p>Custom save method to save each changed key event.</p> Source code in <code>src/firefighter/incidents/forms/update_key_events.py</code> <pre><code>def save(self) -&gt; None:\n    \"\"\"Custom save method to save each changed key event.\"\"\"\n    self.fields: dict[str, Field]\n    for field_name in self.fields:\n        if field_name not in self.changed_data or self.fields[field_name].disabled:\n            logger.debug(\"skipping %s\", field_name)\n            continue\n        if not field_name.startswith(\"key_event_\"):\n            continue\n\n        key_event_type = field_name.replace(\"key_event_\", \"\")\n\n        logger.debug(f\"save {field_name} {self.cleaned_data[field_name]}\")\n        self._save_key_event(key_event_type, self.cleaned_data[field_name])\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.forms.update_roles","title":"update_roles","text":"<p>Classes:</p> <ul> <li> <code>IncidentUpdateRolesForm</code>           \u2013            </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.forms.update_roles.IncidentUpdateRolesForm","title":"IncidentUpdateRolesForm","text":"<pre><code>IncidentUpdateRolesForm(*args: Any, **kwargs: Any)\n</code></pre> <p>               Bases: <code>Form</code></p> <p>Methods:</p> <ul> <li> <code>save</code>             \u2013              <p>Custom save method to save the updated roles.</p> </li> </ul> Source code in <code>src/firefighter/incidents/forms/update_roles.py</code> <pre><code>def __init__(self, *args: Any, **kwargs: Any) -&gt; None:\n    self.incident: Incident = kwargs.pop(\"incident\")\n    self.user = kwargs.pop(\"user\", None)\n    super().__init__(*args, **kwargs)\n    self.generate_fields_dynamically()\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.forms.update_roles.IncidentUpdateRolesForm.save","title":"save","text":"<pre><code>save() -&gt; None\n</code></pre> <p>Custom save method to save the updated roles.</p> Source code in <code>src/firefighter/incidents/forms/update_roles.py</code> <pre><code>def save(self) -&gt; None:\n    \"\"\"Custom save method to save the updated roles.\"\"\"\n    self.fields: dict[str, Field]\n    roles_to_update: dict[str, User | None] = {}\n    for field_name in self.fields:\n        if field_name not in self.changed_data or self.fields[field_name].disabled:\n            logger.debug(\"skipping %s\", field_name)\n            continue\n        if not field_name.startswith(\"role_\"):\n            continue\n\n        role_type_slug = field_name.replace(\"role_\", \"\")\n\n        roles_to_update[role_type_slug] = self.cleaned_data[field_name]\n    if self.user is None:\n        raise RuntimeError(\"User is required, was the form validated?\")\n    self.incident.update_roles(self.user, roles_to_update)\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.forms.update_status","title":"update_status","text":"<p>Classes:</p> <ul> <li> <code>UpdateStatusForm</code>           \u2013            </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.forms.update_status.UpdateStatusForm","title":"UpdateStatusForm","text":"<pre><code>UpdateStatusForm(*args: Any, incident: Incident | None = None, **kwargs: Any)\n</code></pre> <p>               Bases: <code>Form</code></p> <p>Methods:</p> <ul> <li> <code>requires_closure_reason</code>             \u2013              <p>Check if closing this incident to the target status requires a closure reason.</p> </li> </ul> Source code in <code>src/firefighter/incidents/forms/update_status.py</code> <pre><code>def __init__(self, *args: Any, incident: Incident | None = None, **kwargs: Any) -&gt; None:\n    super().__init__(*args, **kwargs)\n\n    # Dynamically adjust status choices based on incident requirements\n    if incident:\n        self._set_status_choices(incident)\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.forms.update_status.UpdateStatusForm.requires_closure_reason","title":"requires_closure_reason  <code>staticmethod</code>","text":"<pre><code>requires_closure_reason(incident: Incident, target_status: IncidentStatus) -&gt; bool\n</code></pre> <p>Check if closing this incident to the target status requires a closure reason.</p> <p>Based on the workflow diagram: - P1/P2 and P3/P4/P5: require reason when closing from Opened or Investigating</p> Source code in <code>src/firefighter/incidents/forms/update_status.py</code> <pre><code>@staticmethod\ndef requires_closure_reason(incident: Incident, target_status: IncidentStatus) -&gt; bool:\n    \"\"\"Check if closing this incident to the target status requires a closure reason.\n\n    Based on the workflow diagram:\n    - P1/P2 and P3/P4/P5: require reason when closing from Opened or Investigating\n    \"\"\"\n    if target_status != IncidentStatus.CLOSED:\n        return False\n\n    current_status = incident.status\n\n    # Require reason if closing from Opened or Investigating (for any priority)\n    return current_status.value in {IncidentStatus.OPEN, IncidentStatus.INVESTIGATING}\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.forms.utils","title":"utils","text":"<p>Classes:</p> <ul> <li> <code>EnumChoiceField</code>           \u2013            </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.forms.utils.EnumChoiceField","title":"EnumChoiceField","text":"<pre><code>EnumChoiceField(*args: Any, enum_class: type[T], **kwargs: Any)\n</code></pre> <p>               Bases: <code>TypedChoiceField</code></p> <p>Methods:</p> <ul> <li> <code>to_python</code>             \u2013              <p>Return a value from the enum class.</p> </li> <li> <code>validate</code>             \u2013              <p>Log validation for debugging.</p> </li> </ul> Source code in <code>src/firefighter/incidents/forms/utils.py</code> <pre><code>def __init__(self, *args: Any, enum_class: type[T], **kwargs: Any) -&gt; None:\n    # Explicit for type checking\n    self.coerce_func: Callable[[Any], T] = lambda val: enum_class(  # noqa: PLW0108\n        val\n    )\n    self.enum_class = enum_class\n    if \"choices\" not in kwargs:\n        kwargs[\"choices\"] = enum_class.choices\n\n    # Customize error messages for better UX\n    if \"error_messages\" not in kwargs:\n        kwargs[\"error_messages\"] = {}\n    if \"invalid_choice\" not in kwargs[\"error_messages\"]:\n        kwargs[\"error_messages\"][\"invalid_choice\"] = (\n            \"The selected value is not valid. Please select a value from the dropdown list.\"\n        )\n\n    super().__init__(*args, coerce=self.coerce_func, **kwargs)\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.forms.utils.EnumChoiceField.to_python","title":"to_python","text":"<pre><code>to_python(value: Any) -&gt; int | str | Any\n</code></pre> <p>Return a value from the enum class.</p> Source code in <code>src/firefighter/incidents/forms/utils.py</code> <pre><code>def to_python(self, value: Any) -&gt; int | str | Any:\n    \"\"\"Return a value from the enum class.\"\"\"\n    if value in self.empty_values:\n        return \"\"\n    # Cast to int if it's a string representation of an int\n    if isinstance(value, str) and value.isdigit():\n        value = int(value)\n\n    # If value is already a valid enum member, return it\n    if isinstance(value, self.enum_class):\n        return value\n    try:\n        return self.coerce_func(value)\n    except ValueError as exc:\n        err_msg = f\"{value} is not a valid {self.enum_class.__name__}\"\n        raise ValidationError(err_msg, code=\"invalid_choice\") from exc\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.forms.utils.EnumChoiceField.validate","title":"validate","text":"<pre><code>validate(value: Any) -&gt; None\n</code></pre> <p>Log validation for debugging.</p> Source code in <code>src/firefighter/incidents/forms/utils.py</code> <pre><code>def validate(self, value: Any) -&gt; None:\n    \"\"\"Log validation for debugging.\"\"\"\n    logger.debug(f\"EnumChoiceField.validate: value={value!r} (type={type(value).__name__}), choices={self.choices}\")\n    return super().validate(value)\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.menus","title":"menus","text":"<p>Functions:</p> <ul> <li> <code>user_details_url</code>             \u2013              <p>Return a personalized title for our profile menu item.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.menus.user_details_url","title":"user_details_url","text":"<pre><code>user_details_url(request: AuthenticatedHttpRequest) -&gt; str | None\n</code></pre> <p>Return a personalized title for our profile menu item.</p> Source code in <code>src/firefighter/incidents/menus.py</code> <pre><code>def user_details_url(request: AuthenticatedHttpRequest) -&gt; str | None:\n    \"\"\"Return a personalized title for our profile menu item.\"\"\"\n    if request.user.is_authenticated:\n        return request.user.get_absolute_url()\n    return None  # type: ignore[unreachable]\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.migrations","title":"migrations","text":"<p>Modules:</p> <ul> <li> <code>0006_update_group_names</code>           \u2013            </li> <li> <code>0007_update_component_name</code>           \u2013            </li> <li> <code>0010_update_components</code>           \u2013            </li> <li> <code>0013_add_missing_component</code>           \u2013            </li> <li> <code>0019_set_security_components_private</code>           \u2013            </li> <li> <code>0021_copy_component_data_to_incident_category</code>           \u2013            </li> <li> <code>0023_populate_incident_category_references</code>           \u2013            </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.migrations.0006_update_group_names","title":"0006_update_group_names","text":"<p>Functions:</p> <ul> <li> <code>get_group_mappings</code>             \u2013              <p>Returns the mapping table for updating existing groups.</p> </li> <li> <code>get_new_groups</code>             \u2013              <p>Returns a dictionary of new groups to be created.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.migrations.0006_update_group_names.get_group_mappings","title":"get_group_mappings","text":"<pre><code>get_group_mappings() -&gt; dict\n</code></pre> <p>Returns the mapping table for updating existing groups.</p> Source code in <code>src/firefighter/incidents/migrations/0006_update_group_names.py</code> <pre><code>def get_group_mappings() -&gt; dict:\n    \"\"\"Returns the mapping table for updating existing groups.\"\"\"\n    return {\n        \"Platform\": (\"Platform\", 8),\n        \"Visitors\": (\"Marketplace\", 1),\n        \"Specialist Offer (Catalog/Seller)\": (\"Catalog\", 4),\n        \"Operations\": (\"Operations\", 6),\n        \"Money\": (\"Payment Operations\", 5),\n        \"Security\": (\"Security\", 10),\n        \"Corporate IT\": (\"Corporate IT\", 11),\n        \"Other\": (\"Other\", 12),\n        \"Data\": (\"Data\", 9),\n    }\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.migrations.0006_update_group_names.get_new_groups","title":"get_new_groups","text":"<pre><code>get_new_groups() -&gt; dict\n</code></pre> <p>Returns a dictionary of new groups to be created.</p> Source code in <code>src/firefighter/incidents/migrations/0006_update_group_names.py</code> <pre><code>def get_new_groups() -&gt; dict:\n    \"\"\"Returns a dictionary of new groups to be created.\"\"\"\n    return {\n        \"Marketing &amp; Communication\": 2,\n        \"Seller\": 3,\n        \"Finance\": 7,\n    }\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.migrations.0007_update_component_name","title":"0007_update_component_name","text":"<p>Functions:</p> <ul> <li> <code>get_component_mappings</code>             \u2013              <p>Returns a list of tuples for updating existing component names and their attributes.</p> </li> <li> <code>get_new_components</code>             \u2013              <p>Returns a dictionary of new components to be created.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.migrations.0007_update_component_name.get_component_mappings","title":"get_component_mappings","text":"<pre><code>get_component_mappings() -&gt; list\n</code></pre> <p>Returns a list of tuples for updating existing component names and their attributes.</p> Each tuple contains <ul> <li>old_name (str): The current name of the component.</li> <li>new_name (str): The new name to assign to the component.</li> <li>slack_channel (str): The associated Slack channel for the component.</li> <li>group_name (str): The name of the group to which the component belongs.</li> </ul> <p>Returns:</p> <ul> <li> <code>list</code> (              <code>list</code> )          \u2013            <p>A list of tuples, each representing the details for a component update.</p> </li> </ul> Source code in <code>src/firefighter/incidents/migrations/0007_update_component_name.py</code> <pre><code>def get_component_mappings() -&gt; list:\n    \"\"\"\n    Returns a list of tuples for updating existing component names and their attributes.\n\n    Each tuple contains:\n        - old_name (str): The current name of the component.\n        - new_name (str): The new name to assign to the component.\n        - slack_channel (str): The associated Slack channel for the component.\n        - group_name (str): The name of the group to which the component belongs.\n\n    Returns:\n        list: A list of tuples, each representing the details for a component update.\n    \"\"\"\n    return [\n        (\"Commercial Animation (Mabaya cat. integration &amp; ad request, ...)\", \"Commercial Animation\", \"impact-commercial-animation\", \"Marketplace\"),\n        (\"Mobile Apps\", \"Mobile Apps\", \"impact-mobile-apps\", \"Marketplace\"),\n        (\"Spartacux Foundations\", \"Spartacux Foundations\", \"impact-spartacux-foundations\", \"Marketplace\"),\n        (\"Tracking\", \"Tracking\", \"impact-tracking\", \"Marketplace\"),\n        (\"HUB Integrators\", \"HUB Integrators\", \"impact-hub-integrators\", \"Seller\"),\n        (\"Seller Account and Feeds\", \"Seller Catalog and Offer Management\", \"impact-seller-catalog-offer-management\", \"Seller\"),\n        (\"Toolbox\", \"Seller Admin and Experience\", \"impact-seller-admin-experience\", \"Seller\"),\n        (\"Seller Services (Mabaya BO, Subscriptions, MF)\", \"Seller Services\", \"impact-seller-services\", \"Seller\"),\n        (\"Catalog Performance\", \"Catalog Performance\", \"impact-catalog-performance\", \"Catalog\"),\n        (\"Offer (Price, Stock)\", \"Offer (Price &amp; Stock)\", \"impact-offer-price-stock\", \"Catalog\"),\n        (\"Back Office\", \"BO Catalog - Master Experience\", \"impact-bo-catalog-master-experience\", \"Catalog\"),\n        (\"Order Lifecycle\", \"Order management\", \"impact-order-management\", \"Operations\"),\n        (\"Delivery Experience\", \"Delivery experience\", \"impact-delivery-experience\", \"Operations\"),\n        (\"Cloud Infrastructure\", \"Cloud Infrastructure\", \"impact-cloud-infrastructure\", \"Platform\"),\n        (\"Spinak\", \"Spinak\", \"impact-spinak\", \"Platform\"),\n        (\"CDN\", \"CDN\", \"impact-cdn\", \"Platform\"),\n        (\"Gitlab\", \"Gitlab\", \"impact-gitlab\", \"Platform\"),\n    ]\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.migrations.0007_update_component_name.get_new_components","title":"get_new_components","text":"<pre><code>get_new_components() -&gt; dict\n</code></pre> <p>Returns a dictionary of new components to be created.</p> <p>Each entry in the dictionary maps a component name to a tuple containing: - group_name: The name of the group the component belongs to. - slack_channel: The associated Slack channel for the component.</p> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>A mapping of component names to (group name, slack channel) tuples.</p> </li> </ul> Source code in <code>src/firefighter/incidents/migrations/0007_update_component_name.py</code> <pre><code>def get_new_components() -&gt; dict:\n    \"\"\"\n    Returns a dictionary of new components to be created.\n\n    Each entry in the dictionary maps a component name to a tuple containing:\n    - group_name: The name of the group the component belongs to.\n    - slack_channel: The associated Slack channel for the component.\n\n    Returns:\n        dict: A mapping of component names to (group name, slack channel) tuples.\n    \"\"\"\n    return {\n        \"Traffic acquisition\": (\"Marketing &amp; Communication\", \"impact-traffic-acquisition\"),\n        \"Company reputation\": (\"Marketing &amp; Communication\", \"impact-company-reputation\"),\n        \"Loyalty and coupons\": (\"Payment Operations\", \"impact-loyalty-coupons\"),\n        \"Payouts to seller\": (\"Payment Operations\", \"impact-payouts-to-seller\"),\n        \"Refunds\": (\"Payment Operations\", \"impact-refunds\"),\n        \"Returns\": (\"Operations\", \"impact-returns\"),\n        \"Customer service\": (\"Operations\", \"impact-customer-service\"),\n        \"Inventory\": (\"Operations\", \"impact-inventory\"),\n        \"VAT\": (\"Finance\", \"impact-vat\"),\n        \"Seller's invoices\": (\"Finance\", \"impact-sellers-invoices\"),\n        \"Customer's invoices\": (\"Finance\", \"impact-customers-invoices\"),\n        \"Accounting\": (\"Finance\", \"impact-accounting\"),\n        \"Revenue\": (\"Finance\", \"impact-revenue\"),\n        \"Compromised laptop / server\": (\"Security\", \"impact-compromised-laptop-server\"),\n    }\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.migrations.0010_update_components","title":"0010_update_components","text":"<p>Functions:</p> <ul> <li> <code>get_component_mappings</code>             \u2013              <p>Returns a list of tuples for updating existing component names and their attributes.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.migrations.0010_update_components.get_component_mappings","title":"get_component_mappings","text":"<pre><code>get_component_mappings() -&gt; list\n</code></pre> <p>Returns a list of tuples for updating existing component names and their attributes.</p> Each tuple contains <ul> <li>old_name (str): The current name of the component.</li> <li>new_name (str): The new name to assign to the component.</li> <li>slack_channel (str): The associated Slack channel for the component.</li> <li>group_name (str): The name of the group to which the component belongs.</li> </ul> <p>Returns:</p> <ul> <li> <code>list</code> (              <code>list</code> )          \u2013            <p>A list of tuples, each representing the details for a component update.</p> </li> </ul> Source code in <code>src/firefighter/incidents/migrations/0010_update_components.py</code> <pre><code>def get_component_mappings() -&gt; list:\n    \"\"\"\n    Returns a list of tuples for updating existing component names and their attributes.\n\n    Each tuple contains:\n        - old_name (str): The current name of the component.\n        - new_name (str): The new name to assign to the component.\n        - slack_channel (str): The associated Slack channel for the component.\n        - group_name (str): The name of the group to which the component belongs.\n\n    Returns:\n        list: A list of tuples, each representing the details for a component update.\n    \"\"\"\n    return [\n        # Marketplace\n        (\"Product Discovery\", \"Navigation &amp; Product discovery\", \"impact-nav-product-discovery\", \"Marketplace\"),\n        (\"User &amp; Purchase\", \"Cart &amp; funnel\", \"impact-cart-funnel\", \"Marketplace\"),\n        (\"Customer Management\", \"Customer login &amp; signup\", \"impact-customer-login-signup\", \"Marketplace\"),\n        (\"Performance\", \"Web performance\", \"impact-web-performance\", \"Marketplace\"),\n        # Catalog\n        (\"Product Information\", \"Product Management\", \"impact-product-management\", \"Catalog\"),\n        (\"Taxonomy\", \"Product Structure\", \"impact-product-structure\", \"Catalog\"),\n        (\"Publication on website\", \"Catalog Exposition\", \"impact-catalog-exposition\", \"Catalog\"),\n        # Payment Operations\n        (\"Payment\", \"Payment\", \"impact-payment\", \"Payment Operations\"),\n        # Operations\n        (\"ManoFulfillment OPS\", \"MM Fulfillment\", \"impact-mm-fulfillment\", \"Operations\"),\n        (\"Helpcenter\", \"Helpcenter after sales\", \"impact-helpcenter-after-sales\", \"Operations\"),\n        # Finance\n        (\"Finance Operations\", \"Controlling\", \"impact-controlling\", \"Finance\"),\n        # Platform\n        (\"Spinak\", \"Spinak\", \"impact-spinak\", \"Platform\"),\n        (\"CDN\", \"CDN\", \"impact-cdn\", \"Platform\"),\n        (\"Gitlab\", \"Gitlab\", \"impact-gitlab\", \"Platform\"),\n        # Data\n        (\"data-platform\", \"Data Ingestion\", \"impact-data-ingestion\", \"Data\"),\n        (\"data-specialist-offer\", \"Data Warehouse\", \"impact-data-warehouse\", \"Data\"),\n        (\"data-wbr\", \"Data Analytics\", \"impact-data-analytics\", \"Data\"),\n        # Security\n        (\"Security Misc\", \"Bot management &amp; rate limiting &amp; WAF\", \"impact-bot-management-rate-limiting-waf\", \"Security\"),\n        (\"Attack\", \"Data leak\", \"impact-data-leak\", \"Security\"),\n        (\"System Compromise\", \"Exploited vulnerability\", \"impact-exploited-vulnerability\", \"Security\"),\n        (\"Personal Data Breach\", \"Stolen account(s) or IT materials\", \"impact-stolen-accounts-it-materials\", \"Security\"),\n    ]\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.migrations.0013_add_missing_component","title":"0013_add_missing_component","text":"<p>Functions:</p> <ul> <li> <code>get_new_components</code>             \u2013              <p>Returns a dictionary of new components to be created.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.migrations.0013_add_missing_component.get_new_components","title":"get_new_components","text":"<pre><code>get_new_components() -&gt; dict\n</code></pre> <p>Returns a dictionary of new components to be created.</p> <p>Each entry in the dictionary maps a component name to a tuple containing: - group_name: The name of the group the component belongs to. - slack_channel: The associated Slack channel for the component.</p> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>A mapping of component names to (group name, slack channel) tuples.</p> </li> </ul> Source code in <code>src/firefighter/incidents/migrations/0013_add_missing_component.py</code> <pre><code>def get_new_components() -&gt; dict:\n    \"\"\"\n    Returns a dictionary of new components to be created.\n\n    Each entry in the dictionary maps a component name to a tuple containing:\n    - group_name: The name of the group the component belongs to.\n    - slack_channel: The associated Slack channel for the component.\n\n    Returns:\n        dict: A mapping of component names to (group name, slack channel) tuples.\n    \"\"\"\n    return {\n        \"Data Tools\": (\"Data\", \"impact-data-tools\"),\n        \"Catalog Access\": (\"Catalog\", \"impact-catalog-access\"),\n    }\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.migrations.0019_set_security_components_private","title":"0019_set_security_components_private","text":"<p>Functions:</p> <ul> <li> <code>revert_security_components_to_public</code>             \u2013              <p>Revert all components belonging to the Security group to public, except 'Bot management &amp; rate limiting &amp; WAF'.</p> </li> <li> <code>set_security_components_to_private</code>             \u2013              <p>Set all components belonging to the Security group as private, except 'Bot management &amp; rate limiting &amp; WAF'.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.migrations.0019_set_security_components_private.revert_security_components_to_public","title":"revert_security_components_to_public","text":"<pre><code>revert_security_components_to_public(apps, schema_editor)\n</code></pre> <p>Revert all components belonging to the Security group to public, except 'Bot management &amp; rate limiting &amp; WAF'.</p> Source code in <code>src/firefighter/incidents/migrations/0019_set_security_components_private.py</code> <pre><code>def revert_security_components_to_public(apps, schema_editor):\n    \"\"\"Revert all components belonging to the Security group to public, except 'Bot management &amp; rate limiting &amp; WAF'.\"\"\"\n    Component = apps.get_model(\"incidents\", \"Component\")\n    Group = apps.get_model(\"incidents\", \"Group\")\n\n    try:\n        security_group = Group.objects.get(name=\"Security\")\n        components = Component.objects.filter(group=security_group).exclude(\n            name=\"Bot management &amp; rate limiting &amp; WAF\"\n        )\n\n        updated_count = 0\n        for component in components:\n            if component.private:\n                logger.info(f\"Setting component '{component.name}' to public\")\n                component.private = False\n                component.save()\n                updated_count += 1\n\n        logger.info(f\"Reverted {updated_count} Security components to public\")\n    except Group.DoesNotExist:\n        logger.warning(\"Security group not found, skipping reverse migration\")\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.migrations.0019_set_security_components_private.set_security_components_to_private","title":"set_security_components_to_private","text":"<pre><code>set_security_components_to_private(apps, schema_editor)\n</code></pre> <p>Set all components belonging to the Security group as private, except 'Bot management &amp; rate limiting &amp; WAF'.</p> Source code in <code>src/firefighter/incidents/migrations/0019_set_security_components_private.py</code> <pre><code>def set_security_components_to_private(apps, schema_editor):\n    \"\"\"Set all components belonging to the Security group as private, except 'Bot management &amp; rate limiting &amp; WAF'.\"\"\"\n    Component = apps.get_model(\"incidents\", \"Component\")\n    Group = apps.get_model(\"incidents\", \"Group\")\n\n    try:\n        security_group = Group.objects.get(name=\"Security\")\n        components = Component.objects.filter(group=security_group).exclude(\n            name=\"Bot management &amp; rate limiting &amp; WAF\"\n        )\n\n        updated_count = 0\n        for component in components:\n            if not component.private:\n                logger.info(f\"Setting component '{component.name}' to private\")\n                component.private = True\n                component.save()\n                updated_count += 1\n\n        logger.info(f\"Updated {updated_count} Security components to private\")\n    except Group.DoesNotExist:\n        logger.warning(\"Security group not found, skipping migration\")\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.migrations.0021_copy_component_data_to_incident_category","title":"0021_copy_component_data_to_incident_category","text":"<p>Functions:</p> <ul> <li> <code>copy_component_data_to_incident_category</code>             \u2013              <p>Copy all data from Component to IncidentCategory</p> </li> <li> <code>reverse_copy_component_data_to_incident_category</code>             \u2013              <p>Reverse operation - copy IncidentCategory back to Component if needed</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.migrations.0021_copy_component_data_to_incident_category.copy_component_data_to_incident_category","title":"copy_component_data_to_incident_category","text":"<pre><code>copy_component_data_to_incident_category(apps, schema_editor)\n</code></pre> <p>Copy all data from Component to IncidentCategory</p> Source code in <code>src/firefighter/incidents/migrations/0021_copy_component_data_to_incident_category.py</code> <pre><code>def copy_component_data_to_incident_category(apps, schema_editor):\n    \"\"\"Copy all data from Component to IncidentCategory\"\"\"\n    Component = apps.get_model(\"incidents\", \"Component\")\n    IncidentCategory = apps.get_model(\"incidents\", \"IncidentCategory\")\n\n    # Copy all components to incident categories with the same fields\n    for component in Component.objects.all():\n        IncidentCategory.objects.create(\n            id=component.id,  # Keep same UUID\n            name=component.name,\n            description=component.description,\n            order=component.order,\n            private=component.private,\n            deploy_warning=component.deploy_warning,\n            created_at=component.created_at,\n            updated_at=component.updated_at,\n            group=component.group,\n        )\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.migrations.0021_copy_component_data_to_incident_category.reverse_copy_component_data_to_incident_category","title":"reverse_copy_component_data_to_incident_category","text":"<pre><code>reverse_copy_component_data_to_incident_category(apps, schema_editor)\n</code></pre> <p>Reverse operation - copy IncidentCategory back to Component if needed</p> Source code in <code>src/firefighter/incidents/migrations/0021_copy_component_data_to_incident_category.py</code> <pre><code>def reverse_copy_component_data_to_incident_category(apps, schema_editor):\n    \"\"\"Reverse operation - copy IncidentCategory back to Component if needed\"\"\"\n    Component = apps.get_model(\"incidents\", \"Component\")\n    IncidentCategory = apps.get_model(\"incidents\", \"IncidentCategory\")\n\n    # This would only work if Component table still exists during rollback\n    for incident_category in IncidentCategory.objects.all():\n        Component.objects.create(\n            id=incident_category.id,\n            name=incident_category.name,\n            description=incident_category.description,\n            order=incident_category.order,\n            private=incident_category.private,\n            deploy_warning=incident_category.deploy_warning,\n            created_at=incident_category.created_at,\n            updated_at=incident_category.updated_at,\n            group=incident_category.group,\n        )\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.migrations.0023_populate_incident_category_references","title":"0023_populate_incident_category_references","text":"<p>Functions:</p> <ul> <li> <code>populate_incident_category_references</code>             \u2013              <p>Copy component references to incident_category references</p> </li> <li> <code>reverse_populate_incident_category_references</code>             \u2013              <p>Reverse: copy incident_category references back to component references</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.migrations.0023_populate_incident_category_references.populate_incident_category_references","title":"populate_incident_category_references","text":"<pre><code>populate_incident_category_references(apps, schema_editor)\n</code></pre> <p>Copy component references to incident_category references</p> Source code in <code>src/firefighter/incidents/migrations/0023_populate_incident_category_references.py</code> <pre><code>def populate_incident_category_references(apps, schema_editor):\n    \"\"\"Copy component references to incident_category references\"\"\"\n    Incident = apps.get_model(\"incidents\", \"Incident\")\n    IncidentUpdate = apps.get_model(\"incidents\", \"IncidentUpdate\")\n\n    # Update all incidents to point to the corresponding incident category\n    incidents_updated = 0\n    for incident in Incident.objects.select_related(\"component\").all():\n        if incident.component:\n            # Find the corresponding incident category (same UUID)\n            incident.incident_category_id = incident.component_id\n            incident.save(update_fields=[\"incident_category\"])\n            incidents_updated += 1\n\n    # Update all incident updates to point to the corresponding incident category\n    updates_updated = 0\n    for incident_update in IncidentUpdate.objects.select_related(\"component\").all():\n        if incident_update.component:\n            incident_update.incident_category_id = incident_update.component_id\n            incident_update.save(update_fields=[\"incident_category\"])\n            updates_updated += 1\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.migrations.0023_populate_incident_category_references.reverse_populate_incident_category_references","title":"reverse_populate_incident_category_references","text":"<pre><code>reverse_populate_incident_category_references(apps, schema_editor)\n</code></pre> <p>Reverse: copy incident_category references back to component references</p> Source code in <code>src/firefighter/incidents/migrations/0023_populate_incident_category_references.py</code> <pre><code>def reverse_populate_incident_category_references(apps, schema_editor):\n    \"\"\"Reverse: copy incident_category references back to component references\"\"\"\n    Incident = apps.get_model(\"incidents\", \"Incident\")\n    IncidentUpdate = apps.get_model(\"incidents\", \"IncidentUpdate\")\n\n    # Restore component references from incident_category references\n    for incident in Incident.objects.select_related(\"incident_category\").all():\n        if incident.incident_category:\n            incident.component_id = incident.incident_category_id\n            incident.save(update_fields=[\"component\"])\n\n    for incident_update in IncidentUpdate.objects.select_related(\"incident_category\").all():\n        if incident_update.incident_category:\n            incident_update.component_id = incident_update.incident_category_id\n            incident_update.save(update_fields=[\"component\"])\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.models","title":"models","text":"<p>Modules:</p> <ul> <li> <code>group</code>           \u2013            </li> <li> <code>impact</code>           \u2013            </li> <li> <code>incident</code>           \u2013            </li> <li> <code>incident_category</code>           \u2013            </li> <li> <code>incident_cost</code>           \u2013            </li> <li> <code>incident_cost_type</code>           \u2013            </li> <li> <code>incident_update</code>           \u2013            </li> <li> <code>milestone_type</code>           \u2013            <p>MilestoneType model.</p> </li> <li> <code>priority</code>           \u2013            </li> <li> <code>user</code>           \u2013            </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.models.group","title":"group","text":"<p>Classes:</p> <ul> <li> <code>Group</code>           \u2013            <p>Group of [firefighter.incidents.models.incident_category.IncidentCategory]. Not a group of users.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.models.group.Group","title":"Group","text":"<p>               Bases: <code>Model</code></p> <p>Group of [firefighter.incidents.models.incident_category.IncidentCategory]. Not a group of users.</p>"},{"location":"reference/incidents/#firefighter.incidents.models.impact","title":"impact","text":"<p>Classes:</p> <ul> <li> <code>Impact</code>           \u2013            </li> <li> <code>LevelChoices</code>           \u2013            </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.models.impact.Impact","title":"Impact","text":"<p>               Bases: <code>Model</code></p> <p>Methods:</p> <ul> <li> <code>clean</code>             \u2013              <p>Ensure impact_type matches impact_level.impact_type.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.models.impact.Impact.clean","title":"clean","text":"<pre><code>clean() -&gt; None\n</code></pre> <p>Ensure impact_type matches impact_level.impact_type.</p> <p>Check constraints can't span relationships, so we have to do this manually.</p> Source code in <code>src/firefighter/incidents/models/impact.py</code> <pre><code>def clean(self) -&gt; None:\n    \"\"\"Ensure impact_type matches impact_level.impact_type.\n\n    Check constraints can't span relationships, so we have to do this manually.\n    \"\"\"\n    if self.impact_type != self.impact_level.impact_type:\n        raise ValidationError(\"impact_type must match impact_level.impact_type\")\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.models.impact.LevelChoices","title":"LevelChoices","text":"<p>               Bases: <code>TextChoices</code></p> <p>Attributes:</p> <ul> <li> <code>emoji</code>               (<code>str</code>)           \u2013            <p>Send emoji un function of priority.</p> </li> <li> <code>priority</code>               (<code>int</code>)           \u2013            <p>Send level choice priority .</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.models.impact.LevelChoices.emoji","title":"emoji  <code>property</code>","text":"<pre><code>emoji: str\n</code></pre> <p>Send emoji un function of priority.</p>"},{"location":"reference/incidents/#firefighter.incidents.models.impact.LevelChoices.priority","title":"priority  <code>property</code>","text":"<pre><code>priority: int\n</code></pre> <p>Send level choice priority .</p>"},{"location":"reference/incidents/#firefighter.incidents.models.incident","title":"incident","text":"<p>Classes:</p> <ul> <li> <code>Incident</code>           \u2013            </li> <li> <code>IncidentFilterSet</code>           \u2013            <p>Set of filters for incidents, shared by Web UI and API.</p> </li> <li> <code>IncidentManager</code>           \u2013            </li> </ul> <p>Functions:</p> <ul> <li> <code>incident_category_filter_choices_queryset</code>             \u2013              <p>Queryset for choices of IncidentCategories in IncidentFilterSet.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.models.incident.Incident","title":"Incident","text":"<p>               Bases: <code>Model</code></p> <p>Methods:</p> <ul> <li> <code>build_invite_list</code>             \u2013              <p>Send a Django Signal to get the list of users to invite from different integrations (Slack, Confluence, PagerDuty...).</p> </li> <li> <code>compute_metrics</code>             \u2013              <p>Compute all metrics (time to fix, ...) from events.</p> </li> <li> <code>missing_milestones</code>             \u2013              <p>Returns all required Milestones still needed to compute the metrics.</p> </li> <li> <code>update_roles</code>             \u2013              <p>Update the roles related to an incident, and create an IncidentUpdate.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>status_page_url</code>               (<code>str</code>)           \u2013            <p>Similar with <code>get_absolute_url</code> but with full domain, to be used out of the website.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.models.incident.Incident.status_page_url","title":"status_page_url  <code>property</code>","text":"<pre><code>status_page_url: str\n</code></pre> <p>Similar with <code>get_absolute_url</code> but with full domain, to be used out of the website.</p>"},{"location":"reference/incidents/#firefighter.incidents.models.incident.Incident.build_invite_list","title":"build_invite_list","text":"<pre><code>build_invite_list() -&gt; list[User]\n</code></pre> <p>Send a Django Signal to get the list of users to invite from different integrations (Slack, Confluence, PagerDuty...).</p> <p>Returns:</p> <ul> <li> <code>list[User]</code>           \u2013            <p>list[User]: Potentially non-unique list of Users to invite</p> </li> </ul> Source code in <code>src/firefighter/incidents/models/incident.py</code> <pre><code>def build_invite_list(self) -&gt; list[User]:\n    \"\"\"Send a Django Signal to get the list of users to invite from different integrations (Slack, Confluence, PagerDuty...).\n\n    Returns:\n        list[User]: Potentially non-unique list of Users to invite\n    \"\"\"\n    users_list: list[User] = []\n\n    # Send signal to modules (Confluence, PagerDuty...)\n    result_users: list[tuple[Any, Exception | Iterable[User]]] = (\n        signals.get_invites.send_robust(sender=None, incident=self)\n    )\n\n    # Aggregate the results\n    for provider in result_users:\n        if isinstance(provider[1], BaseException):\n            logger.warning(\n                f\"Provider {provider[0]} returned an error getting Users to invite: {provider[1]}.\"\n            )\n            continue\n\n        users_list.extend(provider[1])\n\n    logger.debug(f\"Get invites users list: {users_list}\")\n\n    return users_list\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.models.incident.Incident.compute_metrics","title":"compute_metrics","text":"<pre><code>compute_metrics(*, purge: bool = False) -&gt; None\n</code></pre> <p>Compute all metrics (time to fix, ...) from events.</p> Source code in <code>src/firefighter/incidents/models/incident.py</code> <pre><code>def compute_metrics(self, *, purge: bool = False) -&gt; None:\n    \"\"\"Compute all metrics (time to fix, ...) from events.\"\"\"\n    latest_updates_by_type = self.latest_updates_by_type\n\n    for metric_type in MetricType.objects.all():\n        lhs_type = metric_type.milestone_lhs.event_type\n        rhs_type = metric_type.milestone_rhs.event_type\n\n        lhs = latest_updates_by_type.get(lhs_type, None)\n        rhs = latest_updates_by_type.get(rhs_type, None)\n\n        if not lhs or not lhs.event_ts:\n            logger.info(\n                f\"Missing operand '{lhs_type}' on metric {metric_type.type} for #{self.id}\"\n            )\n            if purge:\n                IncidentMetric.objects.filter(\n                    incident=self, metric_type=metric_type\n                ).delete()\n            continue\n        if not rhs or not rhs.event_ts:\n            logger.info(\n                f\"Missing operand '{rhs_type}' on metric {metric_type.type} for #{self.id}\"\n            )\n            if purge:\n                IncidentMetric.objects.filter(\n                    incident=self, metric_type=metric_type\n                ).delete()\n            continue\n        duration = lhs.event_ts - rhs.event_ts\n        if duration &lt; TD0:\n            logger.warning(\n                f\"Tried to compute a negative metric! Metric {metric_type.type} for #{self.id} has a duration of {duration} ({lhs.event_type}:{lhs.event_ts} - {rhs.event_type}:{rhs.event_ts})\"\n            )\n            if purge:\n                IncidentMetric.objects.filter(\n                    incident=self, metric_type=metric_type\n                ).delete()\n            continue\n        IncidentMetric.objects.update_or_create(\n            incident=self,\n            metric_type=metric_type,\n            defaults={\"duration\": duration},\n        )\n    self.save()\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.models.incident.Incident.missing_milestones","title":"missing_milestones","text":"<pre><code>missing_milestones() -&gt; list[str]\n</code></pre> <p>Returns all required Milestones still needed to compute the metrics.</p> Source code in <code>src/firefighter/incidents/models/incident.py</code> <pre><code>def missing_milestones(self) -&gt; list[str]:\n    \"\"\"Returns all required Milestones still needed to compute the metrics.\"\"\"\n    if self.ignore:\n        return []\n\n    # We get a list of all event_type of IncidentUpdates...\n    milestones_list = (\n        IncidentUpdate.objects.filter(\n            incident_id=self.id,\n            event_ts__isnull=False,\n            event_type__isnull=False,\n        )\n        .aggregate(milestone_list=ArrayAgg(\"event_type\", distinct=True, default=[]))\n        .get(\"milestone_list\", [])\n    )\n\n    incident_milestones: set[str] = set(cast('list[\"str\"]', milestones_list))\n    required_milestone_types = set(\n        MilestoneType.objects.filter(required=True).values_list(\n            \"event_type\", flat=True\n        )\n    )\n    # And we make the differences of the sets\n    return list(required_milestone_types - incident_milestones)\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.models.incident.Incident.update_roles","title":"update_roles","text":"<pre><code>update_roles(updater: User, roles_mapping: dict[str, User | None] | dict[str, User]) -&gt; IncidentUpdate\n</code></pre> <p>Update the roles related to an incident, and create an IncidentUpdate. For each role, provide a User or None.</p> <p>This function will update the incident, create an IncidentUpdate, and trigger the incident_updated signal, with <code>update_roles</code> sender.</p> <p>Parameters:</p> <ul> <li> <code>updater</code>               (<code>User</code>)           \u2013            <p>The user who is updating the roles.</p> </li> <li> <code>roles_mapping</code>               (<code>dict[str, User | None]</code>)           \u2013            <p>A dict of roles to update, with the new User or None. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>IncidentUpdate</code> (              <code>IncidentUpdate</code> )          \u2013            <p>The created IncidentUpdate with the updated roles.</p> </li> </ul> Source code in <code>src/firefighter/incidents/models/incident.py</code> <pre><code>def update_roles(\n    self,\n    updater: User,\n    roles_mapping: dict[str, User | None] | dict[str, User],\n) -&gt; IncidentUpdate:\n    \"\"\"Update the roles related to an incident, and create an IncidentUpdate.\n    For each role, provide a User or None.\n\n    This function will update the incident, create an [IncidentUpdate][firefighter.incidents.models.incident_update.IncidentUpdate], and trigger the [incident_updated][firefighter.incidents.signals.incident_updated] signal, with `update_roles` sender.\n\n    Args:\n        updater (User): The user who is updating the roles.\n        roles_mapping (dict[str, User | None], optional): A dict of roles to update, with the new User or None. Defaults to None.\n\n    Returns:\n        IncidentUpdate: The created IncidentUpdate with the updated roles.\n    \"\"\"\n    updated_fields: list[str] = []\n\n    # Handle roles\n    for role_slug, assigned_user in roles_mapping.items():\n        try:\n            role_type = IncidentRoleType.objects.get(slug=role_slug)\n        except IncidentRoleType.DoesNotExist:\n            logger.warning(f\"Unknown role type: {role_slug}\")\n            continue\n        if assigned_user is not None:\n            IncidentRole.objects.update_or_create(\n                incident=self,\n                role_type=role_type,\n                defaults={\"user\": assigned_user},\n            )\n            logger.debug(\n                f\"Updated role {role_slug} to user ID={assigned_user.id} for #{self.id}\"\n            )\n            updated_fields.append(f\"{role_slug}_id\")\n        elif role_type.required:\n            logger.warning(f\"Cannot remove required role: {role_slug}\")\n        else:\n            IncidentRole.objects.filter(incident=self, role_type=role_type).delete()\n            updated_fields.append(f\"{role_slug}_id\")\n\n    # Handle legacy roles with IncidentUpdate\n    # XXX(dugab): Custom roles are not saved in IncidentUpdate at the moment\n\n    incident_update = IncidentUpdate(\n        incident=self,\n        created_by=updater,\n        commander=roles_mapping.get(\"commander\"),\n        communication_lead=roles_mapping.get(\"communication_lead\"),\n    )\n    incident_update.save()\n\n    incident_updated.send_robust(\n        \"update_roles\",\n        incident=self,\n        incident_update=incident_update,\n        updated_fields=updated_fields,\n    )\n\n    return incident_update\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.models.incident.IncidentFilterSet","title":"IncidentFilterSet","text":"<p>               Bases: <code>FilterSet</code></p> <p>Set of filters for incidents, shared by Web UI and API.</p> <p>Methods:</p> <ul> <li> <code>incident_search</code>             \u2013              <p>Search incidents by title, description, and ID.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.models.incident.IncidentFilterSet.incident_search","title":"incident_search  <code>staticmethod</code>","text":"<pre><code>incident_search(queryset: QuerySet[Incident], _name: str, value: str) -&gt; QuerySet[Incident]\n</code></pre> <p>Search incidents by title, description, and ID.</p> <p>Parameters:</p> <ul> <li> <code>queryset</code>               (<code>QuerySet[Incident]</code>)           \u2013            <p>Queryset to search in.</p> </li> <li> <code>_name</code>               (<code>str</code>)           \u2013            </li> <li> <code>value</code>               (<code>str</code>)           \u2013            <p>Value to search for.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>QuerySet[Incident]</code>           \u2013            <p>QuerySet[Incident]: Search results.</p> </li> </ul> Source code in <code>src/firefighter/incidents/models/incident.py</code> <pre><code>@staticmethod\ndef incident_search(\n    queryset: QuerySet[Incident], _name: str, value: str\n) -&gt; QuerySet[Incident]:\n    \"\"\"Search incidents by title, description, and ID.\n\n    Args:\n        queryset (QuerySet[Incident]): Queryset to search in.\n        _name:\n        value (str): Value to search for.\n\n    Returns:\n        QuerySet[Incident]: Search results.\n    \"\"\"\n    return Incident.objects.search(queryset=queryset, search_term=value)[0]\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.models.incident.IncidentManager","title":"IncidentManager","text":"<p>               Bases: <code>Manager['Incident']</code></p> <p>Methods:</p> <ul> <li> <code>declare</code>             \u2013              <p>Create an Incident and its first IncidentUpdate.</p> </li> <li> <code>search</code>             \u2013              <p>Search for incidents using a search term, on the title and description fields.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.models.incident.IncidentManager.declare","title":"declare","text":"<pre><code>declare(**kwargs: Any) -&gt; Incident\n</code></pre> <p>Create an Incident and its first IncidentUpdate. Send the incident_created signal. Returns the saved incident, no need to .save().</p> Source code in <code>src/firefighter/incidents/models/incident.py</code> <pre><code>def declare(self, **kwargs: Any) -&gt; Incident:\n    \"\"\"Create an Incident and its first IncidentUpdate.\n    Send the incident_created signal.\n    Returns the saved incident, no need to .save().\n    \"\"\"\n    with transaction.atomic():\n        if \"private\" not in kwargs:\n            kwargs[\"private\"] = kwargs[\"incident_category\"].private\n        if \"severity\" not in kwargs and \"priority\" in kwargs:\n            kwargs[\"severity\"] = Severity.objects.get(\n                value=kwargs[\"priority\"].value\n            )\n        incident: Incident = super().create(**kwargs)\n        for required_default_role in IncidentRoleType.objects.filter(required=True):\n            incident.roles_set.add(\n                IncidentRole.objects.create(\n                    incident=incident,\n                    role_type=required_default_role,\n                    user=incident.created_by,\n                )\n            )\n\n        first_incident_update = IncidentUpdate(\n            title=incident.title,\n            description=incident.description,\n            status=incident.status,  # type: ignore[misc]\n            priority=incident.priority,\n            incident_category=incident.incident_category,\n            created_by=incident.created_by,\n            commander=incident.created_by,\n            incident=incident,\n            event_ts=incident.created_at,\n        )\n\n        milestone_declared = IncidentUpdate(\n            created_by=incident.created_by,\n            incident=incident,\n            event_type=\"declared\",\n            event_ts=incident.created_at,\n        )\n        first_incident_update.save()\n        milestone_declared.save()\n\n        incident.members.add(incident.created_by)\n\n    # Either we have an incident or an error was thrown\n    incident_created.send_robust(sender=__name__, incident=incident)\n    return incident\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.models.incident.IncidentManager.search","title":"search  <code>staticmethod</code>","text":"<pre><code>search(queryset: QuerySet[Incident] | None, search_term: str) -&gt; tuple[QuerySet[Incident], bool]\n</code></pre> <p>Search for incidents using a search term, on the title and description fields.</p> <p>Parameters:</p> <ul> <li> <code>queryset</code>               (<code>QuerySet[Incident] | None</code>)           \u2013            <p>Queryset to search in. If None, search in all incidents. The Queryset allows to search on a subset of incidents (already filtered).</p> </li> <li> <code>search_term</code>               (<code>str</code>)           \u2013            <p>Search term.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple[QuerySet[Incident], bool]</code>           \u2013            <p>tuple[QuerySet[Incident], bool]: Queryset of incidents matching the search term, and a boolean indicating if the search may contain duplicates objects.</p> </li> </ul> Source code in <code>src/firefighter/incidents/models/incident.py</code> <pre><code>@staticmethod\ndef search(\n    queryset: QuerySet[Incident] | None, search_term: str\n) -&gt; tuple[QuerySet[Incident], bool]:\n    \"\"\"Search for incidents using a search term, on the title and description fields.\n\n    Args:\n        queryset (QuerySet[Incident] | None): Queryset to search in. If None, search in all incidents. The Queryset allows to search on a subset of incidents (already filtered).\n        search_term (str): Search term.\n\n    Returns:\n        tuple[QuerySet[Incident], bool]: Queryset of incidents matching the search term, and a boolean indicating if the search may contain duplicates objects.\n    \"\"\"\n    if queryset is None:\n        queryset = Incident.objects.all()\n\n    # If not search, return the original queryset\n    if search_term is None or search_term.strip() == \"\":\n        return queryset, False\n\n    queryset_search_id = None\n\n    # If the search is just an int, search for this ID + regular search\n    try:\n        search_term_as_int = int(search_term)\n    except ValueError:\n        pass\n    else:\n        queryset_search_id = deepcopy(queryset)\n        queryset_search_id = queryset_search_id.filter(id=search_term_as_int)\n\n    # Postgres search on title + description\n    # XXX Improve search performance and relevance\n    vector = SearchVector(\"title\", config=\"english\", weight=\"A\") + SearchVector(\n        \"description\", config=\"english\", weight=\"B\"\n    )\n    query = SearchQuery(search_term, config=\"english\", search_type=\"websearch\")\n    queryset = (\n        queryset.annotate(rank=SearchRank(vector, query))\n        .filter(rank__gte=0.1)\n        .order_by(\"-rank\")\n    )\n\n    # Add the search by id to the search by text if needed\n    if queryset_search_id:\n        queryset |= queryset_search_id  # type: ignore[operator]\n\n    return queryset, False\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.models.incident.incident_category_filter_choices_queryset","title":"incident_category_filter_choices_queryset","text":"<pre><code>incident_category_filter_choices_queryset(_: Any) -&gt; QuerySet[IncidentCategory]\n</code></pre> <p>Queryset for choices of IncidentCategories in IncidentFilterSet. Moved it as a function because models are not loaded when creating filters.</p> Source code in <code>src/firefighter/incidents/models/incident.py</code> <pre><code>def incident_category_filter_choices_queryset(_: Any) -&gt; QuerySet[IncidentCategory]:\n    \"\"\"Queryset for choices of IncidentCategories in IncidentFilterSet.\n    Moved it as a function because models are not loaded when creating filters.\n    \"\"\"\n    return (\n        IncidentCategory.objects.all()\n        .select_related(\"group\")\n        .order_by(\n            \"group__order\",\n            \"name\",\n        )\n    )\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.models.incident_category","title":"incident_category","text":"<p>Classes:</p> <ul> <li> <code>IncidentCategoryFilterSet</code>           \u2013            <p>Set of filters for IncidentCategory, share by Web UI and API.</p> </li> <li> <code>IncidentCategoryManager</code>           \u2013            </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.models.incident_category.IncidentCategoryFilterSet","title":"IncidentCategoryFilterSet","text":"<p>               Bases: <code>FilterSet</code></p> <p>Set of filters for IncidentCategory, share by Web UI and API.</p> <p>Methods:</p> <ul> <li> <code>incident_category_search</code>             \u2013              <p>Search incident categories by title, description, and ID.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.models.incident_category.IncidentCategoryFilterSet.incident_category_search","title":"incident_category_search  <code>staticmethod</code>","text":"<pre><code>incident_category_search(queryset: QuerySet[IncidentCategory], _name: str, value: str) -&gt; QuerySet[IncidentCategory]\n</code></pre> <p>Search incident categories by title, description, and ID.</p> <p>Parameters:</p> <ul> <li> <code>queryset</code>               (<code>QuerySet[IncidentCategory]</code>)           \u2013            <p>Queryset to search in.</p> </li> <li> <code>_name</code>               (<code>str</code>)           \u2013            </li> <li> <code>value</code>               (<code>str</code>)           \u2013            <p>Value to search for.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>QuerySet[IncidentCategory]</code>           \u2013            <p>QuerySet[IncidentCategory]: Search results.</p> </li> </ul> Source code in <code>src/firefighter/incidents/models/incident_category.py</code> <pre><code>@staticmethod\ndef incident_category_search(\n    queryset: QuerySet[IncidentCategory], _name: str, value: str\n) -&gt; QuerySet[IncidentCategory]:\n    \"\"\"Search incident categories by title, description, and ID.\n\n    Args:\n        queryset (QuerySet[IncidentCategory]): Queryset to search in.\n        _name:\n        value (str): Value to search for.\n\n    Returns:\n        QuerySet[IncidentCategory]: Search results.\n    \"\"\"\n    return IncidentCategory.objects.search(queryset=queryset, search_term=value)[0]\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.models.incident_category.IncidentCategoryManager","title":"IncidentCategoryManager","text":"<p>               Bases: <code>Manager['IncidentCategory']</code></p> <p>Methods:</p> <ul> <li> <code>queryset_with_mtbf</code>             \u2013              <p>Returns a queryset of incident categories with an additional <code>mtbf</code> field.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.models.incident_category.IncidentCategoryManager.queryset_with_mtbf","title":"queryset_with_mtbf","text":"<pre><code>queryset_with_mtbf(\n    date_from: datetime,\n    date_to: datetime,\n    queryset: QuerySet[IncidentCategory] | None = None,\n    metric_type: str = \"time_to_fix\",\n    field_name: str = \"mtbf\",\n) -&gt; QuerySet[IncidentCategory]\n</code></pre> <p>Returns a queryset of incident categories with an additional <code>mtbf</code> field.</p> Source code in <code>src/firefighter/incidents/models/incident_category.py</code> <pre><code>def queryset_with_mtbf(\n    self,\n    date_from: datetime,\n    date_to: datetime,\n    queryset: QuerySet[IncidentCategory] | None = None,\n    metric_type: str = \"time_to_fix\",\n    field_name: str = \"mtbf\",\n) -&gt; QuerySet[IncidentCategory]:\n    \"\"\"Returns a queryset of incident categories with an additional `mtbf` field.\"\"\"\n    date_to = min(date_to, datetime.now(tz=TZ))\n\n    date_interval = date_to - date_from\n    queryset = queryset or self.get_queryset()\n\n    return (\n        queryset.order_by(\"group__order\", \"order\")\n        .annotate(\n            metric_subquery=Subquery(\n                IncidentMetric.objects.filter(\n                    incident__incident_category=OuterRef(\"pk\"),\n                    metric_type__type=metric_type,\n                    incident__created_at__gte=date_from,\n                    incident__created_at__lte=date_to,\n                )\n                .values(\"incident__incident_category\")\n                .annotate(sum_downtime=Sum(\"duration\"))\n                .values(\"sum_downtime\")\n            )\n        )\n        .annotate(\n            incident_count=Count(\n                \"incident\",\n                filter=Q(\n                    incident__created_at__gte=date_from,\n                )\n                &amp; Q(\n                    incident__created_at__lte=date_to,\n                ),\n            ),\n            incidents_downtime=F(\"metric_subquery\"),\n            incident_uptime=Value(date_interval) - F(\"incidents_downtime\"),\n        )\n        .annotate(**{\n            field_name: Cast(\n                F(\"incident_uptime\") / F(\"incident_count\"),\n                output_field=DurationField(),\n            )\n        })\n    )\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.models.incident_cost","title":"incident_cost","text":"<p>Classes:</p> <ul> <li> <code>IncidentCost</code>           \u2013            <p>Incident Cost is inspired from dispatch.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.models.incident_cost.IncidentCost","title":"IncidentCost","text":"<p>               Bases: <code>Model</code></p> <p>Incident Cost is inspired from dispatch.</p>"},{"location":"reference/incidents/#firefighter.incidents.models.incident_cost_type","title":"incident_cost_type","text":"<p>Classes:</p> <ul> <li> <code>IncidentCostType</code>           \u2013            <p>Incident Cost Type is inspired from dispatch.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.models.incident_cost_type.IncidentCostType","title":"IncidentCostType","text":"<p>               Bases: <code>Model</code></p> <p>Incident Cost Type is inspired from dispatch.</p>"},{"location":"reference/incidents/#firefighter.incidents.models.incident_update","title":"incident_update","text":"<p>Classes:</p> <ul> <li> <code>IncidentUpdate</code>           \u2013            <p>IncidentUpdate represents a single update to an incident.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>set_event_ts</code>             \u2013              <p>Add a timestamp on every IncidentUpdate.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.models.incident_update.IncidentUpdate","title":"IncidentUpdate","text":"<p>               Bases: <code>Model</code></p> <p>IncidentUpdate represents a single update to an incident. One incident can have many incident updates. Only updated fields are stored in the incident update.</p>"},{"location":"reference/incidents/#firefighter.incidents.models.incident_update.set_event_ts","title":"set_event_ts","text":"<pre><code>set_event_ts(sender: Any, instance: IncidentUpdate, **kwargs: Any) -&gt; None\n</code></pre> <p>Add a timestamp on every IncidentUpdate. Not implemented using Django ORM auto_add as it would not make them user editable.</p> Source code in <code>src/firefighter/incidents/models/incident_update.py</code> <pre><code>@receiver(pre_save, sender=IncidentUpdate)\n# pylint: disable=unused-argument\ndef set_event_ts(sender: Any, instance: IncidentUpdate, **kwargs: Any) -&gt; None:\n    \"\"\"Add a timestamp on every IncidentUpdate.\n    Not implemented using Django ORM auto_add as it would not make them user editable.\n    \"\"\"\n    if instance.event_ts is None:\n        instance.event_ts = timezone.now()  # type: ignore\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.models.milestone_type","title":"milestone_type","text":"<p>MilestoneType model.</p> <p>Classes:</p> <ul> <li> <code>MilestoneType</code>           \u2013            <p>Represents a milestone type, also known as a key event time or event time.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.models.milestone_type.MilestoneType","title":"MilestoneType","text":"<p>               Bases: <code>Model</code></p> <p>Represents a milestone type, also known as a key event time or event time.</p>"},{"location":"reference/incidents/#firefighter.incidents.models.priority","title":"priority","text":"<p>Classes:</p> <ul> <li> <code>Priority</code>           \u2013            <p>A priority for an incident.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.models.priority.Priority","title":"Priority","text":"<p>               Bases: <code>Model</code></p> <p>A priority for an incident.</p>"},{"location":"reference/incidents/#firefighter.incidents.models.user","title":"user","text":"<p>Classes:</p> <ul> <li> <code>User</code>           \u2013            </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.models.user.User","title":"User","text":"<p>               Bases: <code>AbstractUser</code></p> <p>Attributes:</p> <ul> <li> <code>full_name</code>               (<code>str</code>)           \u2013            <p>User full name (first + last name). Looks for the first_name and last_name fields, then name, then username. Will return an empty string if none of these are set.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.models.user.User.full_name","title":"full_name  <code>property</code>","text":"<pre><code>full_name: str\n</code></pre> <p>User full name (first + last name). Looks for the first_name and last_name fields, then name, then username. Will return an empty string if none of these are set.</p>"},{"location":"reference/incidents/#firefighter.incidents.signals","title":"signals","text":"<p>Attributes:</p> <ul> <li> <code>create_incident_conversation</code>           \u2013            <p>Signal sent to create a conversation for an incident.</p> </li> <li> <code>get_invites</code>           \u2013            <p>Signal sent to retrieve the list of users to invite for an incident.</p> </li> <li> <code>incident_closed</code>           \u2013            <p>Signal sent when an incident is closed</p> </li> <li> <code>incident_created</code>           \u2013            <p>Signal sent when an incident is created</p> </li> <li> <code>incident_key_events_updated</code>           \u2013            <p>Signal sent when an incident's key events are updated.</p> </li> <li> <code>incident_updated</code>           \u2013            <p>Signal sent when an incident is updated.</p> </li> <li> <code>postmortem_created</code>           \u2013            <p>Signal sent when a postmortem is created.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.signals.create_incident_conversation","title":"create_incident_conversation  <code>module-attribute</code>","text":"<pre><code>create_incident_conversation = Signal()\n</code></pre> <p>Signal sent to create a conversation for an incident.</p> <p>Parameters:</p> <ul> <li> <code>incident</code>               (<code>Incident</code>)           \u2013            <p>The incident for which to create a conversation.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.signals.get_invites","title":"get_invites  <code>module-attribute</code>","text":"<pre><code>get_invites = Signal()\n</code></pre> <p>Signal sent to retrieve the list of users to invite for an incident.</p> <p>Parameters:</p> <ul> <li> <code>incident</code>               (<code>Incident</code>)           \u2013            <p>The incident for which to retrieve the list of users to invite.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>users</code> (              <code>list[User]</code> )          \u2013            <p>The list of users to invite.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.signals.incident_closed","title":"incident_closed  <code>module-attribute</code>","text":"<pre><code>incident_closed = Signal()\n</code></pre> <p>Signal sent when an incident is closed</p> <p>Parameters:</p> <ul> <li> <code>sender</code>               (<code>Any</code>)           \u2013            <p>The sender of the signal name</p> </li> <li> <code>incident</code>               (<code>Incident</code>)           \u2013            <p>The incident that was closed</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.signals.incident_created","title":"incident_created  <code>module-attribute</code>","text":"<pre><code>incident_created = Signal()\n</code></pre> <p>Signal sent when an incident is created</p> <p>Parameters:</p> <ul> <li> <code>incident</code>               (<code>Incident</code>)           \u2013            <p>The incident that was created</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.signals.incident_key_events_updated","title":"incident_key_events_updated  <code>module-attribute</code>","text":"<pre><code>incident_key_events_updated = Signal()\n</code></pre> <p>Signal sent when an incident's key events are updated.</p> <p>Parameters:</p> <ul> <li> <code>incident</code>               (<code>Incident</code>)           \u2013            <p>The incident that was updated</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.signals.incident_updated","title":"incident_updated  <code>module-attribute</code>","text":"<pre><code>incident_updated = Signal()\n</code></pre> <p>Signal sent when an incident is updated.</p> <p>Parameters:</p> <ul> <li> <code>sender</code>               (<code>str | Any</code>)           \u2013            <p>The sender of the signal name</p> </li> <li> <code>incident</code>               (<code>Incident</code>)           \u2013            <p>The incident that was updated</p> </li> <li> <code>incident_update</code>               (<code>IncidentUpdate</code>)           \u2013            <p>The incident update that was created</p> </li> <li> <code>update_fields</code>               (<code>list[str]</code>)           \u2013            <p>The fields that were updated</p> </li> <li> <code>old_priority</code>               (<code>Priority</code>)           \u2013            <p>The old priority of the incident (optional kwarg)</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.signals.postmortem_created","title":"postmortem_created  <code>module-attribute</code>","text":"<pre><code>postmortem_created = Signal()\n</code></pre> <p>Signal sent when a postmortem is created.</p> <p>Parameters:</p> <ul> <li> <code>sender</code>               (<code>str | Any</code>)           \u2013            <p>The sender of the signal name</p> </li> <li> <code>incident</code>               (<code>Incident</code>)           \u2013            <p>The incident for which the postmortem was created</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.tasks","title":"tasks","text":"<p>Modules:</p> <ul> <li> <code>updateoncall</code>           \u2013            </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.tasks.updateoncall","title":"updateoncall","text":"<p>Functions:</p> <ul> <li> <code>update_oncall</code>             \u2013              <p>Fetch current on-calls and update the on-call Slack topic and Confluence page.</p> </li> <li> <code>update_oncall_slack_topic</code>             \u2013              <p>TODO(gab) Move in the Slack app.</p> </li> <li> <code>update_oncall_views</code>             \u2013              <p>Updates the on-call Slack topic and Confluence page containing the info for the on-call personnel.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.tasks.updateoncall.update_oncall","title":"update_oncall","text":"<pre><code>update_oncall() -&gt; None\n</code></pre> <p>Fetch current on-calls and update the on-call Slack topic and Confluence page.</p> Source code in <code>src/firefighter/incidents/tasks/updateoncall.py</code> <pre><code>@shared_task(name=\"incidents.update_oncall\")\ndef update_oncall() -&gt; None:\n    \"\"\"Fetch current on-calls and update the on-call Slack topic and Confluence page.\"\"\"\n    chain: Signature[bool] = (\n        fetch_oncalls.s()  # pyright: ignore[reportUnboundVariable]\n        | update_oncall_views.s()\n    )\n    chain()\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.tasks.updateoncall.update_oncall_slack_topic","title":"update_oncall_slack_topic","text":"<pre><code>update_oncall_slack_topic(users: dict[str, User]) -&gt; bool\n</code></pre> <p>TODO(gab) Move in the Slack app.</p> Source code in <code>src/firefighter/incidents/tasks/updateoncall.py</code> <pre><code>def update_oncall_slack_topic(\n    users: dict[str, User],\n) -&gt; bool:\n    \"\"\"TODO(gab) Move in the Slack app.\"\"\"\n    if not settings.ENABLE_SLACK:\n        return False\n\n    oncall_topic = create_oncall_topic(users)\n    tech_incidents_conversation = Conversation.objects.get_or_none(tag=\"tech_incidents\")\n    if tech_incidents_conversation:\n        res = tech_incidents_conversation.update_topic(oncall_topic)\n        if res.get(\"ok\"):\n            logger.info(\n                f\"Updated on-call Slack topic on {tech_incidents_conversation}.\"\n            )\n            return True\n    else:\n        logger.warning(\n            \"Could not find tech_incidents conversation! Is there a channel with tag tech_incidents?\"\n        )\n        return False\n    logger.error(\"Failed to update on-call Slack topic.\")\n    return False\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.tasks.updateoncall.update_oncall_views","title":"update_oncall_views","text":"<pre><code>update_oncall_views(*_args: Any, **_kwargs: Any) -&gt; bool\n</code></pre> <p>Updates the on-call Slack topic and Confluence page containing the info for the on-call personnel.</p> Source code in <code>src/firefighter/incidents/tasks/updateoncall.py</code> <pre><code>@shared_task(name=\"incidents.update_oncall_views\")\ndef update_oncall_views(*_args: Any, **_kwargs: Any) -&gt; bool:\n    \"\"\"Updates the on-call Slack topic and Confluence page containing the info for the on-call personnel.\"\"\"\n    if not settings.ENABLE_PAGERDUTY:\n        logger.error(\"Can't update on-call users without PagerDuty enabled.\")\n        return False\n\n    oncall_users_grouped_per_ep = PagerDutyOncall.objects.get_current_oncalls_per_escalation_policy_name_first_responder()\n\n    # Check that we have Slack ID and handle for these users, if needed\n    if settings.ENABLE_SLACK:\n        for user in oncall_users_grouped_per_ep.values():\n            if not hasattr(user, \"slack_user\"):\n                SlackUser.objects.add_slack_id_to_user(user)\n                logger.debug(\"Added Slack ID to user: %s\", user)\n        update_oncall_slack_topic(oncall_users_grouped_per_ep)\n    else:\n        logger.warning(\"Not updating on-call Slack topic, Slack integration disabled.\")\n\n    update_oncall_confluence(oncall_users_grouped_per_ep)\n    logger.info(\"Updated on-call users on Confluence and Slack topic.\")\n    return True\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.views","title":"views","text":"<p>Modules:</p> <ul> <li> <code>components</code>           \u2013            </li> <li> <code>date_filter</code>           \u2013            </li> <li> <code>date_utils</code>           \u2013            </li> <li> <code>errors</code>           \u2013            <p>From Django default errors views.</p> </li> <li> <code>users</code>           \u2013            </li> <li> <code>views</code>           \u2013            </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.views.components","title":"components","text":"<p>Modules:</p> <ul> <li> <code>list</code>           \u2013            </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.views.components.list","title":"list","text":"<p>Classes:</p> <ul> <li> <code>IncidentCategoriesViewList</code>           \u2013            </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.views.components.list.IncidentCategoriesViewList","title":"IncidentCategoriesViewList","text":"<p>               Bases: <code>SingleTableMixin</code>, <code>FilterView</code></p> <p>Methods:</p> <ul> <li> <code>get_context_data</code>             \u2013              <p>No *args to pass.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.views.components.list.IncidentCategoriesViewList.get_context_data","title":"get_context_data","text":"<pre><code>get_context_data(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>No *args to pass.</p> Source code in <code>src/firefighter/incidents/views/components/list.py</code> <pre><code>def get_context_data(self, **kwargs: Any) -&gt; dict[str, Any]:\n    \"\"\"No *args to pass.\"\"\"\n    # Call the base implementation first to get a context\n    context = super().get_context_data(**kwargs)\n    context[\"filter_order\"] = [\n        \"search\",\n        \"metrics_period\",\n        \"group\",\n    ]\n    context[\"page_title\"] = \"Issue categories list\"\n    return context\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.views.date_filter","title":"date_filter","text":"<p>Functions:</p> <ul> <li> <code>get_date_range_from_special_date</code>             \u2013              <p>TODO Specify the year parameter (ISO or calendar).</p> </li> <li> <code>parse_moment</code>             \u2013              <p>Returns a :class:<code>slice</code> with the :func:<code>slice.start</code> and :func:<code>slice.stop</code> of the given moment.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.views.date_filter.get_date_range_from_special_date","title":"get_date_range_from_special_date","text":"<pre><code>get_date_range_from_special_date(unparsed_date: str) -&gt; tuple[datetime | None, datetime | None, str | None, str | None]\n</code></pre> <p>TODO Specify the year parameter (ISO or calendar).</p> Source code in <code>src/firefighter/incidents/views/date_filter.py</code> <pre><code>def get_date_range_from_special_date(\n    unparsed_date: str,\n) -&gt; tuple[datetime | None, datetime | None, str | None, str | None]:\n    \"\"\"TODO Specify the year parameter (ISO or calendar).\"\"\"\n    if \"-\" in unparsed_date:\n        logger.debug(\"Parsing range, splitting with /\")\n\n        if unparsed_date.count(\"-\") == 1:\n            split = unparsed_date.split(\"-\")\n        elif unparsed_date.count(\" - \") == 1:\n            split = unparsed_date.split(\" - \")\n        else:\n            err_msg = f\"Invalid range: {unparsed_date}. Only one separator is allowed\"\n            raise ValidationError(err_msg)\n        if len(split) == 2:\n            for i in range(2):\n                split[i] = split[i].strip()\n\n            beg = parse_moment(split[0])\n            end = parse_moment(split[1])\n            logger.debug(end)\n            return (\n                beg.start if beg else None,\n                end.stop if end else None,\n                None,\n                split[0] + \"-\" + split[1],\n            )\n        # TODO Message warning + logger.warning\n        raise ValidationError(\n            \"Invalid range: %(unparsed_date)s. Only one separator is allowed\",\n            params={\"unparsed_date\": unparsed_date},\n            code=\"invalid\",\n        )\n    try:\n        date_range = parse_moment(unparsed_date)\n    except ValueError as exc:\n        raise ValidationError(\n            \"Invalid range: %(unparsed_date)s. %(error)s\",\n            params={\"unparsed_date\": unparsed_date, \"error\": str(exc)},\n            code=\"invalid\",\n        ) from exc\n    if date_range:\n        return date_range.start, date_range.stop, None, \"TODO\"\n\n    # TODO Message warning + logger.warning\n    return None, None, None, None\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.views.date_filter.parse_moment","title":"parse_moment","text":"<pre><code>parse_moment(value: str) -&gt; slice | None\n</code></pre> <p>Returns a :class:<code>slice</code> with the :func:<code>slice.start</code> and :func:<code>slice.stop</code> of the given moment. If the moment is not a valid moment, returns None. If the moment is a point in time, returns a slice with the same start and stop.</p> Source code in <code>src/firefighter/incidents/views/date_filter.py</code> <pre><code>def parse_moment(value: str) -&gt; slice | None:\n    \"\"\"Returns a :class:`slice` with the :func:`slice.start` and :func:`slice.stop` of the given moment.\n    If the moment is not a valid moment, returns None.\n    If the moment is a point in time, returns a slice with the same start and stop.\n    \"\"\"\n    value = value.strip()\n\n    # Quarter/Week relative (current/previous quarter, current/previous week)\n    if value in SPECIAL_RANGES:\n        now = timezone.localtime(timezone.now())\n        returned_range = get_date_range_from_relative_calendar_value(value, now, value)\n        if None not in returned_range:\n            return slice(returned_range[0], returned_range[1])\n\n    # Match according to the regex (W20, Q4, YYYY-W20, YYYY-Q4...)\n    week_or_quarter_time_frame = (*get_date_range_from_calendar_value(value), value)\n    if None not in week_or_quarter_time_frame:\n        return slice(week_or_quarter_time_frame[0], week_or_quarter_time_frame[1])\n\n    # Match using dateparser (lots of formats)\n    return parse_date_natural(value)\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.views.date_utils","title":"date_utils","text":"<p>Functions:</p> <ul> <li> <code>get_bounds_from_calendar_year</code>             \u2013              <p>Calendar Year.</p> </li> <li> <code>get_bounds_from_year</code>             \u2013              <p>ISO Year.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.views.date_utils.get_bounds_from_calendar_year","title":"get_bounds_from_calendar_year","text":"<pre><code>get_bounds_from_calendar_year(year_value: int) -&gt; tuple[datetime, datetime, str]\n</code></pre> <p>Calendar Year.</p> Source code in <code>src/firefighter/incidents/views/date_utils.py</code> <pre><code>def get_bounds_from_calendar_year(year_value: int) -&gt; tuple[datetime, datetime, str]:\n    \"\"\"Calendar Year.\"\"\"\n    lower_bound = datetime(year_value, 1, 1, tzinfo=TZ)\n    upper_bound = datetime(year_value, 12, 31, 23, 59, 59, 999999, tzinfo=TZ)\n\n    return (\n        lower_bound,\n        upper_bound,\n        f\"{year_value}\",\n    )\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.views.date_utils.get_bounds_from_year","title":"get_bounds_from_year","text":"<pre><code>get_bounds_from_year(year_value: int) -&gt; tuple[datetime, datetime, str]\n</code></pre> <p>ISO Year.</p> Source code in <code>src/firefighter/incidents/views/date_utils.py</code> <pre><code>def get_bounds_from_year(year_value: int) -&gt; tuple[datetime, datetime, str]:\n    \"\"\"ISO Year.\"\"\"\n    lower_bound = datetime.fromisocalendar(year_value, 1, 1)\n    upper_week_nb = date(year_value, 12, 28).isocalendar()[1]\n    upper_bound = datetime.combine(\n        date.fromisocalendar(year=year_value, week=upper_week_nb, day=7),\n        time(23, 59, 59, 999999),\n    )\n\n    return *make_bounds_timezone_aware(lower_bound, upper_bound), f\"ISO{year_value}\"\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.views.errors","title":"errors","text":"<p>From Django default errors views. https://github.com/django/django/blob/0dd29209091280ccf34e07c9468746c396b7778e/django/views/defaults.py.</p> <p>Functions:</p> <ul> <li> <code>bad_request</code>             \u2013              <p>400 error handler.</p> </li> <li> <code>page_not_found</code>             \u2013              <p>Default 404 handler.</p> </li> <li> <code>permission_denied</code>             \u2013              <p>Permission denied (403) handler.</p> </li> <li> <code>server_error</code>             \u2013              <p>500 error handler.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.views.errors.bad_request","title":"bad_request","text":"<pre><code>bad_request(request: HttpRequest, exception: Exception, template_name: str = ERROR_400_TEMPLATE_NAME) -&gt; HttpResponse\n</code></pre> <p>400 error handler.</p> <p>Templates: :template:<code>400.html</code> Context: None</p> Source code in <code>src/firefighter/incidents/views/errors.py</code> <pre><code>@requires_csrf_token\ndef bad_request(\n    request: HttpRequest,\n    exception: Exception,\n    template_name: str = ERROR_400_TEMPLATE_NAME,\n) -&gt; HttpResponse:\n    \"\"\"400 error handler.\n\n    Templates: :template:`400.html`\n    Context: None\n    \"\"\"\n    if (\n        request.headers.get(\"Accept\", \"\") == JSON_CONTENT_TYPE\n        or request.headers.get(\"Content-Type\", \"\") == JSON_CONTENT_TYPE\n    ):\n        return JsonHttpResponseBadRequest({\n            \"error\": {\"app_code\": \"BAD_REQUEST\", \"message\": \"Bad request\"}\n        })\n    context = {\n        \"request_path\": quote(request.path),\n        \"page_title\": \"Bad request\",\n        \"APP_DISPLAY_NAME\": settings.APP_DISPLAY_NAME,\n        \"title\": \"Bad request\",\n        \"code\": \"400\",\n        \"message\": \"Please check the URL in the address bar and try again.\",\n    }\n    try:\n        template = loader.get_template(template_name)\n    except TemplateDoesNotExist:\n        if template_name != ERROR_400_TEMPLATE_NAME:\n            # Reraise if it's a missing custom template.\n            raise\n        return HttpResponseBadRequest(\n            BACKUP_ERROR_PAGE_TEMPLATE % {\"title\": \"Bad Request (400)\", \"details\": \"\"},\n        )\n    # No exception content is passed to the template, to not disclose any\n    # sensitive information.\n    return HttpResponseBadRequest(template.render(context))\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.views.errors.page_not_found","title":"page_not_found","text":"<pre><code>page_not_found(request: HttpRequest, exception: Exception, template_name: str = ERROR_404_TEMPLATE_NAME) -&gt; HttpResponse\n</code></pre> <p>Default 404 handler.</p> <p>Templates: :template:<code>404.html</code> Context:     request_path         The path of the requested URL (e.g., '/app/pages/bad_page/'). It's         quoted to prevent a content injection attack.     exception         The message from the exception which triggered the 404 (if one was         supplied), or the exception class name</p> Source code in <code>src/firefighter/incidents/views/errors.py</code> <pre><code>@requires_csrf_token\ndef page_not_found(\n    request: HttpRequest,\n    exception: Exception,\n    template_name: str = ERROR_404_TEMPLATE_NAME,\n) -&gt; HttpResponse:\n    \"\"\"Default 404 handler.\n\n    Templates: :template:`404.html`\n    Context:\n        request_path\n            The path of the requested URL (e.g., '/app/pages/bad_page/'). It's\n            quoted to prevent a content injection attack.\n        exception\n            The message from the exception which triggered the 404 (if one was\n            supplied), or the exception class name\n    \"\"\"\n    if (\n        request.headers.get(\"Accept\", \"\") == JSON_CONTENT_TYPE\n        or request.headers.get(\"Content-Type\", \"\") == JSON_CONTENT_TYPE\n    ):\n        return JsonHttpResponseNotFound({\n            \"error\": {\"app_code\": \"NOT_FOUND\", \"message\": \"Page not found\"}\n        })\n    exception_repr = exception.__class__.__name__\n    # Try to get an \"interesting\" exception message, if any (and not the ugly\n    # Resolver404 dictionary)\n    try:\n        message = exception.args[0] if exception.args else \"\"\n    except (AttributeError, IndexError):\n        logger.exception(\"Error in page_not_found\")\n    else:\n        if isinstance(message, str):\n            exception_repr = message\n    context = {\n        \"request_path\": quote(request.path),\n        \"exception\": exception_repr,\n        \"page_title\": \"Page not found\",\n        \"title\": \"Page not found\",\n        \"code\": \"404\",\n        \"message\": \"Please check the URL in the address bar and try again.\",\n    }\n\n    try:\n        template = loader.get_template(template_name)\n        body = template.render(context, request)\n    except TemplateDoesNotExist:\n        if template_name != ERROR_404_TEMPLATE_NAME:\n            # Reraise if it's a missing custom template.\n            raise\n        # Render template (even though there are no substitutions) to allow\n        # inspecting the context in tests.\n        template_backup = Engine().from_string(\n            BACKUP_ERROR_PAGE_TEMPLATE\n            % {\n                \"title\": \"Not Found\",\n                \"details\": \"The requested resource was not found on this server.\",\n            },\n        )\n\n        body = template_backup.render(Context(context))\n    return HttpResponseNotFound(body)\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.views.errors.permission_denied","title":"permission_denied","text":"<pre><code>permission_denied(request: HttpRequest, exception: Exception, template_name: str = ERROR_403_TEMPLATE_NAME) -&gt; HttpResponse\n</code></pre> <p>Permission denied (403) handler.</p> <p>Templates: :template:<code>403.html</code> Context:     exception         The message from the exception which triggered the 403 (if one was         supplied).</p> <p>If the template does not exist, an HTTP 403 response containing the text \"403 Forbidden\" (as per RFC 7231) will be returned.</p> Source code in <code>src/firefighter/incidents/views/errors.py</code> <pre><code>@requires_csrf_token\ndef permission_denied(\n    request: HttpRequest,\n    exception: Exception,\n    template_name: str = ERROR_403_TEMPLATE_NAME,\n) -&gt; HttpResponse:\n    \"\"\"Permission denied (403) handler.\n\n    Templates: :template:`403.html`\n    Context:\n        exception\n            The message from the exception which triggered the 403 (if one was\n            supplied).\n\n    If the template does not exist, an HTTP 403 response containing the text\n    \"403 Forbidden\" (as per RFC 7231) will be returned.\n    \"\"\"\n    if (\n        request.headers.get(\"Accept\", \"\") == JSON_CONTENT_TYPE\n        or request.headers.get(\"Content-Type\", \"\") == JSON_CONTENT_TYPE\n    ):\n        return JsonHttpResponseForbidden({\n            \"error\": {\"app_code\": \"FORBIDDEN\", \"message\": \"Forbidden\"}\n        })\n    context = {\n        \"request_path\": quote(request.path),\n        \"exception\": str(exception),\n        \"page_title\": \"Forbidden\",\n        \"title\": \"Forbidden\",\n        \"code\": \"403\",\n        \"message\": \"You do not have permission to access this page.\",\n    }\n    try:\n        template = loader.get_template(template_name)\n    except TemplateDoesNotExist:\n        if template_name != ERROR_403_TEMPLATE_NAME:\n            # Reraise if it's a missing custom template.\n            raise\n        return HttpResponseForbidden(\n            BACKUP_ERROR_PAGE_TEMPLATE % {\"title\": \"403 Forbidden\", \"details\": \"\"},\n        )\n    return HttpResponseForbidden(template.render(request=request, context=context))\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.views.errors.server_error","title":"server_error","text":"<pre><code>server_error(request: HttpRequest, template_name: str = ERROR_500_TEMPLATE_NAME) -&gt; HttpResponse\n</code></pre> <p>500 error handler.</p> <p>Templates: :template:<code>500.html</code> Context: None</p> Source code in <code>src/firefighter/incidents/views/errors.py</code> <pre><code>@requires_csrf_token\ndef server_error(\n    request: HttpRequest, template_name: str = ERROR_500_TEMPLATE_NAME\n) -&gt; HttpResponse:\n    \"\"\"500 error handler.\n\n    Templates: :template:`500.html`\n    Context: None\n    \"\"\"\n    context = {\n        \"page_title\": \"Server error\",\n        \"title\": \"Server error\",\n        \"code\": \"500\",\n        \"message\": \"Please try again later. This issue has been logged, but feel free to raise the issue.\",\n        \"APP_DISPLAY_NAME\": settings.APP_DISPLAY_NAME,\n    }\n    if (\n        request.headers.get(\"Accept\", \"\") == JSON_CONTENT_TYPE\n        or request.headers.get(\"Content-Type\", \"\") == JSON_CONTENT_TYPE\n    ):\n        return JsonHttpResponseServerError({\n            \"error\": {\"app_code\": \"SERVER_ERROR\", \"message\": \"Server error\"}\n        })\n    try:\n        template = loader.get_template(template_name)\n    except TemplateDoesNotExist:\n        if template_name != ERROR_500_TEMPLATE_NAME:\n            # Reraise if it's a missing custom template.\n            raise\n        return HttpResponseServerError(\n            BACKUP_ERROR_PAGE_TEMPLATE % {\"title\": \"Server Error (500)\", \"details\": \"\"},\n        )\n    return HttpResponseServerError(template.render(context))\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.views.users","title":"users","text":"<p>Modules:</p> <ul> <li> <code>details</code>           \u2013            </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.views.users.details","title":"details","text":"<p>Classes:</p> <ul> <li> <code>UserDetailView</code>           \u2013            <p>In this view, be extra careful.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.views.users.details.UserDetailView","title":"UserDetailView","text":"<p>               Bases: <code>CustomDetailView[User]</code></p> <p>In this view, be extra careful.</p> <p>In this context, <code>user</code> is the logged_in user and <code>target_user</code> is the user of the profile being viewed.</p>"},{"location":"reference/incidents/#firefighter.incidents.views.views","title":"views","text":"<p>Classes:</p> <ul> <li> <code>DashboardView</code>           \u2013            </li> <li> <code>IncidentListView</code>           \u2013            </li> <li> <code>IncidentStatisticsView</code>           \u2013            </li> <li> <code>IncidentUpdateKeyEventsView</code>           \u2013            </li> <li> <code>ProcessAfterResponse</code>           \u2013            <p>Custom Response, to trigger the Slack workflow after creating the incident and returning HTTP 201.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.views.views.DashboardView","title":"DashboardView","text":"<p>               Bases: <code>ListView[Incident]</code></p> <p>Methods:</p> <ul> <li> <code>get_context_data</code>             \u2013              <p>No *args to pass.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.views.views.DashboardView.get_context_data","title":"get_context_data","text":"<pre><code>get_context_data(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>No *args to pass.</p> Source code in <code>src/firefighter/incidents/views/views.py</code> <pre><code>def get_context_data(self, **kwargs: Any) -&gt; dict[str, Any]:\n    \"\"\"No *args to pass.\"\"\"\n    # Call the base implementation first to get a context\n    context = super().get_context_data(**kwargs)\n    context[\"page_title\"] = \"Incidents Dashboard\"\n    return context\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.views.views.IncidentListView","title":"IncidentListView","text":"<p>               Bases: <code>SingleTableMixin</code>, <code>FilterView</code></p> <p>Methods:</p> <ul> <li> <code>get_context_data</code>             \u2013              <p>No *args to pass.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.views.views.IncidentListView.get_context_data","title":"get_context_data","text":"<pre><code>get_context_data(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>No *args to pass.</p> Source code in <code>src/firefighter/incidents/views/views.py</code> <pre><code>def get_context_data(self, **kwargs: Any) -&gt; dict[str, Any]:\n    \"\"\"No *args to pass.\"\"\"\n    # Call the base implementation first to get a context\n    context = super().get_context_data(**kwargs)\n    context[\"page_range\"] = context[\"table\"].paginator.get_elided_page_range(\n        context[\"table\"].page.number, on_each_side=2, on_ends=1\n    )\n    context[\"filter_order\"] = [\n        \"search\",\n        \"created_at\",\n        \"status\",\n        \"environment\",\n        \"priority\",\n        \"incident_category\",\n    ]\n\n    context[\"page_title\"] = \"Incidents List\"\n    context[\"api_url_export\"] = reverse(\"api:incidents-list\")\n    return context\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.views.views.IncidentStatisticsView","title":"IncidentStatisticsView","text":"<p>               Bases: <code>FilterView</code></p> <p>Methods:</p> <ul> <li> <code>get_context_data</code>             \u2013              <p>No *args to pass.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.views.views.IncidentStatisticsView.get_context_data","title":"get_context_data","text":"<pre><code>get_context_data(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>No *args to pass.</p> Source code in <code>src/firefighter/incidents/views/views.py</code> <pre><code>def get_context_data(self, **kwargs: Any) -&gt; dict[str, Any]:\n    \"\"\"No *args to pass.\"\"\"\n    context = super().get_context_data(**kwargs)\n    context[\"page_title\"] = \"Statistics\"\n    context[\"filter_order\"] = [\n        \"search\",\n        \"created_at\",\n        \"status\",\n        \"environment\",\n        \"priority\",\n        \"incident_category\",\n    ]\n    context_data = weekly_dashboard_context(\n        self.request, context.get(\"incidents_filtered\", [])\n    )\n    return {**context, **context_data}\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.views.views.IncidentUpdateKeyEventsView","title":"IncidentUpdateKeyEventsView","text":"<p>               Bases: <code>SingleObjectMixin[Incident]</code>, <code>LoginRequiredMixin</code>, <code>FormView[IncidentUpdateKeyEventsForm]</code></p> <p>Methods:</p> <ul> <li> <code>get_form</code>             \u2013              <p>Replace Markdown bold syntax with HTML bold syntax in form labels.</p> </li> </ul>"},{"location":"reference/incidents/#firefighter.incidents.views.views.IncidentUpdateKeyEventsView.get_form","title":"get_form","text":"<pre><code>get_form(form_class: type[IncidentUpdateKeyEventsForm] | None = None) -&gt; IncidentUpdateKeyEventsForm\n</code></pre> <p>Replace Markdown bold syntax with HTML bold syntax in form labels.</p> Source code in <code>src/firefighter/incidents/views/views.py</code> <pre><code>def get_form(\n    self, form_class: type[IncidentUpdateKeyEventsForm] | None = None\n) -&gt; IncidentUpdateKeyEventsForm:\n    \"\"\"Replace Markdown bold syntax with HTML bold syntax in form labels.\"\"\"\n    form = super().get_form(form_class)\n    for field in form.fields:\n        # Replace *ABC* with &lt;bold&gt;ABC&lt;/bold&gt;\n        form.fields[field].label = re.sub(\n            r\"\\*(.*?)\\*\", r\"&lt;b&gt;\\1&lt;/b&gt;\", str(form.fields[field].label)\n        )\n    return form\n</code></pre>"},{"location":"reference/incidents/#firefighter.incidents.views.views.ProcessAfterResponse","title":"ProcessAfterResponse","text":"<pre><code>ProcessAfterResponse(redirect_to: str, data: dict[str, Any], *args: Any, **kwargs: Any)\n</code></pre> <p>               Bases: <code>HttpResponseRedirect</code></p> <p>Custom Response, to trigger the Slack workflow after creating the incident and returning HTTP 201.</p> <p>TODO This does not work, the workflow is triggered before the response is sent. We need to do a celery task! TODO We need to redirect to the incident page or Slack conversation.</p> Source code in <code>src/firefighter/incidents/views/views.py</code> <pre><code>def __init__(\n    self, redirect_to: str, data: dict[str, Any], *args: Any, **kwargs: Any\n) -&gt; None:\n    super().__init__(redirect_to, *args, **kwargs)\n    self.data = data\n</code></pre>"},{"location":"reference/jira_app/","title":"jira_app","text":""},{"location":"reference/jira_app/#firefighter.jira_app","title":"jira_app","text":"<p>Modules:</p> <ul> <li> <code>client</code>           \u2013            </li> <li> <code>models</code>           \u2013            </li> <li> <code>utils</code>           \u2013            </li> </ul>"},{"location":"reference/jira_app/#firefighter.jira_app.client","title":"client","text":"<p>Classes:</p> <ul> <li> <code>JiraClient</code>           \u2013            </li> </ul>"},{"location":"reference/jira_app/#firefighter.jira_app.client.JiraClient","title":"JiraClient","text":"<pre><code>JiraClient()\n</code></pre> <p>Methods:</p> <ul> <li> <code>get_jira_user_from_jira_id</code>             \u2013              <p>Look for a Jira User in DB, if not found, fetch it from Jira API.</p> </li> <li> <code>get_jira_user_from_user</code>             \u2013              <p>Fetches a Jira user from the Jira API.</p> </li> <li> <code>get_watchers_from_jira_ticket</code>             \u2013              <p>Fetch watchers for a specific Jira ticket from Jira API.</p> </li> <li> <code>transition_issue_auto</code>             \u2013              <p>Attempts to close an issue by applying transitions to it.</p> </li> </ul> Source code in <code>src/firefighter/jira_app/client.py</code> <pre><code>def __init__(self) -&gt; None:\n    self.url = RAID_JIRA_API_URL\n</code></pre>"},{"location":"reference/jira_app/#firefighter.jira_app.client.JiraClient.get_jira_user_from_jira_id","title":"get_jira_user_from_jira_id","text":"<pre><code>get_jira_user_from_jira_id(jira_account_id: str) -&gt; JiraUser\n</code></pre> <p>Look for a Jira User in DB, if not found, fetch it from Jira API.</p> <p>Parameters:</p> <ul> <li> <code>jira_account_id</code>               (<code>str</code>)           \u2013            <p>Jira account id</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>JiraUserNotFoundError</code>             \u2013            <p>User not found in Jira nor in DB</p> </li> <li> <code>JiraUserDatabaseError</code>             \u2013            <p>Unable to create user in DB</p> </li> <li> <code>ValueError</code>             \u2013            <p>Empty jira_account_id</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>JiraUser</code> (              <code>JiraUser</code> )          \u2013            <p>Jira user object</p> </li> </ul> Source code in <code>src/firefighter/jira_app/client.py</code> <pre><code>def get_jira_user_from_jira_id(self, jira_account_id: str) -&gt; JiraUser:\n    \"\"\"Look for a Jira User in DB, if not found, fetch it from Jira API.\n\n    Args:\n        jira_account_id (str): Jira account id\n\n    Raises:\n        JiraUserNotFoundError: User not found in Jira nor in DB\n        JiraUserDatabaseError: Unable to create user in DB\n        ValueError: Empty jira_account_id\n\n    Returns:\n        JiraUser: Jira user object\n    \"\"\"\n    if jira_account_id is None or jira_account_id == \"\":\n        err_msg = f\"Jira account id is empty ('{jira_account_id}')\"\n        raise ValueError(err_msg)\n\n    # Look in the DB\n    try:\n        return JiraUser.objects.get(id=jira_account_id)\n    except JiraUser.DoesNotExist:\n        logger.debug(\n            f\"Jira user {jira_account_id} not found in DB, fetching from Jira API\"\n        )\n    logger.info(\"User %s not found in DB. Check sync user task.\", jira_account_id)\n\n    # Look on JIRA API\n    jira_api_user, email = self._get_user_from_api(jira_account_id)\n\n    username: str = email.split(\"@\")[0]\n    # Check if we have user with same email\n    try:\n        user: User = User.objects.select_related(\"jira_user\").get(email=email)\n        if (\n            hasattr(user, \"jira_user\")\n            and user.jira_user\n            and isinstance(user.jira_user, JiraUser)\n        ):\n            return user.jira_user\n        try:\n            return JiraUser.objects.create(\n                id=jira_account_id,\n                user=user,\n            )\n        except db.IntegrityError as e:\n            logger.exception(\"Error creating user %s\", jira_account_id)\n            raise JiraUserDatabaseError(\"Unable to create user\") from e\n\n    except User.DoesNotExist:\n        logger.warning(\"User %s not found in DB. Creating it...\", jira_account_id)\n        user = self._create_user_from_jira_info(\n            jira_account_id, jira_api_user, email, username\n        )\n\n    try:\n        return JiraUser.objects.create(\n            id=jira_account_id,\n            user=user,\n        )\n    except db.IntegrityError as e:\n        logger.exception(\"Error creating user %s\", jira_account_id)\n        raise JiraUserDatabaseError(\"Unable to create user\") from e\n</code></pre>"},{"location":"reference/jira_app/#firefighter.jira_app.client.JiraClient.get_jira_user_from_user","title":"get_jira_user_from_user","text":"<pre><code>get_jira_user_from_user(user: User) -&gt; JiraUser\n</code></pre> <p>Fetches a Jira user from the Jira API.</p> <p>Parameters:</p> <ul> <li> <code>user</code>               (<code>User</code>)           \u2013            <p>User object</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>JiraUserNotFoundError</code>             \u2013            <p>User not found in Jira</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>JiraAPIUser</code> (              <code>JiraUser</code> )          \u2013            <p>Jira API user object</p> </li> </ul> Source code in <code>src/firefighter/jira_app/client.py</code> <pre><code>def get_jira_user_from_user(self, user: User) -&gt; JiraUser:\n    \"\"\"Fetches a Jira user from the Jira API.\n\n    Args:\n        user (User): User object\n\n    Raises:\n        JiraUserNotFoundError: User not found in Jira\n\n    Returns:\n        JiraAPIUser: Jira API user object\n    \"\"\"\n    # Check if user has a Jira user\n    if hasattr(user, \"jira_user\") and user.jira_user:\n        return user.jira_user\n\n    username = user.email.split(\"@\")[0]\n    jira_user = self._fetch_jira_user(username)\n\n    return JiraUser.objects.update_or_create(\n        id=jira_user.raw.get(\"accountId\"), defaults={\"user\": user}\n    )[0]\n</code></pre>"},{"location":"reference/jira_app/#firefighter.jira_app.client.JiraClient.get_watchers_from_jira_ticket","title":"get_watchers_from_jira_ticket","text":"<pre><code>get_watchers_from_jira_ticket(jira_issue_id: int | str) -&gt; list[User]\n</code></pre> <p>Fetch watchers for a specific Jira ticket from Jira API.</p> <p>Parameters:</p> <ul> <li> <code>jira_issue_id</code>               (<code>str | int</code>)           \u2013            <p>Jira issue id</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>Empty issue id</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list</code> (              <code>User</code> )          \u2013            <p>List of Jira users object</p> </li> </ul> Source code in <code>src/firefighter/jira_app/client.py</code> <pre><code>def get_watchers_from_jira_ticket(\n    self, jira_issue_id: int | str\n) -&gt; list[JiraAPIUser]:\n    \"\"\"Fetch watchers for a specific Jira ticket from Jira API.\n\n    Args:\n        jira_issue_id (str | int): Jira issue id\n\n    Raises:\n        ValueError: Empty issue id\n\n    Returns:\n        list(JiraAPIUser): List of Jira users object\n    \"\"\"\n    watchers = self.jira.watchers(jira_issue_id).raw.get(\"watchers\")\n    if len(watchers) == 0:\n        logger.warning(\n            \"Watchers not found for jira_account_id '%s'.\", jira_issue_id\n        )\n    return watchers\n</code></pre>"},{"location":"reference/jira_app/#firefighter.jira_app.client.JiraClient.transition_issue_auto","title":"transition_issue_auto","text":"<pre><code>transition_issue_auto(issue_id: str | int, target_status_name: str, workflow_name: str) -&gt; None\n</code></pre> <p>Attempts to close an issue by applying transitions to it.</p> <p>Parameters:</p> <ul> <li> <code>issue_id</code>               (<code>str | int</code>)           \u2013            <p>Jira issue id</p> </li> <li> <code>target_status_name</code>               (<code>str</code>)           \u2013            <p>target status name</p> </li> <li> <code>workflow_name</code>               (<code>str</code>)           \u2013            <p>workflow name</p> </li> </ul> Source code in <code>src/firefighter/jira_app/client.py</code> <pre><code>def transition_issue_auto(\n    self, issue_id: str | int, target_status_name: str, workflow_name: str\n) -&gt; None:\n    \"\"\"Attempts to close an issue by applying transitions to it.\n\n    Args:\n        issue_id (str | int): Jira issue id\n        target_status_name (str): target status name\n        workflow_name (str): workflow name\n    \"\"\"\n    issue_id = str(issue_id)\n    transitions_info = self._get_transitions(\n        self._get_project_config_workflow_from_builder_base(workflow_name)\n    )\n    if len(transitions_info) == 0:\n        logger.error(\n            f\"Could not find transitions for issue id={issue_id}! Not closing issue.\"\n        )\n\n    # Get closed state id\n    # XXX Use a list of closed states to support multiple workflows, or better\n    closed_state_id = get_status_id_from_name(transitions_info, target_status_name)\n    if closed_state_id is None:\n        logger.warning(\n            f\"Could not find target status '{target_status_name}' id for issue {issue_id}! Not closing issue.\"\n        )\n        return\n\n    # Get current issue status\n    issue = self.jira.issue(issue_id)\n    current_status_id = int(issue.fields.status.id)\n\n    # Get transitions to apply\n    transitions_to_apply = get_transitions_to_apply(\n        current_status_id, transitions_info, closed_state_id\n    )\n\n    if len(transitions_to_apply) == 0:\n        logger.info(f\"Issue {issue_id} is already closed. Not closing again.\")\n\n    # Apply transitions\n    # XXX Better error handling\n    for transition in transitions_to_apply:\n        logger.debug(f\"Running transition: {transition}\")\n        self.jira.transition_issue(\n            issue=issue_id,\n            transition=transition,\n            fields={},\n        )\n</code></pre>"},{"location":"reference/jira_app/#firefighter.jira_app.models","title":"models","text":"<p>Classes:</p> <ul> <li> <code>JiraIssue</code>           \u2013            <p>Jira issue model.</p> </li> <li> <code>JiraUser</code>           \u2013            <p>Jira user model. It maps an User with the Jira account id.</p> </li> </ul>"},{"location":"reference/jira_app/#firefighter.jira_app.models.JiraIssue","title":"JiraIssue","text":"<p>               Bases: <code>Model</code></p> <p>Jira issue model.</p>"},{"location":"reference/jira_app/#firefighter.jira_app.models.JiraUser","title":"JiraUser","text":"<p>               Bases: <code>Model</code></p> <p>Jira user model. It maps an User with the Jira account id.</p>"},{"location":"reference/jira_app/#firefighter.jira_app.utils","title":"utils","text":"<p>Functions:</p> <ul> <li> <code>pythonic_keys</code>             \u2013              <p>Converts camelCase keys in a dict or list of dict to snake_case. Works recursively.</p> </li> </ul>"},{"location":"reference/jira_app/#firefighter.jira_app.utils.pythonic_keys","title":"pythonic_keys","text":"<pre><code>pythonic_keys(d: T) -&gt; T\n</code></pre> <p>Converts camelCase keys in a dict or list of dict to snake_case. Works recursively.</p> Source code in <code>src/firefighter/jira_app/utils.py</code> <pre><code>def pythonic_keys(d: T) -&gt; T:\n    \"\"\"Converts camelCase keys in a dict or list of dict to snake_case. Works recursively.\"\"\"\n    if isinstance(d, dict):\n        new_d = {}\n        for key, value in d.items():\n            new_key = _snake_case_key(key)\n            new_d[new_key] = pythonic_keys(value)\n        return new_d  # type: ignore[return-value]\n    if isinstance(d, list):\n        return [pythonic_keys(v) for v in d]  # type: ignore[return-value]\n    return d\n</code></pre>"},{"location":"reference/logging/","title":"logging","text":""},{"location":"reference/logging/#firefighter.logging","title":"logging","text":"<p>Custom logging formatter for the Firefighter project.</p> <p>Modules:</p> <ul> <li> <code>custom_json_formatter</code>           \u2013            </li> <li> <code>pretty_formatter</code>           \u2013            </li> </ul>"},{"location":"reference/logging/#firefighter.logging.custom_json_formatter","title":"custom_json_formatter","text":"<p>Classes:</p> <ul> <li> <code>CustomJsonFormatter</code>           \u2013            <p>Custom JSON formatter for Python loggin, with Datadog specific attributes.</p> </li> </ul>"},{"location":"reference/logging/#firefighter.logging.custom_json_formatter.CustomJsonFormatter","title":"CustomJsonFormatter","text":"<pre><code>CustomJsonFormatter(*args: Any, **kwargs: Any)\n</code></pre> <p>               Bases: <code>JsonFormatter</code></p> <p>Custom JSON formatter for Python loggin, with Datadog specific attributes.</p> Source code in <code>src/firefighter/logging/custom_json_formatter.py</code> <pre><code>def __init__(self, *args: Any, **kwargs: Any) -&gt; None:\n    self.FF_USER_ID_HEADER: str = settings.FF_USER_ID_HEADER\n    super().__init__(*args, **kwargs)\n</code></pre>"},{"location":"reference/logging/#firefighter.logging.pretty_formatter","title":"pretty_formatter","text":"<p>Classes:</p> <ul> <li> <code>PrettyFormatter</code>           \u2013            <p>A custom logging formatter that formats log records with colors and a pretty output, for local development.</p> </li> </ul>"},{"location":"reference/logging/#firefighter.logging.pretty_formatter.PrettyFormatter","title":"PrettyFormatter","text":"<p>               Bases: <code>Formatter</code></p> <p>A custom logging formatter that formats log records with colors and a pretty output, for local development.</p> <p>Opiniated about what is pretty.</p> <p>Attributes:</p> <ul> <li> <code>_style</code>               (<code>_STYLES</code>)           \u2013            <p>The logging style used for formatting.</p> </li> <li> <code>_fmt</code>               (<code>str</code>)           \u2013            <p>The logging format string used for formatting.</p> </li> </ul>"},{"location":"reference/pagerduty/","title":"pagerduty","text":""},{"location":"reference/pagerduty/#firefighter.pagerduty","title":"pagerduty","text":"<p>Modules:</p> <ul> <li> <code>models</code>           \u2013            </li> <li> <code>service</code>           \u2013            </li> <li> <code>tasks</code>           \u2013            <p>PagerDuty Celery tasks.</p> </li> <li> <code>views</code>           \u2013            </li> </ul>"},{"location":"reference/pagerduty/#firefighter.pagerduty.models","title":"models","text":"<p>Classes:</p> <ul> <li> <code>PagerDutyEscalationPolicy</code>           \u2013            <p>An Escalation Policy determines what User or Schedule will be Notified and in what order. This will happen when an Incident is triggered.</p> </li> <li> <code>PagerDutyIncident</code>           \u2013            <p>An Incident represents a problem or an issue that needs to be addressed and resolved.</p> </li> <li> <code>PagerDutyOncall</code>           \u2013            <p>An On-Call represents a contiguous unit of time for which a User will be On-Call for a given Escalation Policy and Escalation Rule.</p> </li> <li> <code>PagerDutyOncallManager</code>           \u2013            </li> <li> <code>PagerDutySchedule</code>           \u2013            <p>A Schedule determines the time periods that Users are On-Call.</p> </li> <li> <code>PagerDutyService</code>           \u2013            <p>A Service represents an entity you monitor (such as a web Service, email Service, or database Service.)</p> </li> <li> <code>PagerDutyUserManager</code>           \u2013            </li> </ul>"},{"location":"reference/pagerduty/#firefighter.pagerduty.models.PagerDutyEscalationPolicy","title":"PagerDutyEscalationPolicy","text":"<p>               Bases: <code>Model</code></p> <p>An Escalation Policy determines what User or Schedule will be Notified and in what order. This will happen when an Incident is triggered.</p> <p>Escalation Policies can be used by one or more Services.</p> <p>Escalation Rules</p> <ul> <li>An Escalation Policy is made up of multiple Escalation Rules. Each Escalation Rule represents a level of On-Call duty.</li> <li>It specifies one or more Users or Schedules to be notified when an unacknowledged Incident reaches that Escalation Rule.</li> <li>The first Escalation Rule in the Escalation Policy is the User that will be notified about the triggered Incident.</li> <li>If all On-Call User for a given Escalation Rule have been acknowledged of an Incident and the Escalation Rule's escalation delay has elapsed, the Incident escalates to the next Escalation Rule.</li> </ul> <ul> <li>Read more about Escalation Policies in the PagerDuty Knowledge Base</li> <li>API Schema</li> </ul>"},{"location":"reference/pagerduty/#firefighter.pagerduty.models.PagerDutyIncident","title":"PagerDutyIncident","text":"<p>               Bases: <code>Model</code></p> <p>An Incident represents a problem or an issue that needs to be addressed and resolved.</p> <p>Incidents can be thought of as a problem or an issue within your Service that needs to be addressed and resolved, they are normalized and de-duplicated.</p> <p>Incidents can be triggered, acknowledged, or resolved, and are assigned to a User based on the Service's Escalation Policy.</p> <p>A triggered Incident prompts a Notification to be sent to the current On-Call User(s) as defined in the Escalation Policy used by the Service.</p> <p>Incidents are triggered through the Events API or are created by Integrations.</p> <ul> <li>Read more about Incidents in the PagerDuty Knowledge Base.</li> </ul>"},{"location":"reference/pagerduty/#firefighter.pagerduty.models.PagerDutyOncall","title":"PagerDutyOncall","text":"<p>               Bases: <code>Model</code></p> <p>An On-Call represents a contiguous unit of time for which a User will be On-Call for a given Escalation Policy and Escalation Rule.</p> <p>This may be the result of that User always being On-Call for the Escalation Rule, or a block of time during which the computed result of a Schedule on that Escalation Rule puts the User On-Call.</p> <p>During an On-Call, the User is expected to bear responsibility for responding to any Notifications they receive and working to resolve the associated Incident(s).</p> <p>On-Calls cannot be created directly through the API; they are the computed result of how Escalation Policies and Schedules are configured. The API provides read-only access to the On-Calls generated by PagerDuty.</p> <ul> <li>Read more about On-Call Schedules in the PagerDuty Knowledge Base</li> <li>API Schema</li> </ul>"},{"location":"reference/pagerduty/#firefighter.pagerduty.models.PagerDutyOncallManager","title":"PagerDutyOncallManager","text":"<p>               Bases: <code>Manager['PagerDutyOncall']</code></p> <p>Methods:</p> <ul> <li> <code>get_current_oncalls_per_escalation_policy</code>             \u2013              <p>Returns the list of on call Users. These users have their PagerDutyUser associated.</p> </li> </ul>"},{"location":"reference/pagerduty/#firefighter.pagerduty.models.PagerDutyOncallManager.get_current_oncalls_per_escalation_policy","title":"get_current_oncalls_per_escalation_policy","text":"<pre><code>get_current_oncalls_per_escalation_policy() -&gt; list[tuple[PagerDutyEscalationPolicy, list[PagerDutyOncall]]]\n</code></pre> <p>Returns the list of on call Users. These users have their PagerDutyUser associated.</p> Source code in <code>src/firefighter/pagerduty/models.py</code> <pre><code>def get_current_oncalls_per_escalation_policy(\n    self,\n) -&gt; list[tuple[PagerDutyEscalationPolicy, list[PagerDutyOncall]]]:\n    \"\"\"Returns the list of on call Users. These users have their PagerDutyUser associated.\"\"\"\n    oncalls = (\n        self.select_related(\n            \"pagerduty_user\",\n            \"schedule\",\n            \"escalation_policy\",\n            \"pagerduty_user\",\n            \"pagerduty_user__user__slack_user\",\n        )\n        .filter(\n            models.Q(start__lte=timezone.now(), end__gte=timezone.now())\n            | models.Q(end__isnull=True)\n        )\n        .exclude(escalation_policy__pagerdutyservice__ignore__exact=True)\n        .order_by(\"escalation_level\")\n        .order_by(\n            \"escalation_policy__pagerdutyservice\",\n            \"pagerduty_user\",\n        )\n        .distinct(\"escalation_policy__pagerdutyservice\", \"pagerduty_user\")\n    )\n    oncalls_grouped: list[\n        tuple[PagerDutyEscalationPolicy, list[PagerDutyOncall]]\n    ] = []\n    for escalation_policy, oncalls_grouper in groupby(\n        oncalls, key=lambda x: x.escalation_policy\n    ):\n        oncalls_list = sorted(oncalls_grouper, key=lambda x: x.escalation_level)\n        oncalls_grouped.append((escalation_policy, oncalls_list))\n    return oncalls_grouped\n</code></pre>"},{"location":"reference/pagerduty/#firefighter.pagerduty.models.PagerDutySchedule","title":"PagerDutySchedule","text":"<p>               Bases: <code>Model</code></p> <p>A Schedule determines the time periods that Users are On-Call.</p> <p>Only On-Call Users are eligible to receive Notifications from firefighter.incidents.</p> <p>The details of the On-Call Schedule specify which single User is On-Call for that Schedule at any given point in time.</p> <p>An On-Call Schedule consists of one or more Schedule Layers that rotate a group of Users through the same shift at a set interval.</p> <p>Schedules are used by Escalation Policies as an escalation target for a given Escalation Rule.</p> <ul> <li>Read more about On-Call Schedules in the PagerDuty Knowledge Base</li> <li>API Schema</li> </ul>"},{"location":"reference/pagerduty/#firefighter.pagerduty.models.PagerDutyService","title":"PagerDutyService","text":"<p>               Bases: <code>Model</code></p> <p>A Service represents an entity you monitor (such as a web Service, email Service, or database Service.) It is a container for related Incidents that associates them with Escalation Policies. A Service is the focal point for Incident management; Services specify the configuration for the behavior of Incidents triggered on them. This behavior includes specifying urgency and performing automated actions based on time of day, Incident duration, and other factors.</p> <ul> <li>Read more about Services in the PagerDuty Knowledge Base.</li> </ul>"},{"location":"reference/pagerduty/#firefighter.pagerduty.models.PagerDutyUserManager","title":"PagerDutyUserManager","text":"<p>               Bases: <code>Manager['PagerDutyUser']</code></p> <p>Methods:</p> <ul> <li> <code>get_current_on_call_users_l1</code>             \u2013              <p>Returns the list of oncall first responders in each escalation policy. Only the lowest escalation level user is returned per Escalation Policy.</p> </li> <li> <code>upsert_by_pagerduty_id</code>             \u2013              <p>Returns a User from PagerDuty info.</p> </li> </ul>"},{"location":"reference/pagerduty/#firefighter.pagerduty.models.PagerDutyUserManager.get_current_on_call_users_l1","title":"get_current_on_call_users_l1  <code>staticmethod</code>","text":"<pre><code>get_current_on_call_users_l1() -&gt; list[User]\n</code></pre> <p>Returns the list of oncall first responders in each escalation policy. Only the lowest escalation level user is returned per Escalation Policy.</p> <p>These users have their PagerDutyUser associated.</p> Source code in <code>src/firefighter/pagerduty/models.py</code> <pre><code>@staticmethod\ndef get_current_on_call_users_l1() -&gt; list[User]:\n    \"\"\"Returns the list of oncall first responders in each escalation policy. Only the lowest escalation level user is returned per Escalation Policy.\n\n    These users have their PagerDutyUser associated.\n    \"\"\"\n    ep_user = PagerDutyOncall.objects.get_current_oncalls_per_escalation_policy()\n    users: list[User] = [oncall[1][0].pagerduty_user.user for oncall in ep_user]\n\n    return users\n</code></pre>"},{"location":"reference/pagerduty/#firefighter.pagerduty.models.PagerDutyUserManager.upsert_by_pagerduty_id","title":"upsert_by_pagerduty_id  <code>staticmethod</code>","text":"<pre><code>upsert_by_pagerduty_id(pagerduty_id: str, email: str, phone_number: str, name: str) -&gt; User | None\n</code></pre> <p>Returns a User from PagerDuty info. It will update a PagerDutyUser and its associated User if the name, phone, PagerDuty team changes.</p> Source code in <code>src/firefighter/pagerduty/models.py</code> <pre><code>@staticmethod\ndef upsert_by_pagerduty_id(\n    pagerduty_id: str,\n    email: str,\n    phone_number: str,\n    name: str,\n) -&gt; User | None:\n    \"\"\"Returns a User from PagerDuty info.\n    It will update a PagerDutyUser and its associated User if the name, phone, PagerDuty team changes.\n    \"\"\"\n    # Get a user by its email and update the name. Create the user if necessary.\n    ff_user, _ = User.objects.update_or_create(email=email, defaults={\"name\": name})\n\n    # Update or create a PD User, with the key being its user. Update other fields.\n    try:\n        pd_user, _ = PagerDutyUser.objects.update_or_create(\n            user=ff_user,\n            defaults={\n                \"pagerduty_id\": pagerduty_id,\n                \"phone_number\": phone_number,\n            },\n        )\n\n        if pd_user.user == ff_user:\n            return ff_user\n        logger.warning(\n            \"PD and FF users not matching. PDID=%s, email=%s\",\n            pagerduty_id,\n            email,\n        )\n\n    except IntegrityError:\n        logger.warning(\n            \"IntegrityError! Could not upsert PagerDuty User. PDID=%s, email=%s.\",\n            pagerduty_id,\n            email,\n            exc_info=True,\n        )\n\n        pd_user, _ = PagerDutyUser.objects.update_or_create(\n            pagerduty_id=pagerduty_id,\n            defaults={\n                \"user\": ff_user,\n                \"phone_number\": phone_number,\n            },\n        )\n        return ff_user\n    return None\n</code></pre>"},{"location":"reference/pagerduty/#firefighter.pagerduty.service","title":"service","text":"<p>Classes:</p> <ul> <li> <code>PagerdutyService</code>           \u2013            <p>XXX Rename to PagerDutyClient to avoid confusion with PagerDutyService Django model.</p> </li> </ul>"},{"location":"reference/pagerduty/#firefighter.pagerduty.service.PagerdutyService","title":"PagerdutyService","text":"<pre><code>PagerdutyService()\n</code></pre> <p>XXX Rename to PagerDutyClient to avoid confusion with PagerDutyService Django model.</p> Source code in <code>src/firefighter/pagerduty/service.py</code> <pre><code>def __init__(self) -&gt; None:\n    self.client = PagerdutyClient()\n</code></pre>"},{"location":"reference/pagerduty/#firefighter.pagerduty.tasks","title":"tasks","text":"<p>PagerDuty Celery tasks.</p> <p>Modules:</p> <ul> <li> <code>fetch_oncall</code>           \u2013            </li> <li> <code>fetch_services</code>           \u2013            </li> <li> <code>fetch_users</code>           \u2013            </li> <li> <code>trigger_oncall</code>           \u2013            </li> </ul>"},{"location":"reference/pagerduty/#firefighter.pagerduty.tasks.fetch_oncall","title":"fetch_oncall","text":"<p>Functions:</p> <ul> <li> <code>fetch_oncalls</code>             \u2013              <p>Celery task to fetch PagerDuty oncalls and save them in the database.</p> </li> </ul>"},{"location":"reference/pagerduty/#firefighter.pagerduty.tasks.fetch_oncall.fetch_oncalls","title":"fetch_oncalls","text":"<pre><code>fetch_oncalls() -&gt; None\n</code></pre> <p>Celery task to fetch PagerDuty oncalls and save them in the database. Will try to update services, users, schedules and escalation policies if needed.</p> Source code in <code>src/firefighter/pagerduty/tasks/fetch_oncall.py</code> <pre><code>@celery_app.task(name=\"pagerduty.fetch_oncalls\")\ndef fetch_oncalls() -&gt; None:\n    \"\"\"Celery task to fetch PagerDuty oncalls and save them in the database.\n    Will try to update services, users, schedules and escalation policies if needed.\n    \"\"\"\n    services = pagerduty_service.get_all_oncalls()\n    return create_oncalls(services)\n</code></pre>"},{"location":"reference/pagerduty/#firefighter.pagerduty.tasks.fetch_services","title":"fetch_services","text":"<p>Functions:</p> <ul> <li> <code>fetch_services</code>             \u2013              <p>Celery task to fetch PagerDuty services and save them in the database.</p> </li> </ul>"},{"location":"reference/pagerduty/#firefighter.pagerduty.tasks.fetch_services.fetch_services","title":"fetch_services","text":"<pre><code>fetch_services() -&gt; None\n</code></pre> <p>Celery task to fetch PagerDuty services and save them in the database.</p> Source code in <code>src/firefighter/pagerduty/tasks/fetch_services.py</code> <pre><code>@shared_task(name=\"pagerduty.fetch_services\")\n@transaction.atomic\ndef fetch_services() -&gt; None:\n    \"\"\"Celery task to fetch PagerDuty services and save them in the database.\"\"\"\n    fetched_services_key = []\n    for service in pagerduty_service.client.session.iter_all(\"services\"):\n        fetched_services_key.append(service[\"id\"])\n        PagerDutyService.objects.update_or_create(\n            pagerduty_id=service[\"id\"],\n            defaults={\n                \"name\": service[\"name\"][:128],\n                \"status\": service[\"status\"][:128],\n                \"summary\": service[\"summary\"][:256],\n                \"web_url\": service[\"html_url\"][:256],\n                \"api_url\": service[\"self\"][:256],\n            },\n        )\n\n    # Check that we don't have stale services\n    if len(fetched_services_key) != PagerDutyService.objects.count():\n        logger.warning(\"Stale PagerDuty Services found in DB. Manual action needed.\")\n</code></pre>"},{"location":"reference/pagerduty/#firefighter.pagerduty.tasks.fetch_users","title":"fetch_users","text":"<p>Functions:</p> <ul> <li> <code>fetch_users</code>             \u2013              <p>Celery task to fetch PagerDuty users and save them in the database.</p> </li> </ul>"},{"location":"reference/pagerduty/#firefighter.pagerduty.tasks.fetch_users.fetch_users","title":"fetch_users","text":"<pre><code>fetch_users(*, delete_stale_user: bool = True) -&gt; None\n</code></pre> <p>Celery task to fetch PagerDuty users and save them in the database.</p> Source code in <code>src/firefighter/pagerduty/tasks/fetch_users.py</code> <pre><code>@shared_task(name=\"pagerduty.fetch_users\")\ndef fetch_users(*, delete_stale_user: bool = True) -&gt; None:\n    \"\"\"Celery task to fetch PagerDuty users and save them in the database.\"\"\"\n    fetched_users_id = []\n    for user in pagerduty_service.client.get_all_users():\n        logger.debug(user)\n        fetched_users_id.append(user[\"id\"])\n        main_user = SlackUser.objects.upsert_by_email(user[\"email\"])\n        if main_user is None:\n            logger.warning(\"Could not find user with email %s\", user[\"email\"])\n            continue\n\n        phone_number = pagerduty_service.get_phone_number_from_body(user)\n        if phone_number is None:\n            phone_number = \"\"\n\n        pd_user, _ = PagerDutyUser.objects.update_or_create(\n            pagerduty_id=user[\"id\"],\n            defaults={\n                \"name\": user[\"name\"],\n                \"user\": main_user,\n                \"phone_number\": phone_number,\n                \"pagerduty_url\": user[\"html_url\"][:256],\n                \"pagerduty_api_url\": user[\"self\"][:256],\n            },\n        )\n        pd_teams = user.get(\"teams\", [])\n        pd_teams_models: list[PagerDutyTeam] = []\n        for pd_team in pd_teams:\n            pd_team_model, _ = PagerDutyTeam.objects.update_or_create(\n                pagerduty_id=pd_team[\"id\"],\n                defaults={\n                    \"name\": pd_team[\"summary\"],\n                    \"pagerduty_url\": pd_team[\"html_url\"][:256],\n                    \"pagerduty_api_url\": pd_team[\"self\"][:256],\n                },\n            )\n            pd_teams_models.append(pd_team_model)\n\n        pd_user.teams.set(pd_teams_models)\n\n    # Check that we don't have stale users\n    if len(fetched_users_id) != PagerDutyUser.objects.count():\n        stale_user_ids = PagerDutyUser.objects.exclude(\n            pagerduty_id__in=fetched_users_id\n        ).values_list(\"pagerduty_id\", flat=True)\n        logger.info(f\"Stale Pagerduty users found {list(stale_user_ids)}.\")\n\n        if delete_stale_user:\n            nb_deleted, _ = PagerDutyUser.objects.filter(\n                pagerduty_id__in=stale_user_ids\n            ).delete()\n            logger.info(f\"Deleted {nb_deleted} stale PagerDuty users.\")\n</code></pre>"},{"location":"reference/pagerduty/#firefighter.pagerduty.tasks.trigger_oncall","title":"trigger_oncall","text":"<p>Functions:</p> <ul> <li> <code>trigger_oncall</code>             \u2013              <p>Celery task to trigger an on-call in PagerDuty, from a FireFighter incident.</p> </li> </ul>"},{"location":"reference/pagerduty/#firefighter.pagerduty.tasks.trigger_oncall.trigger_oncall","title":"trigger_oncall","text":"<pre><code>trigger_oncall(\n    oncall_service: PagerDutyService,\n    title: str,\n    details: str,\n    incident_key: str,\n    conference_url: str,\n    incident_id: int | None = None,\n    triggered_by: User | None = None,\n) -&gt; PagerDutyIncident\n</code></pre> <p>Celery task to trigger an on-call in PagerDuty, from a FireFighter incident.</p> <p>XXX Trigger from PD user if it exists, instead of admin. XXX Should be a service ID instead of a service object.</p> Source code in <code>src/firefighter/pagerduty/tasks/trigger_oncall.py</code> <pre><code>@shared_task(name=\"pagerduty.trigger_oncall\")\ndef trigger_oncall(\n    oncall_service: PagerDutyService,\n    title: str,\n    details: str,\n    incident_key: str,\n    conference_url: str,\n    incident_id: int | None = None,\n    triggered_by: User | None = None,\n) -&gt; PagerDutyIncident:\n    \"\"\"Celery task to trigger an on-call in PagerDuty, from a FireFighter incident.\n\n    XXX Trigger from PD user if it exists, instead of admin.\n    XXX Should be a service ID instead of a service object.\n    \"\"\"\n    service = oncall_service\n    if incident_id:\n        incident = Incident.objects.get(id=incident_id)\n        details = f\"\"\"Triggered from {APP_DISPLAY_NAME} incident #{incident.id} {f\"by {triggered_by.full_name}\" if triggered_by else \"\"}\nPriority: {incident.priority}\nEnvironment: {incident.environment}\nIncident category: {incident.incident_category.group.name} - {incident.incident_category.name}\nFireFighter page: {incident.status_page_url + \"?utm_medium=FireFighter+PagerDuty&amp;utm_source=PagerDuty+Incident&amp;utm_campaign=OnCall+Message+In+Channel\"}\nSlack channel #{incident.slack_channel_name}: {incident.slack_channel_url}\n\nIncident Details:\n{details}\n\"\"\"\n    try:\n        res = pagerduty_service.client.create_incident(\n            title=title,\n            pagerduty_id=service.pagerduty_id,\n            details=details,\n            incident_key=incident_key,\n            conference_url=conference_url,\n        )\n\n    except PDHTTPError as e:\n        if e.response.status_code == 404:\n            logger.exception(\"User not found\")\n        else:\n            logger.exception(\"Transient network error: %s\", e.msg)\n            raise\n    except PDClientError as e:\n        logger.exception(\"Non-transient network or client error: %s\", e.msg)\n    # TODO Error handling\n\n    if not 200 &lt;= res.status_code &lt; 300:\n        logger.error({\n            \"message\": \"Error when calling PagerDuty API\",\n            \"request\": res.request.__dict__.get(\"body\"),\n            \"response\": res.json(),\n        })\n        err_msg = f\"Error when calling PagerDuty API. {res.json()}\"\n        raise ValueError(err_msg)\n\n    pd_incident = res.json()[\"incident\"]\n\n    pd_incident_db, _ = PagerDutyIncident.objects.update_or_create(\n        incident_key=pd_incident[\"incident_key\"],\n        defaults={\n            \"title\": pd_incident[\"title\"][:128],\n            \"urgency\": pd_incident[\"urgency\"][:128],\n            \"incident_number\": pd_incident[\"incident_number\"],\n            \"status\": pd_incident[\"status\"][:128],\n            \"service_id\": service.id,\n            \"details\": pd_incident[\"body\"][\"details\"][:3000],  # get_in\n            \"summary\": pd_incident[\"summary\"][:256],  # get_in\n            \"web_url\": pd_incident[\"html_url\"][:256],\n            \"api_url\": pd_incident[\"self\"][:256],\n            \"incident_id\": incident_id,\n        },\n    )\n\n    return pd_incident_db\n</code></pre>"},{"location":"reference/pagerduty/#firefighter.pagerduty.views","title":"views","text":"<p>Modules:</p> <ul> <li> <code>oncall_list</code>           \u2013            </li> </ul>"},{"location":"reference/pagerduty/#firefighter.pagerduty.views.oncall_list","title":"oncall_list","text":"<p>Classes:</p> <ul> <li> <code>OncallListView</code>           \u2013            </li> </ul>"},{"location":"reference/pagerduty/#firefighter.pagerduty.views.oncall_list.OncallListView","title":"OncallListView","text":"<p>               Bases: <code>ListView[PagerDutyOncall]</code></p> <p>Methods:</p> <ul> <li> <code>get_context_data</code>             \u2013              <p>No *args to pass.</p> </li> </ul>"},{"location":"reference/pagerduty/#firefighter.pagerduty.views.oncall_list.OncallListView.get_context_data","title":"get_context_data","text":"<pre><code>get_context_data(**kwargs: Any) -&gt; dict[str, Any]\n</code></pre> <p>No *args to pass.</p> Source code in <code>src/firefighter/pagerduty/views/oncall_list.py</code> <pre><code>def get_context_data(self, **kwargs: Any) -&gt; dict[str, Any]:\n    \"\"\"No *args to pass.\"\"\"\n    # Call the base implementation first to get a context\n    context = super().get_context_data(**kwargs)\n    last_fetched = (\n        PagerDutyOncall.objects.values(\"updated_at\").order_by(\"-updated_at\").first()\n    )\n    context[\"last_updated\"] = last_fetched[\"updated_at\"] if last_fetched else None\n    context[\"page_title\"] = \"On-call Overview\"\n    return context\n</code></pre>"},{"location":"reference/raid/","title":"RAID Module","text":"<p>The RAID module provides enhanced Jira integration for incident management and external ticket creation.</p>"},{"location":"reference/raid/#overview","title":"Overview","text":"<p>RAID (Request And Issue Database) extends FireFighter's capabilities with:</p> <ul> <li>Automatic Jira ticket creation for incidents</li> <li>External API for ticket creation (Landbot integration)</li> <li>Smart user resolution based on email domains</li> <li>Priority mapping from P1-P5 to Jira priorities</li> <li>Attachment handling for external submissions</li> <li>Slack notifications for ticket updates</li> </ul>"},{"location":"reference/raid/#priority-mapping","title":"Priority Mapping","text":"<p>The RAID module supports full P1-P5 priority mapping:</p> Priority Level Jira Priority Use Case P1 Critical 1 System outages, complete service failures P2 High 2 Major functionality impaired, significant impact P3 Medium 3 Minor functionality affected, moderate impact P4 Low 4 Small issues, minimal impact P5 Lowest 5 Cosmetic issues, enhancement requests"},{"location":"reference/raid/#user-resolution","title":"User Resolution","text":"<p>The module handles user resolution for external ticket creation:</p> <ol> <li>Internal users: Direct mapping from email to existing users</li> <li>External users: Email domain-based routing to default Jira users</li> <li>Slack fallback: Attempts to find users via Slack integration</li> <li>Default assignment: Falls back to configured default Jira user</li> </ol>"},{"location":"reference/raid/#api-reference","title":"API Reference","text":""},{"location":"reference/raid/#firefighter.raid","title":"raid","text":"<p>RAID is ManoMano's internal issue dispatcher.</p> <p>It works with Slack and Jira to create, update and close issues.</p> <p>It is currently not configurable.</p> <p>Modules:</p> <ul> <li> <code>client</code>           \u2013            </li> <li> <code>forms</code>           \u2013            </li> <li> <code>models</code>           \u2013            </li> <li> <code>serializers</code>           \u2013            </li> <li> <code>service</code>           \u2013            </li> <li> <code>utils</code>           \u2013            </li> <li> <code>views</code>           \u2013            </li> </ul>"},{"location":"reference/raid/#firefighter.raid.client","title":"client","text":"<p>Classes:</p> <ul> <li> <code>RaidJiraClient</code>           \u2013            </li> </ul>"},{"location":"reference/raid/#firefighter.raid.client.RaidJiraClient","title":"RaidJiraClient","text":"<pre><code>RaidJiraClient()\n</code></pre> <p>               Bases: <code>JiraClient</code></p> <p>Methods:</p> <ul> <li> <code>add_attachments_to_issue</code>             \u2013              <p>Add attachments to a Jira issue.</p> </li> <li> <code>get_jira_user_from_jira_id</code>             \u2013              <p>Look for a Jira User in DB, if not found, fetch it from Jira API.</p> </li> <li> <code>get_jira_user_from_user</code>             \u2013              <p>Fetches a Jira user from the Jira API.</p> </li> <li> <code>get_watchers_from_jira_ticket</code>             \u2013              <p>Fetch watchers for a specific Jira ticket from Jira API.</p> </li> <li> <code>transition_issue_auto</code>             \u2013              <p>Attempts to close an issue by applying transitions to it.</p> </li> </ul> Source code in <code>src/firefighter/jira_app/client.py</code> <pre><code>def __init__(self) -&gt; None:\n    self.url = RAID_JIRA_API_URL\n</code></pre>"},{"location":"reference/raid/#firefighter.raid.client.RaidJiraClient.add_attachments_to_issue","title":"add_attachments_to_issue  <code>staticmethod</code>","text":"<pre><code>add_attachments_to_issue(issue_id: str | int, urls: list[str]) -&gt; None\n</code></pre> <p>Add attachments to a Jira issue.</p> <p>Parameters:</p> <ul> <li> <code>issue_id</code>               (<code>str | int</code>)           \u2013            <p>the Jira issue id</p> </li> <li> <code>urls</code>               (<code>list[str]</code>)           \u2013            <p>list of urls to the attachments</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>JiraAttachmentError</code>             \u2013            <p>if there is an error while adding any attachment</p> </li> </ul> Source code in <code>src/firefighter/raid/client.py</code> <pre><code>@staticmethod\ndef add_attachments_to_issue(issue_id: str | int, urls: list[str]) -&gt; None:\n    \"\"\"Add attachments to a Jira issue.\n\n    Args:\n        issue_id (str | int): the Jira issue id\n        urls (list[str]): list of urls to the attachments\n\n    Raises:\n        JiraAttachmentError: if there is an error while adding any attachment\n    \"\"\"\n    http_client = HttpClient()\n    for i, url in enumerate(urls):\n        index = url.rfind(\".\")\n        extension = url[index:]\n        try:\n            response = http_client.get(url)\n            response.raise_for_status()  # Raises an exception if status code is not 2XX\n\n            in_memory_file = io.BytesIO(response.content)\n\n            client.jira.add_attachment(\n                issue=issue_id,\n                attachment=in_memory_file,\n                filename=f\"image{i}{extension}\",\n            )\n\n        except (HTTPError, JIRAError) as err:\n            msg = f\"Error while adding attachment to issue: {err}\"\n            raise JiraAttachmentError(msg) from err\n</code></pre>"},{"location":"reference/raid/#firefighter.raid.client.RaidJiraClient.get_jira_user_from_jira_id","title":"get_jira_user_from_jira_id","text":"<pre><code>get_jira_user_from_jira_id(jira_account_id: str) -&gt; JiraUser\n</code></pre> <p>Look for a Jira User in DB, if not found, fetch it from Jira API.</p> <p>Parameters:</p> <ul> <li> <code>jira_account_id</code>               (<code>str</code>)           \u2013            <p>Jira account id</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>JiraUserNotFoundError</code>             \u2013            <p>User not found in Jira nor in DB</p> </li> <li> <code>JiraUserDatabaseError</code>             \u2013            <p>Unable to create user in DB</p> </li> <li> <code>ValueError</code>             \u2013            <p>Empty jira_account_id</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>JiraUser</code> (              <code>JiraUser</code> )          \u2013            <p>Jira user object</p> </li> </ul> Source code in <code>src/firefighter/jira_app/client.py</code> <pre><code>def get_jira_user_from_jira_id(self, jira_account_id: str) -&gt; JiraUser:\n    \"\"\"Look for a Jira User in DB, if not found, fetch it from Jira API.\n\n    Args:\n        jira_account_id (str): Jira account id\n\n    Raises:\n        JiraUserNotFoundError: User not found in Jira nor in DB\n        JiraUserDatabaseError: Unable to create user in DB\n        ValueError: Empty jira_account_id\n\n    Returns:\n        JiraUser: Jira user object\n    \"\"\"\n    if jira_account_id is None or jira_account_id == \"\":\n        err_msg = f\"Jira account id is empty ('{jira_account_id}')\"\n        raise ValueError(err_msg)\n\n    # Look in the DB\n    try:\n        return JiraUser.objects.get(id=jira_account_id)\n    except JiraUser.DoesNotExist:\n        logger.debug(\n            f\"Jira user {jira_account_id} not found in DB, fetching from Jira API\"\n        )\n    logger.info(\"User %s not found in DB. Check sync user task.\", jira_account_id)\n\n    # Look on JIRA API\n    jira_api_user, email = self._get_user_from_api(jira_account_id)\n\n    username: str = email.split(\"@\")[0]\n    # Check if we have user with same email\n    try:\n        user: User = User.objects.select_related(\"jira_user\").get(email=email)\n        if (\n            hasattr(user, \"jira_user\")\n            and user.jira_user\n            and isinstance(user.jira_user, JiraUser)\n        ):\n            return user.jira_user\n        try:\n            return JiraUser.objects.create(\n                id=jira_account_id,\n                user=user,\n            )\n        except db.IntegrityError as e:\n            logger.exception(\"Error creating user %s\", jira_account_id)\n            raise JiraUserDatabaseError(\"Unable to create user\") from e\n\n    except User.DoesNotExist:\n        logger.warning(\"User %s not found in DB. Creating it...\", jira_account_id)\n        user = self._create_user_from_jira_info(\n            jira_account_id, jira_api_user, email, username\n        )\n\n    try:\n        return JiraUser.objects.create(\n            id=jira_account_id,\n            user=user,\n        )\n    except db.IntegrityError as e:\n        logger.exception(\"Error creating user %s\", jira_account_id)\n        raise JiraUserDatabaseError(\"Unable to create user\") from e\n</code></pre>"},{"location":"reference/raid/#firefighter.raid.client.RaidJiraClient.get_jira_user_from_user","title":"get_jira_user_from_user","text":"<pre><code>get_jira_user_from_user(user: User) -&gt; JiraUser\n</code></pre> <p>Fetches a Jira user from the Jira API.</p> <p>Parameters:</p> <ul> <li> <code>user</code>               (<code>User</code>)           \u2013            <p>User object</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>JiraUserNotFoundError</code>             \u2013            <p>User not found in Jira</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>JiraAPIUser</code> (              <code>JiraUser</code> )          \u2013            <p>Jira API user object</p> </li> </ul> Source code in <code>src/firefighter/jira_app/client.py</code> <pre><code>def get_jira_user_from_user(self, user: User) -&gt; JiraUser:\n    \"\"\"Fetches a Jira user from the Jira API.\n\n    Args:\n        user (User): User object\n\n    Raises:\n        JiraUserNotFoundError: User not found in Jira\n\n    Returns:\n        JiraAPIUser: Jira API user object\n    \"\"\"\n    # Check if user has a Jira user\n    if hasattr(user, \"jira_user\") and user.jira_user:\n        return user.jira_user\n\n    username = user.email.split(\"@\")[0]\n    jira_user = self._fetch_jira_user(username)\n\n    return JiraUser.objects.update_or_create(\n        id=jira_user.raw.get(\"accountId\"), defaults={\"user\": user}\n    )[0]\n</code></pre>"},{"location":"reference/raid/#firefighter.raid.client.RaidJiraClient.get_watchers_from_jira_ticket","title":"get_watchers_from_jira_ticket","text":"<pre><code>get_watchers_from_jira_ticket(jira_issue_id: int | str) -&gt; list[User]\n</code></pre> <p>Fetch watchers for a specific Jira ticket from Jira API.</p> <p>Parameters:</p> <ul> <li> <code>jira_issue_id</code>               (<code>str | int</code>)           \u2013            <p>Jira issue id</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>Empty issue id</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list</code> (              <code>User</code> )          \u2013            <p>List of Jira users object</p> </li> </ul> Source code in <code>src/firefighter/jira_app/client.py</code> <pre><code>def get_watchers_from_jira_ticket(\n    self, jira_issue_id: int | str\n) -&gt; list[JiraAPIUser]:\n    \"\"\"Fetch watchers for a specific Jira ticket from Jira API.\n\n    Args:\n        jira_issue_id (str | int): Jira issue id\n\n    Raises:\n        ValueError: Empty issue id\n\n    Returns:\n        list(JiraAPIUser): List of Jira users object\n    \"\"\"\n    watchers = self.jira.watchers(jira_issue_id).raw.get(\"watchers\")\n    if len(watchers) == 0:\n        logger.warning(\n            \"Watchers not found for jira_account_id '%s'.\", jira_issue_id\n        )\n    return watchers\n</code></pre>"},{"location":"reference/raid/#firefighter.raid.client.RaidJiraClient.transition_issue_auto","title":"transition_issue_auto","text":"<pre><code>transition_issue_auto(issue_id: str | int, target_status_name: str, workflow_name: str) -&gt; None\n</code></pre> <p>Attempts to close an issue by applying transitions to it.</p> <p>Parameters:</p> <ul> <li> <code>issue_id</code>               (<code>str | int</code>)           \u2013            <p>Jira issue id</p> </li> <li> <code>target_status_name</code>               (<code>str</code>)           \u2013            <p>target status name</p> </li> <li> <code>workflow_name</code>               (<code>str</code>)           \u2013            <p>workflow name</p> </li> </ul> Source code in <code>src/firefighter/jira_app/client.py</code> <pre><code>def transition_issue_auto(\n    self, issue_id: str | int, target_status_name: str, workflow_name: str\n) -&gt; None:\n    \"\"\"Attempts to close an issue by applying transitions to it.\n\n    Args:\n        issue_id (str | int): Jira issue id\n        target_status_name (str): target status name\n        workflow_name (str): workflow name\n    \"\"\"\n    issue_id = str(issue_id)\n    transitions_info = self._get_transitions(\n        self._get_project_config_workflow_from_builder_base(workflow_name)\n    )\n    if len(transitions_info) == 0:\n        logger.error(\n            f\"Could not find transitions for issue id={issue_id}! Not closing issue.\"\n        )\n\n    # Get closed state id\n    # XXX Use a list of closed states to support multiple workflows, or better\n    closed_state_id = get_status_id_from_name(transitions_info, target_status_name)\n    if closed_state_id is None:\n        logger.warning(\n            f\"Could not find target status '{target_status_name}' id for issue {issue_id}! Not closing issue.\"\n        )\n        return\n\n    # Get current issue status\n    issue = self.jira.issue(issue_id)\n    current_status_id = int(issue.fields.status.id)\n\n    # Get transitions to apply\n    transitions_to_apply = get_transitions_to_apply(\n        current_status_id, transitions_info, closed_state_id\n    )\n\n    if len(transitions_to_apply) == 0:\n        logger.info(f\"Issue {issue_id} is already closed. Not closing again.\")\n\n    # Apply transitions\n    # XXX Better error handling\n    for transition in transitions_to_apply:\n        logger.debug(f\"Running transition: {transition}\")\n        self.jira.transition_issue(\n            issue=issue_id,\n            transition=transition,\n            fields={},\n        )\n</code></pre>"},{"location":"reference/raid/#firefighter.raid.forms","title":"forms","text":"<p>Functions:</p> <ul> <li> <code>prepare_jira_fields</code>             \u2013              <p>Prepare all fields for jira_client.create_issue().</p> </li> </ul>"},{"location":"reference/raid/#firefighter.raid.forms.prepare_jira_fields","title":"prepare_jira_fields","text":"<pre><code>prepare_jira_fields(\n    *,\n    title: str,\n    description: str,\n    priority: int,\n    reporter: str,\n    incident_category: str,\n    environments: list[str],\n    platforms: list[str],\n    impacts_data: dict[str, ImpactLevel],\n    optional_fields: dict[str, Any] | None = None\n) -&gt; dict[str, Any]\n</code></pre> <p>Prepare all fields for jira_client.create_issue().</p> <p>This function centralizes Jira field preparation for both P1-P3 and P4-P5 incidents, ensuring all custom fields are properly passed.</p> <p>Parameters:</p> <ul> <li> <code>title</code>               (<code>str</code>)           \u2013            <p>Incident title</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>Incident description</p> </li> <li> <code>priority</code>               (<code>int</code>)           \u2013            <p>Priority value (1-5)</p> </li> <li> <code>reporter</code>               (<code>str</code>)           \u2013            <p>Jira user account ID</p> </li> <li> <code>incident_category</code>               (<code>str</code>)           \u2013            <p>Category name</p> </li> <li> <code>environments</code>               (<code>list[str]</code>)           \u2013            <p>List of environment values (e.g. [\"PRD\", \"STG\"])</p> </li> <li> <code>platforms</code>               (<code>list[str]</code>)           \u2013            <p>List of platform values (e.g. [\"platform-FR\", \"platform-DE\"])</p> </li> <li> <code>impacts_data</code>               (<code>dict[str, ImpactLevel]</code>)           \u2013            <p>Dictionary of impact data for business_impact computation</p> </li> <li> <code>optional_fields</code>               (<code>dict[str, Any] | None</code>, default:                   <code>None</code> )           \u2013            <p>Optional dictionary containing: - zendesk_ticket_id: Zendesk ticket ID (customer-specific) - seller_contract_id: Seller contract ID (seller-specific) - zoho_desk_ticket_id: Zoho Desk ticket ID (seller-specific) - is_key_account: Key account flag (seller-specific) - is_seller_in_golden_list: Golden list flag (seller-specific) - suggested_team_routing: Suggested team routing (P4-P5 only)</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Any]</code>           \u2013            <p>Dictionary of kwargs ready for jira_client.create_issue()</p> </li> </ul> Source code in <code>src/firefighter/raid/forms.py</code> <pre><code>def prepare_jira_fields(\n    *,\n    title: str,\n    description: str,\n    priority: int,\n    reporter: str,\n    incident_category: str,\n    environments: list[str],\n    platforms: list[str],\n    impacts_data: dict[str, ImpactLevel],\n    optional_fields: dict[str, Any] | None = None,\n) -&gt; dict[str, Any]:\n    \"\"\"Prepare all fields for jira_client.create_issue().\n\n    This function centralizes Jira field preparation for both P1-P3 and P4-P5 incidents,\n    ensuring all custom fields are properly passed.\n\n    Args:\n        title: Incident title\n        description: Incident description\n        priority: Priority value (1-5)\n        reporter: Jira user account ID\n        incident_category: Category name\n        environments: List of environment values (e.g. [\"PRD\", \"STG\"])\n        platforms: List of platform values (e.g. [\"platform-FR\", \"platform-DE\"])\n        impacts_data: Dictionary of impact data for business_impact computation\n        optional_fields: Optional dictionary containing:\n            - zendesk_ticket_id: Zendesk ticket ID (customer-specific)\n            - seller_contract_id: Seller contract ID (seller-specific)\n            - zoho_desk_ticket_id: Zoho Desk ticket ID (seller-specific)\n            - is_key_account: Key account flag (seller-specific)\n            - is_seller_in_golden_list: Golden list flag (seller-specific)\n            - suggested_team_routing: Suggested team routing (P4-P5 only)\n\n    Returns:\n        Dictionary of kwargs ready for jira_client.create_issue()\n    \"\"\"\n    business_impact = get_business_impact(impacts_data)\n    platform = platforms[0] if platforms else PlatformChoices.ALL.value\n\n    # Extract optional fields with defaults\n    opt = optional_fields or {}\n    zendesk_ticket_id = opt.get(\"zendesk_ticket_id\", \"\")\n    seller_contract_id = opt.get(\"seller_contract_id\", \"\")\n    zoho_desk_ticket_id = opt.get(\"zoho_desk_ticket_id\", \"\")\n    is_key_account = opt.get(\"is_key_account\")\n    is_seller_in_golden_list = opt.get(\"is_seller_in_golden_list\")\n    suggested_team_routing = opt.get(\"suggested_team_routing\")\n\n    return {\n        \"issuetype\": \"Incident\",\n        \"summary\": title,\n        \"description\": description,\n        \"priority\": priority,\n        \"reporter\": reporter,\n        \"assignee\": None,\n        \"incident_category\": incident_category,\n        \"environments\": environments,  # \u2705 Always pass environments list\n        \"platform\": platform,\n        \"business_impact\": business_impact,\n        \"zendesk_ticket_id\": zendesk_ticket_id,\n        \"seller_contract_id\": seller_contract_id,\n        \"zoho_desk_ticket_id\": zoho_desk_ticket_id,\n        \"is_key_account\": is_key_account if is_key_account is not None else False,\n        \"is_seller_in_golden_list\": is_seller_in_golden_list if is_seller_in_golden_list is not None else False,\n        \"suggested_team_routing\": suggested_team_routing,\n    }\n</code></pre>"},{"location":"reference/raid/#firefighter.raid.models","title":"models","text":"<p>Classes:</p> <ul> <li> <code>JiraTicket</code>           \u2013            <p>Jira ticket model.</p> </li> </ul>"},{"location":"reference/raid/#firefighter.raid.models.JiraTicket","title":"JiraTicket","text":"<p>               Bases: <code>JiraIssue</code></p> <p>Jira ticket model.</p>"},{"location":"reference/raid/#firefighter.raid.serializers","title":"serializers","text":"<p>Functions:</p> <ul> <li> <code>validate_no_spaces</code>             \u2013              <p>Ensure the string does not contain spaces.</p> </li> </ul>"},{"location":"reference/raid/#firefighter.raid.serializers.validate_no_spaces","title":"validate_no_spaces","text":"<pre><code>validate_no_spaces(value: str) -&gt; None\n</code></pre> <p>Ensure the string does not contain spaces.</p> Source code in <code>src/firefighter/raid/serializers.py</code> <pre><code>def validate_no_spaces(value: str) -&gt; None:\n    \"\"\"Ensure the string does not contain spaces.\"\"\"\n    if \" \" in value:\n        raise serializers.ValidationError(\"The string cannot contain spaces.\")\n</code></pre>"},{"location":"reference/raid/#firefighter.raid.service","title":"service","text":"<p>Classes:</p> <ul> <li> <code>CustomerIssueData</code>           \u2013            <p>Data container for customer issue creation parameters.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>create_issue_customer</code>             \u2013              <p>Creates a Jira Incident issue of type Customer.</p> </li> <li> <code>create_issue_documentation_request</code>             \u2013              <p>Creates a Jira issue of type Documentation/Process Request.</p> </li> <li> <code>create_issue_feature_request</code>             \u2013              <p>Creates a Jira issue of type Feature Request.</p> </li> <li> <code>create_issue_internal</code>             \u2013              <p>Creates a Jira Incident Issue of type Internal.</p> </li> <li> <code>create_issue_seller</code>             \u2013              <p>Creates a Jira Incident issue of type Seller.</p> </li> <li> <code>get_jira_user_from_user</code>             \u2013              <p>Returns the JiraUser object for a given user, if it exists in DB or can be fetched on Jira API. Returns the default JiraUser if not found.</p> </li> </ul>"},{"location":"reference/raid/#firefighter.raid.service.CustomerIssueData","title":"CustomerIssueData  <code>dataclass</code>","text":"<pre><code>CustomerIssueData(\n    priority: int | None,\n    labels: list[str] | None,\n    platform: str,\n    business_impact: str | None,\n    team_to_be_routed: str | None,\n    area: str | None,\n    zendesk_ticket_id: str | None,\n    incident_category: str | None = None,\n)\n</code></pre> <p>Data container for customer issue creation parameters.</p>"},{"location":"reference/raid/#firefighter.raid.service.create_issue_customer","title":"create_issue_customer","text":"<pre><code>create_issue_customer(title: str, description: str, reporter: str, issue_data: CustomerIssueData) -&gt; JiraObject\n</code></pre> <p>Creates a Jira Incident issue of type Customer.</p> <p>Parameters:</p> <ul> <li> <code>title</code>               (<code>str</code>)           \u2013            <p>Summary of the issue</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>Description of the issue</p> </li> <li> <code>reporter</code>               (<code>str</code>)           \u2013            <p>Jira account id of the reporter</p> </li> <li> <code>issue_data</code>               (<code>CustomerIssueData</code>)           \u2013            <p>Container with issue parameters</p> </li> </ul> Source code in <code>src/firefighter/raid/service.py</code> <pre><code>def create_issue_customer(\n    title: str,\n    description: str,\n    reporter: str,\n    issue_data: CustomerIssueData,\n) -&gt; JiraObject:\n    \"\"\"Creates a Jira Incident issue of type Customer.\n\n    Args:\n        title (str): Summary of the issue\n        description (str): Description of the issue\n        reporter (str): Jira account id of the reporter\n        issue_data (CustomerIssueData): Container with issue parameters\n    \"\"\"\n    issue = jira_client.create_issue(\n        issuetype=\"Incident\",\n        summary=title,\n        description=description,\n        assignee=None,\n        reporter=reporter,\n        priority=issue_data.priority,\n        labels=issue_data.labels,\n        platform=issue_data.platform,\n        business_impact=issue_data.business_impact,\n        suggested_team_routing=issue_data.team_to_be_routed,\n        zendesk_ticket_id=issue_data.zendesk_ticket_id,\n        incident_category=issue_data.incident_category,\n    )\n    check_issue_id(issue, title=title, reporter=reporter)\n    return issue\n</code></pre>"},{"location":"reference/raid/#firefighter.raid.service.create_issue_documentation_request","title":"create_issue_documentation_request","text":"<pre><code>create_issue_documentation_request(\n    title: str, description: str, reporter: str, priority: int | None, labels: list[str] | None, platform: str\n) -&gt; JiraObject\n</code></pre> <p>Creates a Jira issue of type Documentation/Process Request.</p> <p>Parameters:</p> <ul> <li> <code>title</code>               (<code>str</code>)           \u2013            <p>Summary of the issue</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>Description of the issue</p> </li> <li> <code>reporter</code>               (<code>str</code>)           \u2013            <p>Jira account id of the reporter</p> </li> <li> <code>priority</code>               (<code>int</code>)           \u2013            <p>Priority of the issue</p> </li> <li> <code>labels</code>               (<code>list[str]</code>)           \u2013            <p>Labels to add to the issue</p> </li> <li> <code>platform</code>               (<code>str</code>)           \u2013            <p>Platform of the issue</p> </li> </ul> Source code in <code>src/firefighter/raid/service.py</code> <pre><code>def create_issue_documentation_request(\n    title: str,\n    description: str,\n    reporter: str,\n    priority: int | None,\n    labels: list[str] | None,\n    platform: str,\n) -&gt; JiraObject:\n    \"\"\"Creates a Jira issue of type Documentation/Process Request.\n\n    Args:\n        title (str): Summary of the issue\n        description (str): Description of the issue\n        reporter (str): Jira account id of the reporter\n        priority (int): Priority of the issue\n        labels (list[str]): Labels to add to the issue\n        platform (str): Platform of the issue\n    \"\"\"\n    if labels is None:\n        labels = [\"\"]\n    if \"documentation-request\" not in labels:\n        labels.append(\"documentation-request\")\n    issue = jira_client.create_issue(\n        issuetype=\"Documentation/Process Request\",\n        summary=title,\n        description=description,\n        assignee=None,\n        reporter=reporter,\n        priority=priority,\n        labels=labels,\n        platform=platform,\n    )\n    check_issue_id(issue, title=title, reporter=reporter)\n    return issue\n</code></pre>"},{"location":"reference/raid/#firefighter.raid.service.create_issue_feature_request","title":"create_issue_feature_request","text":"<pre><code>create_issue_feature_request(\n    title: str, description: str, reporter: str, priority: int | None, labels: list[str] | None, platform: str\n) -&gt; JiraObject\n</code></pre> <p>Creates a Jira issue of type Feature Request.</p> <p>Parameters:</p> <ul> <li> <code>title</code>               (<code>str</code>)           \u2013            <p>Summary of the issue</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>Description of the issue</p> </li> <li> <code>reporter</code>               (<code>str</code>)           \u2013            <p>Jira account id of the reporter</p> </li> <li> <code>priority</code>               (<code>int</code>)           \u2013            <p>Priority of the issue</p> </li> <li> <code>labels</code>               (<code>list[str]</code>)           \u2013            <p>Labels to add to the issue</p> </li> <li> <code>platform</code>               (<code>str</code>)           \u2013            <p>Platform of the issue</p> </li> </ul> Source code in <code>src/firefighter/raid/service.py</code> <pre><code>def create_issue_feature_request(\n    title: str,\n    description: str,\n    reporter: str,\n    priority: int | None,\n    labels: list[str] | None,\n    platform: str,\n) -&gt; JiraObject:\n    \"\"\"Creates a Jira issue of type Feature Request.\n\n    Args:\n        title (str): Summary of the issue\n        description (str): Description of the issue\n        reporter (str): Jira account id of the reporter\n        priority (int): Priority of the issue\n        labels (list[str]): Labels to add to the issue\n        platform (str): Platform of the issue\n    \"\"\"\n    if labels is None:\n        labels = [\"\"]\n    if \"feature-request\" not in labels:\n        labels.append(\"feature-request\")\n    issue = jira_client.create_issue(\n        issuetype=\"Feature Request\",\n        summary=title,\n        description=description,\n        assignee=None,\n        reporter=reporter,\n        priority=priority,\n        labels=labels,\n        platform=platform,\n    )\n    check_issue_id(issue, title=title, reporter=reporter)\n    return issue\n</code></pre>"},{"location":"reference/raid/#firefighter.raid.service.create_issue_internal","title":"create_issue_internal","text":"<pre><code>create_issue_internal(\n    title: str,\n    description: str,\n    reporter: str,\n    priority: int | None,\n    labels: list[str] | None,\n    platform: str,\n    business_impact: str | None,\n    team_to_be_routed: str | None,\n    incident_category: str | None,\n) -&gt; JiraObject\n</code></pre> <p>Creates a Jira Incident Issue of type Internal.</p> <p>Parameters:</p> <ul> <li> <code>title</code>               (<code>str</code>)           \u2013            <p>Summary of the issue</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>Description of the issue</p> </li> <li> <code>reporter</code>               (<code>str</code>)           \u2013            <p>Jira account id of the reporter</p> </li> <li> <code>priority</code>               (<code>int</code>)           \u2013            <p>Priority of the issue</p> </li> <li> <code>labels</code>               (<code>list[str]</code>)           \u2013            <p>Labels to add to the issue</p> </li> <li> <code>platform</code>               (<code>str</code>)           \u2013            <p>Platform of the issue</p> </li> <li> <code>business_impact</code>               (<code>str</code>)           \u2013            <p>Business impact of the issue</p> </li> <li> <code>team_to_be_routed</code>               (<code>str</code>)           \u2013            <p>Team to be routed</p> </li> <li> <code>incident_category</code>               (<code>str</code>)           \u2013            <p>Incident category of the issue</p> </li> </ul> Source code in <code>src/firefighter/raid/service.py</code> <pre><code>def create_issue_internal(\n    title: str,\n    description: str,\n    reporter: str,\n    priority: int | None,\n    labels: list[str] | None,\n    platform: str,\n    business_impact: str | None,\n    team_to_be_routed: str | None,\n    incident_category: str | None,\n) -&gt; JiraObject:\n    \"\"\"Creates a Jira Incident Issue of type Internal.\n\n    Args:\n        title (str): Summary of the issue\n        description (str): Description of the issue\n        reporter (str): Jira account id of the reporter\n        priority (int): Priority of the issue\n        labels (list[str]): Labels to add to the issue\n        platform (str): Platform of the issue\n        business_impact (str): Business impact of the issue\n        team_to_be_routed (str): Team to be routed\n        incident_category (str): Incident category of the issue\n    \"\"\"\n    issue = jira_client.create_issue(\n        issuetype=\"Incident\",\n        summary=title,\n        description=description,\n        assignee=None,\n        reporter=reporter,\n        priority=priority,\n        labels=labels,\n        platform=platform,\n        business_impact=business_impact,\n        suggested_team_routing=team_to_be_routed,\n        incident_category=incident_category,\n    )\n    check_issue_id(issue, title=title, reporter=reporter)\n    return issue\n</code></pre>"},{"location":"reference/raid/#firefighter.raid.service.create_issue_seller","title":"create_issue_seller","text":"<pre><code>create_issue_seller(\n    title: str,\n    description: str,\n    reporter: str,\n    priority: int | None,\n    labels: list[str] | None,\n    platform: str,\n    business_impact: str | None,\n    team_to_be_routed: str | None,\n    incident_category: str | None,\n    seller_contract_id: str | None,\n    is_key_account: bool | None,\n    is_seller_in_golden_list: bool | None,\n    zoho_desk_ticket_id: str | None,\n) -&gt; JiraObject\n</code></pre> <p>Creates a Jira Incident issue of type Seller.</p> <p>Parameters:</p> <ul> <li> <code>title</code>               (<code>str</code>)           \u2013            <p>Summary of the issue</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>Description of the issue</p> </li> <li> <code>reporter</code>               (<code>str</code>)           \u2013            <p>Jira account id of the reporter</p> </li> <li> <code>priority</code>               (<code>int</code>)           \u2013            <p>Priority of the issue</p> </li> <li> <code>labels</code>               (<code>list[str]</code>)           \u2013            <p>Labels to add to the issue</p> </li> <li> <code>platform</code>               (<code>str</code>)           \u2013            <p>Platform of the issue</p> </li> <li> <code>business_impact</code>               (<code>str</code>)           \u2013            <p>Business impact of the issue</p> </li> <li> <code>team_to_be_routed</code>               (<code>str</code>)           \u2013            <p>Team to be routed</p> </li> <li> <code>incident_category</code>               (<code>str</code>)           \u2013            <p>Incident category of the issue</p> </li> <li> <code>seller_contract_id</code>               (<code>str</code>)           \u2013            <p>Seller contract id</p> </li> <li> <code>is_key_account</code>               (<code>bool</code>)           \u2013            <p>Is key account</p> </li> <li> <code>is_seller_in_golden_list</code>               (<code>bool</code>)           \u2013            <p>Is seller in golden list</p> </li> <li> <code>zoho_desk_ticket_id</code>               (<code>str</code>)           \u2013            <p>Zoho desk ticket id</p> </li> </ul> Source code in <code>src/firefighter/raid/service.py</code> <pre><code>def create_issue_seller(  # noqa: PLR0913, PLR0917\n    title: str,\n    description: str,\n    reporter: str,\n    priority: int | None,\n    labels: list[str] | None,\n    platform: str,\n    business_impact: str | None,\n    team_to_be_routed: str | None,\n    incident_category: str | None,\n    seller_contract_id: str | None,\n    is_key_account: bool | None,  # noqa: FBT001\n    is_seller_in_golden_list: bool | None,  # noqa: FBT001\n    zoho_desk_ticket_id: str | None,\n) -&gt; JiraObject:\n    \"\"\"Creates a Jira Incident issue of type Seller.\n\n    Args:\n        title (str): Summary of the issue\n        description (str): Description of the issue\n        reporter (str): Jira account id of the reporter\n        priority (int): Priority of the issue\n        labels (list[str]): Labels to add to the issue\n        platform (str): Platform of the issue\n        business_impact (str): Business impact of the issue\n        team_to_be_routed (str): Team to be routed\n        incident_category (str): Incident category of the issue\n        seller_contract_id (str): Seller contract id\n        is_key_account (bool): Is key account\n        is_seller_in_golden_list (bool): Is seller in golden list\n        zoho_desk_ticket_id (str): Zoho desk ticket id\n    \"\"\"\n    issue = jira_client.create_issue(\n        issuetype=\"Incident\",\n        summary=title,\n        description=description,\n        assignee=None,\n        reporter=reporter,\n        priority=priority,\n        labels=labels,\n        platform=platform,\n        business_impact=business_impact,\n        suggested_team_routing=team_to_be_routed,\n        seller_contract_id=seller_contract_id,\n        is_key_account=is_key_account,\n        is_seller_in_golden_list=is_seller_in_golden_list,\n        zoho_desk_ticket_id=zoho_desk_ticket_id,\n        incident_category=incident_category,\n    )\n    check_issue_id(issue, title=title, reporter=reporter)\n    return issue\n</code></pre>"},{"location":"reference/raid/#firefighter.raid.service.get_jira_user_from_user","title":"get_jira_user_from_user","text":"<pre><code>get_jira_user_from_user(user: User) -&gt; JiraUser\n</code></pre> <p>Returns the JiraUser object for a given user, if it exists in DB or can be fetched on Jira API. Returns the default JiraUser if not found.</p> Source code in <code>src/firefighter/raid/service.py</code> <pre><code>def get_jira_user_from_user(user: User) -&gt; JiraUser:\n    \"\"\"Returns the JiraUser object for a given user, if it exists in DB or can be fetched on Jira API. Returns the default JiraUser if not found.\"\"\"\n    try:\n        jira_user = jira_client.get_jira_user_from_user(user)\n    except JiraAPIError:\n        logger.exception(f\"Could not find Jira user for {user.id}\")\n\n        logger.warning(f\"User {user.id} has no Jira user\")\n        try:\n            jira_user = jira_client.get_jira_user_from_jira_id(\n                RAID_DEFAULT_JIRA_QRAFT_USER_ID\n            )\n        except JiraUserNotFoundError:\n            logger.exception(\n                f\"Could not find Jira user with account id {RAID_DEFAULT_JIRA_QRAFT_USER_ID}\"\n            )\n            jira_user = JiraUser.objects.get(id=RAID_DEFAULT_JIRA_QRAFT_USER_ID)\n    return jira_user\n</code></pre>"},{"location":"reference/raid/#firefighter.raid.utils","title":"utils","text":"<p>Functions:</p> <ul> <li> <code>get_domain_from_email</code>             \u2013              <p>Returns the domain from an email address.</p> </li> </ul>"},{"location":"reference/raid/#firefighter.raid.utils.get_domain_from_email","title":"get_domain_from_email  <code>cached</code>","text":"<pre><code>get_domain_from_email(email: str) -&gt; str\n</code></pre> <p>Returns the domain from an email address.</p> <p>Removes any subdomain(s) and the @, applies .lower().</p> <p>Parameters:</p> <ul> <li> <code>email</code>               (<code>str</code>)           \u2013            <p>The email address to extract the domain from.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The domain part of the email address.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If the email is not well-formed.</p> </li> </ul> <p>Examples:</p> <ul> <li><code>john.doe@example.com</code> =&gt; <code>example.com</code></li> <li><code>alice.bob@test.example.ORG</code> =&gt; <code>example.org</code></li> <li><code>webmaster@localhost</code> =&gt; <code>localhost</code></li> </ul> Source code in <code>src/firefighter/raid/utils.py</code> <pre><code>@cache\ndef get_domain_from_email(email: str) -&gt; str:\n    \"\"\"Returns the domain from an email address.\n\n    Removes any subdomain(s) and the @, applies .lower().\n\n    Args:\n        email: The email address to extract the domain from.\n\n    Returns:\n        The domain part of the email address.\n\n    Raises:\n        ValueError: If the email is not well-formed.\n\n    Examples:\n      - `john.doe@example.com` =&gt; `example.com`\n      - `alice.bob@test.example.ORG` =&gt; `example.org`\n      - `webmaster@localhost` =&gt; `localhost`\n    \"\"\"\n    # If there is not exactly one @, the email is invalid\n    if email.count(\"@\") != 1:\n        msg = f\"Invalid email: {email}\"\n        raise ValueError(msg)\n    domain = email.rsplit(\"@\", maxsplit=1)[-1]\n    if not domain:\n        msg = f\"Invalid email: {email}\"\n        raise ValueError(msg)\n    domain_parts = domain.split(\".\")\n\n    return (\".\".join(domain_parts[-2:]) if len(domain_parts) &gt; 2 else domain).lower()\n</code></pre>"},{"location":"reference/raid/#firefighter.raid.views","title":"views","text":"<p>Classes:</p> <ul> <li> <code>CreateJiraBotView</code>           \u2013            </li> <li> <code>JiraCommentAlertView</code>           \u2013            </li> <li> <code>JiraUpdateAlertView</code>           \u2013            </li> </ul>"},{"location":"reference/raid/#firefighter.raid.views.CreateJiraBotView","title":"CreateJiraBotView","text":"<p>               Bases: <code>CreateModelMixin</code>, <code>GenericAPIView[JiraTicket]</code></p> <p>Methods:</p> <ul> <li> <code>post</code>             \u2013              <p>Allow to create a Jira ticket through Landbot.</p> </li> </ul>"},{"location":"reference/raid/#firefighter.raid.views.CreateJiraBotView.post","title":"post","text":"<pre><code>post(request: Request, *args: Never, **kwargs: Never) -&gt; Response\n</code></pre> <p>Allow to create a Jira ticket through Landbot. Requires a valid Bearer token, that you can create in the back-office if you have the right permissions.</p> Source code in <code>src/firefighter/raid/views/__init__.py</code> <pre><code>def post(self, request: Request, *args: Never, **kwargs: Never) -&gt; Response:\n    \"\"\"Allow to create a Jira ticket through Landbot.\n    Requires a valid Bearer token, that you can create in the back-office if you have the right permissions.\n    \"\"\"\n    serializer = self.get_serializer(data=request.data)\n    serializer.is_valid(raise_exception=True)\n    serializer.save()\n    headers = self.get_success_headers(serializer.data)\n    return Response(\n        serializer.data.get(\"key\"), status=status.HTTP_201_CREATED, headers=headers\n    )\n</code></pre>"},{"location":"reference/raid/#firefighter.raid.views.JiraCommentAlertView","title":"JiraCommentAlertView","text":"<p>               Bases: <code>CreateAPIView[Any]</code></p> <p>Methods:</p> <ul> <li> <code>post</code>             \u2013              <p>Allow to send a message in Slack when a comment in a Jira ticket is created or modified.</p> </li> </ul>"},{"location":"reference/raid/#firefighter.raid.views.JiraCommentAlertView.post","title":"post","text":"<pre><code>post(request: Request, *args: Never, **kwargs: Never) -&gt; Response\n</code></pre> <p>Allow to send a message in Slack when a comment in a Jira ticket is created or modified. Requires a valid Bearer token, that you can create in the back-office if you have the right permissions.</p> Source code in <code>src/firefighter/raid/views/__init__.py</code> <pre><code>def post(self, request: Request, *args: Never, **kwargs: Never) -&gt; Response:\n    \"\"\"Allow to send a message in Slack when a comment in a Jira ticket is created or modified.\n    Requires a valid Bearer token, that you can create in the back-office if you have the right permissions.\n    \"\"\"\n    serializer = self.get_serializer(data=request.data)\n    serializer.is_valid(raise_exception=True)\n    serializer.save()\n\n    return Response()\n</code></pre>"},{"location":"reference/raid/#firefighter.raid.views.JiraUpdateAlertView","title":"JiraUpdateAlertView","text":"<p>               Bases: <code>CreateAPIView[Any]</code></p> <p>Methods:</p> <ul> <li> <code>post</code>             \u2013              <p>Allow to send a message in Slack when some fields (\"Priority\", \"project\", \"description\", \"status\") of a Jira ticket are updated.</p> </li> </ul>"},{"location":"reference/raid/#firefighter.raid.views.JiraUpdateAlertView.post","title":"post","text":"<pre><code>post(request: Request, *args: Never, **kwargs: Never) -&gt; Response\n</code></pre> <p>Allow to send a message in Slack when some fields (\"Priority\", \"project\", \"description\", \"status\") of a Jira ticket are updated. Requires a valid Bearer token, that you can create in the back-office if you have the right permissions.</p> Source code in <code>src/firefighter/raid/views/__init__.py</code> <pre><code>def post(self, request: Request, *args: Never, **kwargs: Never) -&gt; Response:\n    \"\"\"Allow to send a message in Slack when some fields (\"Priority\", \"project\", \"description\", \"status\") of a Jira ticket are updated.\n    Requires a valid Bearer token, that you can create in the back-office if you have the right permissions.\n    \"\"\"\n    serializer = self.get_serializer(data=request.data)\n    serializer.is_valid(raise_exception=True)\n    serializer.save()\n\n    return Response()\n</code></pre>"},{"location":"reference/slack/","title":"slack","text":""},{"location":"reference/slack/#firefighter.slack","title":"slack","text":"<p>Modules:</p> <ul> <li> <code>admin</code>           \u2013            </li> <li> <code>factories</code>           \u2013            </li> <li> <code>management</code>           \u2013            </li> <li> <code>messages</code>           \u2013            </li> <li> <code>migrations</code>           \u2013            </li> <li> <code>models</code>           \u2013            </li> <li> <code>rules</code>           \u2013            <p>Rules for publishing incidents in channels.</p> </li> <li> <code>signals</code>           \u2013            </li> <li> <code>slack_app</code>           \u2013            </li> <li> <code>slack_incident_context</code>           \u2013            </li> <li> <code>slack_templating</code>           \u2013            </li> <li> <code>tasks</code>           \u2013            </li> <li> <code>utils</code>           \u2013            </li> <li> <code>views</code>           \u2013            </li> </ul>"},{"location":"reference/slack/#firefighter.slack.admin","title":"admin","text":"<p>Classes:</p> <ul> <li> <code>ConversationAdmin</code>           \u2013            </li> </ul> <p>Functions:</p> <ul> <li> <code>ask_key_timestamps</code>             \u2013              <p>Will send a message to the Incident conversation (if it exists) to ask for key events.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.admin.ConversationAdmin","title":"ConversationAdmin","text":"<p>               Bases: <code>ModelAdmin[Conversation]</code></p> <p>Methods:</p> <ul> <li> <code>get_queryset</code>             \u2013              <p>Restrict the queryset to only include conversations that are not IncidentChannels. Incident channels are managed in the IncidentChannelAdmin.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.admin.ConversationAdmin.get_queryset","title":"get_queryset","text":"<pre><code>get_queryset(request: HttpRequest) -&gt; QuerySet[Conversation]\n</code></pre> <p>Restrict the queryset to only include conversations that are not IncidentChannels. Incident channels are managed in the IncidentChannelAdmin.</p> Source code in <code>src/firefighter/slack/admin.py</code> <pre><code>def get_queryset(self, request: HttpRequest) -&gt; QuerySet[Conversation]:\n    \"\"\"Restrict the queryset to only include conversations that are not IncidentChannels. Incident channels are managed in the IncidentChannelAdmin.\"\"\"\n    qs = super().get_queryset(request)\n\n    return Conversation.objects.not_incident_channel(qs)\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.admin.ask_key_timestamps","title":"ask_key_timestamps","text":"<pre><code>ask_key_timestamps(self: IncidentAdmin, request: HttpRequest, queryset: QuerySet[Incident]) -&gt; None\n</code></pre> <p>Will send a message to the Incident conversation (if it exists) to ask for key events. TODO Error handling.</p> Source code in <code>src/firefighter/slack/admin.py</code> <pre><code>@action(description=_(\"Send a message to ask for key timestamps\"))\ndef ask_key_timestamps(\n    self: firefighter.incidents.admin.IncidentAdmin,\n    request: HttpRequest,\n    queryset: QuerySet[Incident],\n) -&gt; None:\n    \"\"\"Will send a message to the Incident conversation (if it exists) to ask for key events.\n    TODO Error handling.\n    \"\"\"\n    # ruff: noqa: PLC0415\n    from firefighter.slack.views.modals.key_event_message import SlackMessageKeyEvents\n\n    success: list[tuple[int, bool]] = []\n    errors: list[tuple[int, bool, Exception | str]] = []\n    for incident in queryset:\n        if incident.conversation:\n            try:\n                incident.conversation.send_message_and_save(\n                    SlackMessageKeyEvents(incident=incident)\n                )\n                success.append((incident.id, True))\n            except SlackApiError as e:\n                errors.append((incident.id, False, e))\n        else:\n            errors.append((incident.id, False, \"No conversation\"))\n\n    if len(success) &gt; 0:\n        success_str = \", \".join(f\"#{key[0]}\" for key in success)\n        self.message_user(\n            request,\n            ngettext(\n                f\"Sent message metrics for %d incident ({success_str}).\",  # noqa: INT001\n                f\"Sent messages metrics for %d incidents ({success_str}).\",\n                len(success),\n            )\n            % len(success),\n            constants.SUCCESS,\n        )\n    if len(errors) &gt; 0:\n        self.message_user(\n            request,\n            format_html(\n                \"Error sending message: &lt;br/&gt;{}\",\n                \"&lt;br/&gt;\".join(f\"#{key[0]}: {key[2]}\" for key in errors),\n            ),\n            constants.ERROR,\n        )\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.factories","title":"factories","text":"<p>Classes:</p> <ul> <li> <code>SlackProvider</code>           \u2013            <p>Custom Faker provider for generating Slack IDs.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.factories.SlackProvider","title":"SlackProvider","text":"<p>               Bases: <code>BaseProvider</code></p> <p>Custom Faker provider for generating Slack IDs.</p>"},{"location":"reference/slack/#firefighter.slack.management","title":"management","text":"<p>Modules:</p> <ul> <li> <code>commands</code>           \u2013            </li> </ul>"},{"location":"reference/slack/#firefighter.slack.management.commands","title":"commands","text":"<p>Modules:</p> <ul> <li> <code>switch_test_users</code>           \u2013            <p>Django management command to switch Slack user IDs for test environment.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.management.commands.switch_test_users","title":"switch_test_users","text":"<p>Django management command to switch Slack user IDs for test environment.</p> <p>This command: 1. Fetches all users from the test Slack workspace 2. Generates a mapping file based on email addresses 3. Updates the database with test Slack user IDs</p> <p>Classes:</p> <ul> <li> <code>Command</code>           \u2013            </li> </ul>"},{"location":"reference/slack/#firefighter.slack.management.commands.switch_test_users.Command","title":"Command","text":"<p>               Bases: <code>BaseCommand</code></p> <p>Methods:</p> <ul> <li> <code>handle</code>             \u2013              <p>Main command handler.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.management.commands.switch_test_users.Command.handle","title":"handle","text":"<pre><code>handle(*args: Any, **options: Any) -&gt; None\n</code></pre> <p>Main command handler.</p> Source code in <code>src/firefighter/slack/management/commands/switch_test_users.py</code> <pre><code>def handle(self, *args: Any, **options: Any) -&gt; None:\n    \"\"\"Main command handler.\"\"\"\n    mapping_file = Path(options[\"mapping_file\"])\n\n    try:\n        if options[\"restore\"]:\n            # Restore original Slack IDs from mapping file\n            if not mapping_file.exists():\n                self._raise_mapping_file_not_found(mapping_file)\n\n            self.stdout.write(\"\ud83d\udcc4 Loading mapping from file...\")\n            slack_mapping = self._load_mapping_file(mapping_file)\n\n            self.stdout.write(\"\ud83d\udd04 Restoring original Slack IDs...\")\n            updated_count = self._restore_mapping(slack_mapping, dry_run=options[\"dry_run\"])\n\n            if options[\"dry_run\"]:\n                self.stdout.write(\n                    self.style.WARNING(f\"\ud83d\udd0d DRY RUN: Would restore {updated_count} users\")\n                )\n            else:\n                self.stdout.write(\n                    self.style.SUCCESS(f\"\u2705 Restored {updated_count} users to original Slack IDs\")\n                )\n            return\n\n        if not settings.SLACK_BOT_TOKEN:\n            self._raise_slack_token_not_configured()\n\n        # Step 1: Generate mapping by querying test Slack workspace\n        self.stdout.write(\"\ud83d\udd0d Fetching users from test Slack workspace...\")\n        slack_mapping = self._generate_slack_mapping()\n\n        # Step 2: Save mapping to file\n        self._save_mapping_file(slack_mapping, mapping_file)\n        self.stdout.write(\n            self.style.SUCCESS(f\"\u2705 Mapping file saved to {mapping_file}\")\n        )\n\n        if options[\"generate_only\"]:\n            self.stdout.write(\"\ud83d\udcc4 Generation complete. Use --apply to update database.\")\n            return\n\n        # Step 3: Apply mapping to database\n        self.stdout.write(\"\ud83d\udcdd Applying mapping to database...\")\n        updated_count = self._apply_mapping(slack_mapping, dry_run=options[\"dry_run\"])\n\n        if options[\"dry_run\"]:\n            self.stdout.write(\n                self.style.WARNING(f\"\ud83d\udd0d DRY RUN: Would update {updated_count} users\")\n            )\n        else:\n            self.stdout.write(\n                self.style.SUCCESS(f\"\u2705 Updated {updated_count} users with test Slack IDs\")\n            )\n\n    except SlackApiError as e:\n        error_msg = f\"Slack API error: {e.response['error']}\"\n        raise CommandError(error_msg) from e\n    except Exception as e:\n        error_msg = f\"Error: {e}\"\n        raise CommandError(error_msg) from e\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.messages","title":"messages","text":"<p>Modules:</p> <ul> <li> <code>base</code>           \u2013            </li> <li> <code>slack_messages</code>           \u2013            </li> </ul>"},{"location":"reference/slack/#firefighter.slack.messages.base","title":"base","text":"<p>Classes:</p> <ul> <li> <code>SlackMessageStrategy</code>           \u2013            <p>Define how should the message be posted.</p> </li> <li> <code>SlackMessageSurface</code>           \u2013            <p>Base class for Slack messages, which are sent to a channel or a user.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.messages.base.SlackMessageStrategy","title":"SlackMessageStrategy","text":"<p>               Bases: <code>Enum</code></p> <p>Define how should the message be posted.</p> <ul> <li><code>append</code>: add the message to the channel, even if a message with the same type has already been posted.</li> <li><code>replace</code>: replace the last message with the same type (push new one, delete old one)</li> <li><code>update</code>: update in place the last message with the same type</li> </ul>"},{"location":"reference/slack/#firefighter.slack.messages.base.SlackMessageSurface","title":"SlackMessageSurface","text":"<pre><code>SlackMessageSurface()\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Base class for Slack messages, which are sent to a channel or a user.</p> <p>This provides a common interface to send messages with text, blocks and metadata.</p> <p>This is helpful to send messages but also to save them in DB.</p> <p>Methods:</p> <ul> <li> <code>get_blocks</code>             \u2013              <p>Returns the blocks of the message.</p> </li> <li> <code>get_metadata</code>             \u2013              <p>The value of <code>event_type</code> should be an alphanumeric string, and human-readable. The value of this field may appear in the UI to developers, so keep this in mind when choosing a value. Developers should make an effort to name with the pattern  and  <li> <code>get_text</code>             \u2013              <p>Returns the text of the message.</p> </li> <li> <code>post_message</code>             \u2013              <p>Deprecated. Only use for Global Channel, until the global channel is set in DB.</p> </li> <p>Attributes:</p> <ul> <li> <code>strategy</code>               (<code>SlackMessageStrategy</code>)           \u2013            <p>Alphanumeric ID, starting with a letter, that may contain underscores.</p> </li> </ul> Source code in <code>src/firefighter/slack/messages/base.py</code> <pre><code>def __init__(self) -&gt; None:\n    if not self.id or self.id == \"\":\n        logger.warning(f\"No Slack message ID set for {self.__class__.__name__}.\")\n    # Check the ID is well-formed to be a Slack event_type: alphanumeric string, starting with a letter, containing underscore\n    elif not VALID_ID_REGEX.match(self.id):\n        logger.warning(\n            f\"Slack message ID {self.id} is not well formed for {self.__class__.__name__}.\"\n        )\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.messages.base.SlackMessageSurface.strategy","title":"strategy  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>strategy: SlackMessageStrategy = APPEND\n</code></pre> <p>Alphanumeric ID, starting with a letter, that may contain underscores.</p>"},{"location":"reference/slack/#firefighter.slack.messages.base.SlackMessageSurface.get_blocks","title":"get_blocks","text":"<pre><code>get_blocks() -&gt; list[Block]\n</code></pre> <p>Returns the blocks of the message.</p> <p>Returns:</p> <ul> <li> <code>list[Block]</code>           \u2013            <p>list[Block]: List of Slack Blocks for the message. Default is the text as a SectionBlock.</p> </li> </ul> Source code in <code>src/firefighter/slack/messages/base.py</code> <pre><code>def get_blocks(self) -&gt; list[Block]:\n    \"\"\"Returns the blocks of the message.\n\n    Returns:\n        list[Block]: List of Slack Blocks for the message. Default is the text as a SectionBlock.\n    \"\"\"\n    return [SectionBlock(text=self.get_text())]\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.messages.base.SlackMessageSurface.get_metadata","title":"get_metadata","text":"<pre><code>get_metadata() -&gt; Metadata\n</code></pre> <p>The value of <code>event_type</code> should be an alphanumeric string, and human-readable. The value of this field may appear in the UI to developers, so keep this in mind when choosing a value. Developers should make an effort to name with the pattern  and  See more https://api.slack.com/reference/metadata. <p>Returns:</p> <ul> <li> <code>Metadata</code> (              <code>Metadata</code> )          \u2013            <p>Slack Metadata for the message.</p> </li> </ul> Source code in <code>src/firefighter/slack/messages/base.py</code> <pre><code>def get_metadata(self) -&gt; Metadata:\n    \"\"\"The value of `event_type` should be an alphanumeric string, and human-readable. The value of this field may appear in the UI to developers, so keep this in mind when choosing a value. Developers should make an effort to name with the pattern &lt;resource_name_singular&gt; and &lt;action_in_past_tense&gt;\n    See more https://api.slack.com/reference/metadata.\n\n    Returns:\n        Metadata: Slack Metadata for the message.\n    \"\"\"\n    return Metadata(event_type=self.id, event_payload={\"ff_type\": self.id})\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.messages.base.SlackMessageSurface.get_text","title":"get_text  <code>abstractmethod</code>","text":"<pre><code>get_text() -&gt; str\n</code></pre> <p>Returns the text of the message.</p> Source code in <code>src/firefighter/slack/messages/base.py</code> <pre><code>@abstractmethod\ndef get_text(self) -&gt; str:\n    \"\"\"Returns the text of the message.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.messages.base.SlackMessageSurface.post_message","title":"post_message","text":"<pre><code>post_message(conversation_id: str, client: WebClient = DefaultWebClient, **kwargs: Never) -&gt; SlackResponse\n</code></pre> <p>Deprecated. Only use for Global Channel, until the global channel is set in DB.</p> Source code in <code>src/firefighter/slack/messages/base.py</code> <pre><code>@slack_client\ndef post_message(\n    self,\n    conversation_id: str,\n    client: WebClient = DefaultWebClient,\n    **kwargs: Never,\n) -&gt; SlackResponse:\n    \"\"\"Deprecated. Only use for Global Channel, until the global channel is set in DB.\"\"\"\n    return client.chat_postMessage(\n        channel=conversation_id,\n        **self.get_slack_message_params(),\n    )\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.messages.slack_messages","title":"slack_messages","text":"<p>Classes:</p> <ul> <li> <code>SlackMessageIncidentDeclaredAnnouncementGeneral</code>           \u2013            </li> <li> <code>SlackMessageIncidentRolesUpdated</code>           \u2013            <p>The message to post in the incident channel when the roles are updated.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.messages.slack_messages.SlackMessageIncidentDeclaredAnnouncementGeneral","title":"SlackMessageIncidentDeclaredAnnouncementGeneral","text":"<pre><code>SlackMessageIncidentDeclaredAnnouncementGeneral(incident: Incident)\n</code></pre> <p>               Bases: <code>SlackMessageSurface</code></p> <p>Parameters:</p> <ul> <li> <code>incident</code>               (<code>Incident</code>)           \u2013            <p>Your incident</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>get_metadata</code>             \u2013              <p>The value of <code>event_type</code> should be an alphanumeric string, and human-readable. The value of this field may appear in the UI to developers, so keep this in mind when choosing a value. Developers should make an effort to name with the pattern  and  <li> <code>post_message</code>             \u2013              <p>Deprecated. Only use for Global Channel, until the global channel is set in DB.</p> </li> <p>Attributes:</p> <ul> <li> <code>strategy</code>               (<code>SlackMessageStrategy</code>)           \u2013            <p>Alphanumeric ID, starting with a letter, that may contain underscores.</p> </li> </ul> Source code in <code>src/firefighter/slack/messages/slack_messages.py</code> <pre><code>def __init__(self, incident: Incident) -&gt; None:\n    \"\"\"The message to post in general incident channel (tag=tech_incidents) when an incident is opened.\n\n    Args:\n        incident (Incident): Your incident\n    \"\"\"\n    self.incident = incident\n    super().__init__()\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.messages.slack_messages.SlackMessageIncidentDeclaredAnnouncementGeneral.strategy","title":"strategy  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>strategy: SlackMessageStrategy = APPEND\n</code></pre> <p>Alphanumeric ID, starting with a letter, that may contain underscores.</p>"},{"location":"reference/slack/#firefighter.slack.messages.slack_messages.SlackMessageIncidentDeclaredAnnouncementGeneral.get_metadata","title":"get_metadata","text":"<pre><code>get_metadata() -&gt; Metadata\n</code></pre> <p>The value of <code>event_type</code> should be an alphanumeric string, and human-readable. The value of this field may appear in the UI to developers, so keep this in mind when choosing a value. Developers should make an effort to name with the pattern  and  See more https://api.slack.com/reference/metadata. <p>Returns:</p> <ul> <li> <code>Metadata</code> (              <code>Metadata</code> )          \u2013            <p>Slack Metadata for the message.</p> </li> </ul> Source code in <code>src/firefighter/slack/messages/base.py</code> <pre><code>def get_metadata(self) -&gt; Metadata:\n    \"\"\"The value of `event_type` should be an alphanumeric string, and human-readable. The value of this field may appear in the UI to developers, so keep this in mind when choosing a value. Developers should make an effort to name with the pattern &lt;resource_name_singular&gt; and &lt;action_in_past_tense&gt;\n    See more https://api.slack.com/reference/metadata.\n\n    Returns:\n        Metadata: Slack Metadata for the message.\n    \"\"\"\n    return Metadata(event_type=self.id, event_payload={\"ff_type\": self.id})\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.messages.slack_messages.SlackMessageIncidentDeclaredAnnouncementGeneral.post_message","title":"post_message","text":"<pre><code>post_message(conversation_id: str, client: WebClient = DefaultWebClient, **kwargs: Never) -&gt; SlackResponse\n</code></pre> <p>Deprecated. Only use for Global Channel, until the global channel is set in DB.</p> Source code in <code>src/firefighter/slack/messages/base.py</code> <pre><code>@slack_client\ndef post_message(\n    self,\n    conversation_id: str,\n    client: WebClient = DefaultWebClient,\n    **kwargs: Never,\n) -&gt; SlackResponse:\n    \"\"\"Deprecated. Only use for Global Channel, until the global channel is set in DB.\"\"\"\n    return client.chat_postMessage(\n        channel=conversation_id,\n        **self.get_slack_message_params(),\n    )\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.messages.slack_messages.SlackMessageIncidentRolesUpdated","title":"SlackMessageIncidentRolesUpdated","text":"<pre><code>SlackMessageIncidentRolesUpdated(\n    incident: Incident, incident_update: IncidentUpdate | None, *, first_update: bool = False, updated_fields: list[str] | None = None\n)\n</code></pre> <p>               Bases: <code>SlackMessageSurface</code></p> <p>The message to post in the incident channel when the roles are updated.</p> <p>Parameters:</p> <ul> <li> <code>incident</code>               (<code>Incident</code>)           \u2013            <p>Your incident.</p> </li> <li> <code>incident_update</code>               (<code>IncidentUpdate</code>)           \u2013            <p>The opening incident update.</p> </li> <li> <code>first_update</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether this is the first update of the incident. Defaults to False.</p> </li> <li> <code>updated_fields</code>               (<code>list[str]</code>, default:                   <code>None</code> )           \u2013            <p>The fields that were updated. Defaults to None.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>post_message</code>             \u2013              <p>Deprecated. Only use for Global Channel, until the global channel is set in DB.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>strategy</code>               (<code>SlackMessageStrategy</code>)           \u2013            <p>Alphanumeric ID, starting with a letter, that may contain underscores.</p> </li> </ul> Source code in <code>src/firefighter/slack/messages/slack_messages.py</code> <pre><code>def __init__(\n    self,\n    incident: Incident,\n    incident_update: IncidentUpdate | None,\n    *,\n    first_update: bool = False,\n    updated_fields: list[str] | None = None,\n) -&gt; None:\n    self.incident = incident\n    self.incident_update = incident_update\n    self.first_update = first_update\n    self.updated_fields = updated_fields\n    self._new_roles = self._get_updated_roles()\n    super().__init__()\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.messages.slack_messages.SlackMessageIncidentRolesUpdated.strategy","title":"strategy  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>strategy: SlackMessageStrategy = APPEND\n</code></pre> <p>Alphanumeric ID, starting with a letter, that may contain underscores.</p>"},{"location":"reference/slack/#firefighter.slack.messages.slack_messages.SlackMessageIncidentRolesUpdated.post_message","title":"post_message","text":"<pre><code>post_message(conversation_id: str, client: WebClient = DefaultWebClient, **kwargs: Never) -&gt; SlackResponse\n</code></pre> <p>Deprecated. Only use for Global Channel, until the global channel is set in DB.</p> Source code in <code>src/firefighter/slack/messages/base.py</code> <pre><code>@slack_client\ndef post_message(\n    self,\n    conversation_id: str,\n    client: WebClient = DefaultWebClient,\n    **kwargs: Never,\n) -&gt; SlackResponse:\n    \"\"\"Deprecated. Only use for Global Channel, until the global channel is set in DB.\"\"\"\n    return client.chat_postMessage(\n        channel=conversation_id,\n        **self.get_slack_message_params(),\n    )\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.migrations","title":"migrations","text":"<p>Modules:</p> <ul> <li> <code>0006_copy_components_to_incident_categories</code>           \u2013            </li> </ul>"},{"location":"reference/slack/#firefighter.slack.migrations.0006_copy_components_to_incident_categories","title":"0006_copy_components_to_incident_categories","text":"<p>Functions:</p> <ul> <li> <code>copy_components_to_incident_categories</code>             \u2013              <p>Copy all component M2M relationships to incident_categories M2M relationships</p> </li> <li> <code>reverse_copy_components_to_incident_categories</code>             \u2013              <p>Reverse: copy incident_categories relationships back to components</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.migrations.0006_copy_components_to_incident_categories.copy_components_to_incident_categories","title":"copy_components_to_incident_categories","text":"<pre><code>copy_components_to_incident_categories(apps, schema_editor)\n</code></pre> <p>Copy all component M2M relationships to incident_categories M2M relationships</p> Source code in <code>src/firefighter/slack/migrations/0006_copy_components_to_incident_categories.py</code> <pre><code>def copy_components_to_incident_categories(apps, schema_editor):\n    \"\"\"Copy all component M2M relationships to incident_categories M2M relationships\"\"\"\n    Conversation = apps.get_model(\"slack\", \"Conversation\")\n    UserGroup = apps.get_model(\"slack\", \"UserGroup\")\n\n    # Copy conversation components to incident_categories\n    conversations_updated = 0\n    for conversation in Conversation.objects.prefetch_related(\"components\").all():\n        # Copy all component relationships to incident_categories (same UUIDs)\n        incident_category_ids = list(conversation.components.values_list(\"id\", flat=True))\n        conversation.incident_categories.set(incident_category_ids)\n        if incident_category_ids:\n            conversations_updated += 1\n\n    # Copy usergroup components to incident_categories\n    usergroups_updated = 0\n    for usergroup in UserGroup.objects.prefetch_related(\"components\").all():\n        incident_category_ids = list(usergroup.components.values_list(\"id\", flat=True))\n        usergroup.incident_categories.set(incident_category_ids)\n        if incident_category_ids:\n            usergroups_updated += 1\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.migrations.0006_copy_components_to_incident_categories.reverse_copy_components_to_incident_categories","title":"reverse_copy_components_to_incident_categories","text":"<pre><code>reverse_copy_components_to_incident_categories(apps, schema_editor)\n</code></pre> <p>Reverse: copy incident_categories relationships back to components</p> Source code in <code>src/firefighter/slack/migrations/0006_copy_components_to_incident_categories.py</code> <pre><code>def reverse_copy_components_to_incident_categories(apps, schema_editor):\n    \"\"\"Reverse: copy incident_categories relationships back to components\"\"\"\n    Conversation = apps.get_model(\"slack\", \"Conversation\")\n    UserGroup = apps.get_model(\"slack\", \"UserGroup\")\n\n    # Copy conversation incident_categories back to components\n    for conversation in Conversation.objects.prefetch_related(\"incident_categories\").all():\n        component_ids = list(conversation.incident_categories.values_list(\"id\", flat=True))\n        conversation.components.set(component_ids)\n\n    # Copy usergroup incident_categories back to components\n    for usergroup in UserGroup.objects.prefetch_related(\"incident_categories\").all():\n        component_ids = list(usergroup.incident_categories.values_list(\"id\", flat=True))\n        usergroup.components.set(component_ids)\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.models","title":"models","text":"<p>Modules:</p> <ul> <li> <code>conversation</code>           \u2013            </li> <li> <code>incident_channel</code>           \u2013            </li> <li> <code>message</code>           \u2013            </li> <li> <code>sos</code>           \u2013            </li> <li> <code>user</code>           \u2013            </li> <li> <code>user_group</code>           \u2013            </li> </ul>"},{"location":"reference/slack/#firefighter.slack.models.conversation","title":"conversation","text":"<p>Classes:</p> <ul> <li> <code>Conversation</code>           \u2013            <p>Model a Slack API Conversation.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.models.conversation.Conversation","title":"Conversation","text":"<p>               Bases: <code>Model</code></p> <p>Model a Slack API Conversation. A Slack Conversation can be a public channel, a private channel, a direct message, or a multi-person direct message. Reference: https://api.slack.com/types/conversation.</p> <p>Methods:</p> <ul> <li> <code>add_bookmark</code>             \u2013              <p>Convenience method to add a bookmark on this conversation.</p> </li> <li> <code>send_message</code>             \u2013              <p>Convenience method to send a message on this conversation.</p> </li> <li> <code>send_message_and_save</code>             \u2013              <p>Convenience method to send a message on this conversation.</p> </li> <li> <code>send_message_ephemeral</code>             \u2013              <p>Convenience method to send an ephemeral message on this conversation.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>deep_link</code>               (<code>str</code>)           \u2013            <p>Deep link (<code>slack://</code>) to the conversation in the Slack client.</p> </li> <li> <code>link</code>               (<code>str</code>)           \u2013            <p>Regular HTTPS link to the conversation through Slack.com.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.models.conversation.Conversation.deep_link","title":"deep_link  <code>property</code>","text":"<pre><code>deep_link: str\n</code></pre> <p>Deep link (<code>slack://</code>) to the conversation in the Slack client.</p>"},{"location":"reference/slack/#firefighter.slack.models.conversation.Conversation.link","title":"link  <code>property</code>","text":"<pre><code>link: str\n</code></pre> <p>Regular HTTPS link to the conversation through Slack.com.</p>"},{"location":"reference/slack/#firefighter.slack.models.conversation.Conversation.add_bookmark","title":"add_bookmark","text":"<pre><code>add_bookmark(\n    title: str,\n    _type: str = \"link\",\n    emoji: str | None = None,\n    entity_id: str | None = None,\n    link: str | None = None,\n    parent_id: str | None = None,\n    client: WebClient = DefaultWebClient,\n    **kwargs: Any\n) -&gt; None\n</code></pre> <p>Convenience method to add a bookmark on this conversation.</p> Source code in <code>src/firefighter/slack/models/conversation.py</code> <pre><code>@slack_client\ndef add_bookmark(\n    self,\n    title: str,\n    _type: str = \"link\",\n    emoji: str | None = None,\n    entity_id: str | None = None,\n    link: str | None = None,  # include when type is 'link'\n    parent_id: str | None = None,\n    client: WebClient = DefaultWebClient,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"Convenience method to add a bookmark on this conversation.\"\"\"\n    client.bookmarks_add(\n        channel_id=self.channel_id,\n        title=title,\n        link=link,\n        emoji=emoji,\n        type=_type,\n        entity_id=entity_id,\n        parent_id=parent_id,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.models.conversation.Conversation.send_message","title":"send_message","text":"<pre><code>send_message(\n    text: str | None = None, blocks: Sequence[dict[str, Any] | Block] | None = None, client: WebClient = DefaultWebClient, **kwargs: Any\n) -&gt; None\n</code></pre> <p>Convenience method to send a message on this conversation.</p> Source code in <code>src/firefighter/slack/models/conversation.py</code> <pre><code>@slack_client\ndef send_message(\n    self,\n    text: str | None = None,\n    blocks: Sequence[dict[str, Any] | Block] | None = None,\n    client: WebClient = DefaultWebClient,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"Convenience method to send a message on this conversation.\"\"\"\n    if kwargs.get(\"channel\"):\n        raise ValueError(\n            \"You can't set the channel when using send_message on a conversation!\"\n        )\n\n    client.chat_postMessage(\n        channel=self.channel_id, text=text, blocks=blocks, **kwargs\n    )\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.models.conversation.Conversation.send_message_and_save","title":"send_message_and_save","text":"<pre><code>send_message_and_save(\n    message: SlackMessageSurface,\n    client: WebClient = DefaultWebClient,\n    strategy: SlackMessageStrategy | None = None,\n    strategy_args: dict[str, Any] | None = None,\n    *,\n    pin: bool = False\n) -&gt; SlackResponse\n</code></pre> <p>Convenience method to send a message on this conversation.</p> Source code in <code>src/firefighter/slack/models/conversation.py</code> <pre><code>@slack_client\ndef send_message_and_save(\n    self,\n    message: SlackMessageSurface,\n    client: WebClient = DefaultWebClient,\n    strategy: SlackMessageStrategy | None = None,\n    strategy_args: dict[str, Any] | None = None,\n    *,\n    pin: bool = False,\n) -&gt; SlackResponse:\n    \"\"\"Convenience method to send a message on this conversation.\"\"\"\n    if strategy is None:\n        strategy = message.strategy\n\n    kwargs = {}\n    # XXX Get save context?\n    if hasattr(message, \"incident\"):\n        kwargs[\"incident\"] = message.incident\n    if hasattr(message, \"incident_update\"):\n        kwargs[\"incident_update\"] = message.incident_update\n    kwargs[\"ff_type\"] = message.id\n    if strategy == SlackMessageStrategy.APPEND:\n        strategy_res = self._send_message_strategy_append(message, client, kwargs)\n    elif strategy == SlackMessageStrategy.UPDATE:\n        strategy_res = self._send_message_strategy_update(message, client, kwargs)\n    elif strategy == SlackMessageStrategy.REPLACE:\n        strategy_res = self._send_message_strategy_replace(\n            message, client, strategy_args, kwargs\n        )\n    if pin:\n        self._pin_message(\n            res=strategy_res,\n            client=client,\n        )\n    return strategy_res\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.models.conversation.Conversation.send_message_ephemeral","title":"send_message_ephemeral","text":"<pre><code>send_message_ephemeral(message: SlackMessageSurface, user: SlackUser | str, client: WebClient = DefaultWebClient, **kwargs: Any) -&gt; None\n</code></pre> <p>Convenience method to send an ephemeral message on this conversation. <code>user</code>, <code>channel</code>, <code>blocks</code>, <code>text</code> and <code>metadata</code> should not be passed in kwargs.</p> Source code in <code>src/firefighter/slack/models/conversation.py</code> <pre><code>@slack_client\ndef send_message_ephemeral(\n    self,\n    message: SlackMessageSurface,\n    user: SlackUser | str,\n    client: WebClient = DefaultWebClient,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"Convenience method to send an ephemeral message on this conversation.\n    `user`, `channel`, `blocks`, `text` and `metadata` should not be passed in kwargs.\n    \"\"\"\n    user_id = user.slack_id if isinstance(user, SlackUser) else user\n\n    client.chat_postEphemeral(\n        user=user_id,\n        channel=self.channel_id,\n        **(kwargs | message.get_slack_message_params()),\n    )\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.models.incident_channel","title":"incident_channel","text":"<p>Classes:</p> <ul> <li> <code>IncidentChannel</code>           \u2013            </li> </ul>"},{"location":"reference/slack/#firefighter.slack.models.incident_channel.IncidentChannel","title":"IncidentChannel","text":"<p>               Bases: <code>Conversation</code></p> <p>Methods:</p> <ul> <li> <code>add_bookmark</code>             \u2013              <p>Convenience method to add a bookmark on this conversation.</p> </li> <li> <code>invite_users</code>             \u2013              <p>Invite users to the conversation, if they have a Slack user linked and are active.</p> </li> <li> <code>send_message</code>             \u2013              <p>Convenience method to send a message on this conversation.</p> </li> <li> <code>send_message_and_save</code>             \u2013              <p>Convenience method to send a message on this conversation.</p> </li> <li> <code>send_message_ephemeral</code>             \u2013              <p>Convenience method to send an ephemeral message on this conversation.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>deep_link</code>               (<code>str</code>)           \u2013            <p>Deep link (<code>slack://</code>) to the conversation in the Slack client.</p> </li> <li> <code>link</code>               (<code>str</code>)           \u2013            <p>Regular HTTPS link to the conversation through Slack.com.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.models.incident_channel.IncidentChannel.deep_link","title":"deep_link  <code>property</code>","text":"<pre><code>deep_link: str\n</code></pre> <p>Deep link (<code>slack://</code>) to the conversation in the Slack client.</p>"},{"location":"reference/slack/#firefighter.slack.models.incident_channel.IncidentChannel.link","title":"link  <code>property</code>","text":"<pre><code>link: str\n</code></pre> <p>Regular HTTPS link to the conversation through Slack.com.</p>"},{"location":"reference/slack/#firefighter.slack.models.incident_channel.IncidentChannel.add_bookmark","title":"add_bookmark","text":"<pre><code>add_bookmark(\n    title: str,\n    _type: str = \"link\",\n    emoji: str | None = None,\n    entity_id: str | None = None,\n    link: str | None = None,\n    parent_id: str | None = None,\n    client: WebClient = DefaultWebClient,\n    **kwargs: Any\n) -&gt; None\n</code></pre> <p>Convenience method to add a bookmark on this conversation.</p> Source code in <code>src/firefighter/slack/models/conversation.py</code> <pre><code>@slack_client\ndef add_bookmark(\n    self,\n    title: str,\n    _type: str = \"link\",\n    emoji: str | None = None,\n    entity_id: str | None = None,\n    link: str | None = None,  # include when type is 'link'\n    parent_id: str | None = None,\n    client: WebClient = DefaultWebClient,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"Convenience method to add a bookmark on this conversation.\"\"\"\n    client.bookmarks_add(\n        channel_id=self.channel_id,\n        title=title,\n        link=link,\n        emoji=emoji,\n        type=_type,\n        entity_id=entity_id,\n        parent_id=parent_id,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.models.incident_channel.IncidentChannel.invite_users","title":"invite_users","text":"<pre><code>invite_users(users_mapped: list[User], client: WebClient = DefaultWebClient) -&gt; None\n</code></pre> <p>Invite users to the conversation, if they have a Slack user linked and are active.</p> <p>Try to invite all users as batch, but if some fail, continue individually.</p> Source code in <code>src/firefighter/slack/models/incident_channel.py</code> <pre><code>@slack_client\ndef invite_users(\n    self, users_mapped: list[User], client: WebClient = DefaultWebClient\n) -&gt; None:\n    \"\"\"Invite users to the conversation, if they have a Slack user linked and are active.\n\n    Try to invite all users as batch, but if some fail, continue individually.\n    \"\"\"\n    users_with_slack: list[User] = self._get_active_slack_users(users_mapped)\n    users_with_slack = list(set(users_with_slack))  # Remove duplicates\n\n    user_id_list: set[str] = self._get_slack_id_list(users_with_slack)\n    if not user_id_list:\n        logger.info(f\"No users to invite to the conversation {self}.\")\n        return\n\n    logger.info(f\"Inviting users with SlackIDs: {user_id_list}\")\n\n    invited_slack_user_ids = self._invite_users_to_conversation(\n        user_id_list, client\n    )\n    invited_users = {\n        u\n        for u in users_with_slack\n        if u.slack_user and u.slack_user.slack_id in invited_slack_user_ids\n    }\n\n    if invited_slack_user_ids != set(user_id_list):\n        logger.warning(\n            f\"Could not invite all users to the conversation {self}. Missing users: {user_id_list - invited_slack_user_ids}\"\n        )\n\n    self.incident.members.add(*invited_users)\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.models.incident_channel.IncidentChannel.send_message","title":"send_message","text":"<pre><code>send_message(\n    text: str | None = None, blocks: Sequence[dict[str, Any] | Block] | None = None, client: WebClient = DefaultWebClient, **kwargs: Any\n) -&gt; None\n</code></pre> <p>Convenience method to send a message on this conversation.</p> Source code in <code>src/firefighter/slack/models/conversation.py</code> <pre><code>@slack_client\ndef send_message(\n    self,\n    text: str | None = None,\n    blocks: Sequence[dict[str, Any] | Block] | None = None,\n    client: WebClient = DefaultWebClient,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"Convenience method to send a message on this conversation.\"\"\"\n    if kwargs.get(\"channel\"):\n        raise ValueError(\n            \"You can't set the channel when using send_message on a conversation!\"\n        )\n\n    client.chat_postMessage(\n        channel=self.channel_id, text=text, blocks=blocks, **kwargs\n    )\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.models.incident_channel.IncidentChannel.send_message_and_save","title":"send_message_and_save","text":"<pre><code>send_message_and_save(\n    message: SlackMessageSurface,\n    client: WebClient = DefaultWebClient,\n    strategy: SlackMessageStrategy | None = None,\n    strategy_args: dict[str, Any] | None = None,\n    *,\n    pin: bool = False\n) -&gt; SlackResponse\n</code></pre> <p>Convenience method to send a message on this conversation.</p> Source code in <code>src/firefighter/slack/models/conversation.py</code> <pre><code>@slack_client\ndef send_message_and_save(\n    self,\n    message: SlackMessageSurface,\n    client: WebClient = DefaultWebClient,\n    strategy: SlackMessageStrategy | None = None,\n    strategy_args: dict[str, Any] | None = None,\n    *,\n    pin: bool = False,\n) -&gt; SlackResponse:\n    \"\"\"Convenience method to send a message on this conversation.\"\"\"\n    if strategy is None:\n        strategy = message.strategy\n\n    kwargs = {}\n    # XXX Get save context?\n    if hasattr(message, \"incident\"):\n        kwargs[\"incident\"] = message.incident\n    if hasattr(message, \"incident_update\"):\n        kwargs[\"incident_update\"] = message.incident_update\n    kwargs[\"ff_type\"] = message.id\n    if strategy == SlackMessageStrategy.APPEND:\n        strategy_res = self._send_message_strategy_append(message, client, kwargs)\n    elif strategy == SlackMessageStrategy.UPDATE:\n        strategy_res = self._send_message_strategy_update(message, client, kwargs)\n    elif strategy == SlackMessageStrategy.REPLACE:\n        strategy_res = self._send_message_strategy_replace(\n            message, client, strategy_args, kwargs\n        )\n    if pin:\n        self._pin_message(\n            res=strategy_res,\n            client=client,\n        )\n    return strategy_res\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.models.incident_channel.IncidentChannel.send_message_ephemeral","title":"send_message_ephemeral","text":"<pre><code>send_message_ephemeral(message: SlackMessageSurface, user: SlackUser | str, client: WebClient = DefaultWebClient, **kwargs: Any) -&gt; None\n</code></pre> <p>Convenience method to send an ephemeral message on this conversation. <code>user</code>, <code>channel</code>, <code>blocks</code>, <code>text</code> and <code>metadata</code> should not be passed in kwargs.</p> Source code in <code>src/firefighter/slack/models/conversation.py</code> <pre><code>@slack_client\ndef send_message_ephemeral(\n    self,\n    message: SlackMessageSurface,\n    user: SlackUser | str,\n    client: WebClient = DefaultWebClient,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"Convenience method to send an ephemeral message on this conversation.\n    `user`, `channel`, `blocks`, `text` and `metadata` should not be passed in kwargs.\n    \"\"\"\n    user_id = user.slack_id if isinstance(user, SlackUser) else user\n\n    client.chat_postEphemeral(\n        user=user_id,\n        channel=self.channel_id,\n        **(kwargs | message.get_slack_message_params()),\n    )\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.models.message","title":"message","text":"<p>Classes:</p> <ul> <li> <code>Message</code>           \u2013            <p>Model a Slack API Conversation.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.models.message.Message","title":"Message","text":"<p>               Bases: <code>Model</code></p> <p>Model a Slack API Conversation. A Slack Conversation can be a public channel, a private channel, a direct message, or a multi-person direct message. Reference: https://api.slack.com/types/conversation.</p>"},{"location":"reference/slack/#firefighter.slack.models.sos","title":"sos","text":"<p>Classes:</p> <ul> <li> <code>Sos</code>           \u2013            <p>A SOS is a target with a name, a conversation, and optionally a user group.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.models.sos.Sos","title":"Sos","text":"<p>               Bases: <code>Model</code></p> <p>A SOS is a target with a name, a conversation, and optionally a user group.</p> <p>Incident responders can use it with <code>/incident sos</code> to ask for help to a specific group of people.</p> <p>Helpers will be notified in the selected conversation, and the user group will be mentioned (or <code>@here</code> if no user group is selected)</p> <p>Attributes:</p> <ul> <li> <code>usergroup_slack_fmt</code>               (<code>str</code>)           \u2013            <p>Returns either <code>@usergroup</code> or <code>@here</code> depending on usergroup presence.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.models.sos.Sos.usergroup_slack_fmt","title":"usergroup_slack_fmt  <code>property</code>","text":"<pre><code>usergroup_slack_fmt: str\n</code></pre> <p>Returns either <code>@usergroup</code> or <code>@here</code> depending on usergroup presence.</p>"},{"location":"reference/slack/#firefighter.slack.models.user","title":"user","text":"<p>Classes:</p> <ul> <li> <code>SlackUser</code>           \u2013            <p>Holds data about a Slack User, linked to an :model:<code>incidents.user</code>.</p> </li> <li> <code>SlackUserManager</code>           \u2013            </li> </ul>"},{"location":"reference/slack/#firefighter.slack.models.user.SlackUser","title":"SlackUser","text":"<p>               Bases: <code>Model</code></p> <p>Holds data about a Slack User, linked to an :model:<code>incidents.user</code>. slack_id field is not used as PK, as it is only guaranteed by Slack to be unique in pair with a team_id.</p> <p>Methods:</p> <ul> <li> <code>send_private_message</code>             \u2013              <p>Send a private message to the user.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>url</code>               (<code>str</code>)           \u2013            <p>Returns an HTTPS ULR to the Slack user's profile. For deep linking, use <code>link</code> instead.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.models.user.SlackUser.url","title":"url  <code>property</code>","text":"<pre><code>url: str\n</code></pre> <p>Returns an HTTPS ULR to the Slack user's profile. For deep linking, use <code>link</code> instead.</p>"},{"location":"reference/slack/#firefighter.slack.models.user.SlackUser.send_private_message","title":"send_private_message","text":"<pre><code>send_private_message(message: SlackMessageSurface, client: WebClient = DefaultWebClient, **kwargs: Any) -&gt; None\n</code></pre> <p>Send a private message to the user.</p> Source code in <code>src/firefighter/slack/models/user.py</code> <pre><code>@slack_client\ndef send_private_message(\n    self,\n    message: SlackMessageSurface,\n    client: WebClient = DefaultWebClient,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"Send a private message to the user.\"\"\"\n    client.chat_postMessage(\n        channel=self.slack_id,\n        text=message.get_text(),\n        metadata=message.get_metadata(),\n        blocks=message.get_blocks(),\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.models.user.SlackUserManager","title":"SlackUserManager","text":"<p>               Bases: <code>Manager['SlackUser']</code></p> <p>Methods:</p> <ul> <li> <code>get_user_by_slack_id</code>             \u2013              <p>Returns a User from DB if it exists, or fetch its info from Slack, save it to DB and returns it.</p> </li> <li> <code>unpack_user_info</code>             \u2013              <p>Returns a dict contains fields for the SlackUser, from a SlackResponse.</p> </li> <li> <code>upsert_by_email</code>             \u2013              <p>Returns a User from DB if it exists, or fetch its info from Slack, save it to DB and returns it.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.models.user.SlackUserManager.get_user_by_slack_id","title":"get_user_by_slack_id","text":"<pre><code>get_user_by_slack_id(slack_id: str, defaults: dict[str, str] | None = None, client: WebClient = DefaultWebClient) -&gt; User | None\n</code></pre> <p>Returns a User from DB if it exists, or fetch its info from Slack, save it to DB and returns it.</p> Source code in <code>src/firefighter/slack/models/user.py</code> <pre><code>@slack_client\ndef get_user_by_slack_id(\n    self,\n    slack_id: str,\n    defaults: dict[str, str] | None = None,\n    client: WebClient = DefaultWebClient,\n) -&gt; User | None:\n    \"\"\"Returns a User from DB if it exists, or fetch its info from Slack, save it to DB and returns it.\"\"\"\n    if not slack_id:\n        raise ValueError(\"slack_id cannot be empty\")\n\n    # Try fetching it from DB...\n    try:\n        slack_user = self.select_related(\"user\").get(slack_id=slack_id)\n        return slack_user.user  # noqa: TRY300\n    except SlackUser.DoesNotExist:\n        slack_user = None\n\n    if (\n        defaults\n        and \"email\" in defaults\n        and \"name\" in defaults\n        and defaults[\"name\"]\n        and defaults[\"email\"]\n    ):\n        user, _ = User.objects.get_or_create(\n            username=defaults[\"email\"].split(\"@\")[0],\n            email=defaults[\"email\"],\n            defaults={\"name\": defaults[\"name\"]},\n        )\n        slack_user, _created = SlackUser.objects.get_or_create(\n            slack_id=slack_id, user=user, defaults={\"id\": uuid.uuid4()}\n        )\n        return user\n\n    # If not in DB, fetch the user's info from firefighter.slack...\n    logger.debug(\"Fetch user from Slack\")\n    try:\n        user_info = client.users_info(user=slack_id)\n        if not user_info.get(\"ok\"):\n            logger.error(\"Could not fetch user from firefighter.slack.\")\n            return None\n    except slack_sdk.errors.SlackApiError:\n        logger.exception(f\"Could not find Slack user with ID: {slack_id}\")\n        return None\n\n    clean_user_info = self.unpack_user_info(user_info=user_info)\n\n    if \"email\" not in clean_user_info and \"display_name\" not in clean_user_info:\n        logger.error(\n            f\"Not enough info in Slack user.info response! user_info: {user_info}, parsed: {clean_user_info}\"\n        )\n        return None\n    user, _ = User.objects.get_or_create(\n        username=clean_user_info[\"email\"].split(\"@\")[0],\n        email=clean_user_info[\"email\"],\n        defaults={\"name\": clean_user_info[\"name\"]},\n    )\n    if user is None:\n        raise ValueError(\"Could not create user from Slack info\")\n\n    # TODO Handle case of user but with outdated email\n    logger.debug(\"Creating Slack user\")\n    logger.debug(user_info)\n    slack_user, _ = self.get_or_create_from_slack(user_info=user_info, user=user)\n    if not slack_user:\n        logger.error(\"Could not upsert slack_user in DB WTF\")\n        return None\n\n    return user\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.models.user.SlackUserManager.unpack_user_info","title":"unpack_user_info  <code>staticmethod</code>","text":"<pre><code>unpack_user_info(user_info: SlackResponse | dict[str, Any]) -&gt; dict[str, Any]\n</code></pre> <p>Returns a dict contains fields for the SlackUser, from a SlackResponse. email, name and id should always be returned.</p> Source code in <code>src/firefighter/slack/models/user.py</code> <pre><code>@staticmethod\ndef unpack_user_info(user_info: SlackResponse | dict[str, Any]) -&gt; dict[str, Any]:\n    \"\"\"Returns a dict contains fields for the SlackUser, from a SlackResponse.\n    email, name and id should always be returned.\n    \"\"\"\n    user_args = {}\n    if user_info.get(\"user\") and user_info[\"user\"] is not None:\n        user_info = cast(\"dict[str, Any]\", user_info[\"user\"])\n\n    user_args[\"slack_id\"] = get_in(user_info, \"id\")\n    user_args[\"first_name\"] = get_in(user_info, \"profile.first_name\")\n    user_args[\"last_name\"] = get_in(user_info, \"profile.last_name\")\n    user_args[\"deleted\"] = get_in(user_info, \"deleted\")\n\n    # TODO Fix mess with name vs username\n    username = get_in(user_info, \"name\")\n    if username:\n        user_args[\"username\"] = username\n\n    if not get_in(user_info, \"is_bot\") and get_in(user_info, \"id\") != \"USLACKBOT\":\n        user_args[\"email\"] = get_in(user_info, \"profile.email\")\n        user_args[\"name\"] = get_in(user_info, \"profile.real_name\")\n    else:\n        user_args[\"email\"] = get_in(user_info, \"name\")\n        user_args[\"name\"] = get_in(user_info, \"profile.real_name\")\n\n    if get_in(user_info, \"profile.image_512\"):\n        avatar = get_in(user_info, \"profile.image_512\")\n        if avatar and len(\n            avatar\n        ):  # &lt;= SlackUser._meta.get_field('image').max_length:\n            user_args[\"image\"] = avatar\n    elif get_in(user_info, \"profile.image_192\"):\n        avatar = get_in(user_info, \"profile.image_192\")\n        if avatar and len(\n            avatar\n        ):  # &lt;= SlackUser._meta.get_field('image').max_length:\n            user_args[\"image\"] = avatar\n\n    if user_args[\"first_name\"] is None:\n        user_args[\"first_name\"] = user_args[\"name\"].split(\" \")[0]\n    if user_args[\"last_name\"] is None:\n        user_args[\"last_name\"] = user_args[\"name\"].split(\" \")[-1]\n    return user_args\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.models.user.SlackUserManager.upsert_by_email","title":"upsert_by_email","text":"<pre><code>upsert_by_email(email: str, client: WebClient = DefaultWebClient) -&gt; User | None\n</code></pre> <p>Returns a User from DB if it exists, or fetch its info from Slack, save it to DB and returns it.</p> Source code in <code>src/firefighter/slack/models/user.py</code> <pre><code>@slack_client\ndef upsert_by_email(\n    self,\n    email: str,\n    client: WebClient = DefaultWebClient,\n) -&gt; User | None:\n    \"\"\"Returns a User from DB if it exists, or fetch its info from Slack, save it to DB and returns it.\"\"\"\n    logger.debug(f\"Looking for user by email: {email}\")\n    # Try fetching it from DB...\n    try:\n        user = User.objects.get(email=email)\n    except User.DoesNotExist:\n        logger.info(\"No user in DB. Fetching it from Slack...\")\n    else:\n        return user\n\n    # If not in DB, fetch the user's info from firefighter.slack...\n    try:\n        user_info = client.users_lookupByEmail(email=email)\n        if not user_info.get(\"ok\"):\n            logger.error(f\"Could not fetch user from Slack. User: email={email}\")\n            return None\n    except slack_sdk.errors.SlackApiError:\n        logger.exception(f\"Could not find Slack user with email: {email}\")\n        return None\n\n    logger.debug(user_info)\n\n    clean_user_info = self.unpack_user_info(user_info=user_info)\n\n    slack_user = SlackUser.objects.get_or_none(slack_id=clean_user_info[\"slack_id\"])\n\n    # If we have a SlackUser but not user with email =&gt; Update user email\n    if slack_user:\n        user = slack_user.user\n        user.email = email\n        user.save()\n        return user\n\n    # If we have no Slack User, let's go ahead and create a User and its associated SlackUser\n    user, _created = User.objects.get_or_create(\n        email=email,\n        username=email.split(\"@\", maxsplit=1)[0],\n        defaults={\n            \"name\": clean_user_info[\"name\"],\n        },\n    )\n\n    try:\n        slack_user, _created = self.get_or_create_from_slack(\n            user_info=user_info,\n            slack_id=clean_user_info[\"slack_id\"],\n            defaults={\"user_id\": user.id, \"id\": uuid.uuid4()},\n        )\n        if slack_user and slack_user.user.email == email:\n            return user\n        logger.warning(f\"1. Change of mail for user: {clean_user_info['slack_id']}\")\n\n    except IntegrityError:\n        logger.warning(\n            f\"2. Change of mail for user: {clean_user_info['slack_id']}\",\n            exc_info=True,\n        )\n        slack_user, _created = self.get_or_create_from_slack(\n            user_info=user_info,\n            user_id=user.id,\n            defaults={\"slack_id\": clean_user_info[\"slack_id\"], \"id\": uuid.uuid4()},\n        )\n        return user\n    return None\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.models.user_group","title":"user_group","text":"<p>Classes:</p> <ul> <li> <code>UserGroup</code>           \u2013            <p>Model a Slack API UserGroup.</p> </li> <li> <code>UserGroupManager</code>           \u2013            </li> </ul>"},{"location":"reference/slack/#firefighter.slack.models.user_group.UserGroup","title":"UserGroup","text":"<p>               Bases: <code>Model</code></p> <p>Model a Slack API UserGroup. Reference: https://api.slack.com/types/usergroup.</p> <p>Attributes:</p> <ul> <li> <code>link</code>               (<code>str</code>)           \u2013            <p>Regular HTTPS link to the conversation through Slack.com.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.models.user_group.UserGroup.link","title":"link  <code>property</code>","text":"<pre><code>link: str\n</code></pre> <p>Regular HTTPS link to the conversation through Slack.com.</p>"},{"location":"reference/slack/#firefighter.slack.models.user_group.UserGroupManager","title":"UserGroupManager","text":"<p>               Bases: <code>Manager['UserGroup']</code></p> <p>Methods:</p> <ul> <li> <code>fetch_all_usergroups_data</code>             \u2013              <p>Fetch all usergroups from firefighter.slack.</p> </li> <li> <code>fetch_usergroup</code>             \u2013              <p>Import a \"usergroup\" from Slack and return its UserGroup model.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.models.user_group.UserGroupManager.fetch_all_usergroups_data","title":"fetch_all_usergroups_data  <code>staticmethod</code>","text":"<pre><code>fetch_all_usergroups_data(client: WebClient = DefaultWebClient, *, include_users: bool = False) -&gt; list[dict[str, Any]]\n</code></pre> <p>Fetch all usergroups from firefighter.slack.</p> <p>Returns the list of usergroups</p> Source code in <code>src/firefighter/slack/models/user_group.py</code> <pre><code>@staticmethod\ndef fetch_all_usergroups_data(\n    client: WebClient = DefaultWebClient,\n    *,\n    include_users: bool = False,\n) -&gt; list[dict[str, Any]]:\n    \"\"\"Fetch all usergroups from firefighter.slack.\n\n    Returns the list of usergroups\n    \"\"\"\n    slack_response_usergroups = client.usergroups_list(include_users=include_users)\n\n    ug_list = get_in(slack_response_usergroups, \"usergroups\")\n    if not isinstance(ug_list, list):\n        err_msg = (\n            f\"Expected usergroups to be a list, but got {type(ug_list)}: {ug_list}\"\n        )\n\n        raise TypeError(err_msg)\n    return ug_list\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.models.user_group.UserGroupManager.fetch_usergroup","title":"fetch_usergroup  <code>staticmethod</code>","text":"<pre><code>fetch_usergroup(\n    group_slack_id: str | None = None, group_handle: str | None = None, client: WebClient = DefaultWebClient, **kwargs: Any\n) -&gt; UserGroup | None\n</code></pre> <p>Import a \"usergroup\" from Slack and return its UserGroup model. Either group_slack_id or group_handle must be provided.</p> <p>Parameters:</p> <ul> <li> <code>group_slack_id</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The Slack usergroup id of the usergroup to import. Usually starts with <code>S</code>. Defaults to None.</p> </li> <li> <code>group_handle</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Handle (@xxx) of the usergroup to import. Defaults to None.</p> </li> <li> <code>client</code>               (<code>WebClient</code>, default:                   <code>DefaultWebClient</code> )           \u2013            <p>Slack client. Defaults to DefaultWebClient.</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional keyword arguments to pass to created UserGroup model.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>UserGroup | None</code>           \u2013            <p>UserGroup | None: UserGroup model or None if not found</p> </li> </ul> Source code in <code>src/firefighter/slack/models/user_group.py</code> <pre><code>@staticmethod\n@slack_client\ndef fetch_usergroup(\n    group_slack_id: str | None = None,\n    group_handle: str | None = None,\n    client: WebClient = DefaultWebClient,\n    **kwargs: Any,\n) -&gt; UserGroup | None:\n    \"\"\"Import a \"usergroup\" from Slack and return its UserGroup model.\n    Either group_slack_id or group_handle must be provided.\n\n    Args:\n        group_slack_id (str | None, optional): The Slack usergroup id of the usergroup to import. Usually starts with `S`. Defaults to None.\n        group_handle (str | None, optional): Handle (@xxx) of the usergroup to import. Defaults to None.\n        client (WebClient, optional): Slack client. Defaults to DefaultWebClient.\n        **kwargs: Additional keyword arguments to pass to created UserGroup model.\n\n    Returns:\n        UserGroup | None: UserGroup model or None if not found\n    \"\"\"\n    slack_response_usergroups = UserGroupManager.fetch_all_usergroups_data(\n        client=client\n    )\n\n    usergroup = UserGroupManager.get_usergroup_data_from_list(\n        usergroups=slack_response_usergroups,\n        group_slack_id=group_slack_id,\n        group_handle=group_handle,\n    )\n    if not usergroup:\n        logger.warning(\n            f\"Could not find matching group! group_slack_id: {group_slack_id}; group_handle: {group_handle}\"\n        )\n        return None\n    logger.debug(usergroup)\n\n    return UserGroup(\n        **UserGroupManager.parse_slack_response(usergroup),\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.rules","title":"rules","text":"<p>Rules for publishing incidents in channels.</p> <p>This module may be removed in a future version.</p>"},{"location":"reference/slack/#firefighter.slack.signals","title":"signals","text":"<p>Modules:</p> <ul> <li> <code>create_incident_conversation</code>           \u2013            <p>This module contains the logic to open an incident channel and invite responders.</p> </li> <li> <code>get_users</code>           \u2013            </li> <li> <code>incident_updated</code>           \u2013            </li> </ul>"},{"location":"reference/slack/#firefighter.slack.signals.create_incident_conversation","title":"create_incident_conversation","text":"<p>This module contains the logic to open an incident channel and invite responders.</p> <p>XXX It might be divided into two signals/tasks, one for creating, one for inviting. XXX Sending the end signal should be done by this signal's caller, not by this signal receiver directly.</p> <p>Functions:</p> <ul> <li> <code>create_incident_slack_conversation</code>             \u2013              <p>Main process to open an incident channel, set it up and invite responders. It MUST be called when an incident is created.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.signals.create_incident_conversation.create_incident_slack_conversation","title":"create_incident_slack_conversation","text":"<pre><code>create_incident_slack_conversation(incident: Incident, *_args: Any, **_kwargs: Any) -&gt; int | None\n</code></pre> <p>Main process to open an incident channel, set it up and invite responders. It MUST be called when an incident is created.</p> <p>Parameters:</p> <ul> <li> <code>incident</code>               (<code>Incident</code>)           \u2013            <p>The incident to open. It should be saved before calling this function, and have its first incident update created.</p> </li> </ul> Kwargs <p>jira_extra_fields (dict): Optional dictionary of customer/seller fields for Jira ticket</p> Source code in <code>src/firefighter/slack/signals/create_incident_conversation.py</code> <pre><code>@receiver(signal=create_incident_conversation)\ndef create_incident_slack_conversation(\n    incident: Incident,\n    *_args: Any,\n    **_kwargs: Any,\n) -&gt; int | None:\n    \"\"\"Main process to open an incident channel, set it up and invite responders. It MUST be called when an incident is created.\n\n    Args:\n        incident (Incident): The incident to open. It should be saved before calling this function, and have its first incident update created.\n\n    Kwargs:\n        jira_extra_fields (dict): Optional dictionary of customer/seller fields for Jira ticket\n\n    \"\"\"\n    # Extract jira_extra_fields from kwargs\n    jira_extra_fields = _kwargs.get(\"jira_extra_fields\", {})\n    channel: IncidentChannel | None = IncidentChannel.objects.create_incident_channel(\n        incident=incident\n    )\n    if not channel:\n        logger.warning(\"Giving up on Slack channel creation for %s.\", incident.id)\n        return None\n\n    new_channel_id: str = channel.channel_id\n    if not new_channel_id:\n        logger.warning(\"Missing channel id for %s.\", incident.id)\n        return None\n    if not (\n        incident.created_by\n        and hasattr(incident.created_by, \"slack_user\")\n        and incident.created_by.slack_user\n    ):\n        if not hasattr(incident.created_by, \"slack_user\"):\n            SlackUser.objects.add_slack_id_to_user(incident.created_by)\n        logger.debug(incident.created_by)\n\n    # Join the channel. We are already in the channel if it is a private channel.\n    if not incident.private:\n        channel.conversations_join()\n\n    channel.set_incident_channel_topic()\n\n    # Add the person that opened the incident in the channel\n    if (\n        incident.created_by\n        and hasattr(incident.created_by, \"slack_user\")\n        and incident.created_by.slack_user\n        and incident.created_by.slack_user.slack_id\n    ):\n        try:\n            channel.invite_users([incident.created_by])\n        except SlackApiError:\n            logger.warning(\n                f\"Could not import Slack opener user! Slack ID: {incident.created_by.slack_user.slack_id}, User {incident.created_by}, Channel ID {new_channel_id}\",\n                exc_info=True,\n            )\n    else:\n        logger.warning(\"Could not find user Slack ID for opener_user!\")\n\n    # Send message in the created channel\n    channel.send_message_and_save(\n        SlackMessageIncidentDeclaredAnnouncement(incident), pin=True\n    )\n\n    # Post in general channel #tech-incidents if needed\n    if should_publish_in_general_channel(incident, incident_update=None):\n        announcement_general = SlackMessageIncidentDeclaredAnnouncementGeneral(incident)\n\n        tech_incidents_conversation = Conversation.objects.get_or_none(\n            tag=\"tech_incidents\"\n        )\n        if tech_incidents_conversation:\n            tech_incidents_conversation.send_message_and_save(announcement_general)\n        else:\n            logger.warning(\n                \"Could not find tech_incidents conversation! Is there a channel with tag tech_incidents?\"\n            )\n\n    # Create a response team\n    users_list: list[User] = incident.build_invite_list()\n\n    # Invite all users\n    incident.conversation.invite_users(users_list)\n\n    # Post in #it-deploy if needed\n    if should_publish_in_it_deploy_channel(incident):\n        announcement_it_deploy = SlackMessageDeployWarning(incident)\n        announcement_it_deploy.id = f\"{announcement_it_deploy.id}_{incident.id}\"\n\n        it_deploy_conversation = Conversation.objects.get_or_none(tag=\"it_deploy\")\n        if it_deploy_conversation:\n            it_deploy_conversation.send_message_and_save(announcement_it_deploy)\n        else:\n            logger.warning(\n                \"Could not find it_deploy conversation! Is there a channel with tag it_deploy?\"\n            )\n\n    incident_channel_done.send_robust(\n        sender=__name__,\n        incident=incident,\n        channel=channel,\n        jira_extra_fields=jira_extra_fields,\n    )\n    return None\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.signals.get_users","title":"get_users","text":"<p>Functions:</p> <ul> <li> <code>get_invites_from_slack</code>             \u2013              <p>New version using cached users instead of querying Slack API.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.signals.get_users.get_invites_from_slack","title":"get_invites_from_slack","text":"<pre><code>get_invites_from_slack(incident: Incident, **_kwargs: Any) -&gt; Iterable[User]\n</code></pre> <p>New version using cached users instead of querying Slack API.</p> Source code in <code>src/firefighter/slack/signals/get_users.py</code> <pre><code>@receiver(signal=signals.get_invites)\ndef get_invites_from_slack(incident: Incident, **_kwargs: Any) -&gt; Iterable[User]:\n    \"\"\"New version using cached users instead of querying Slack API.\"\"\"\n    # Prepare sub-queries\n    slack_usergroups: QuerySet[UserGroup] = incident.incident_category.usergroups.all()\n    slack_conversations: QuerySet[Conversation] = incident.incident_category.conversations.all()\n\n    # We make sure to exclude the bot user, and avoid duplicates with distinct()\n    # Also make sure that all users have related SlackUser and a slack_id\n    queryset = (\n        User.objects.filter(slack_user__isnull=False)\n        .exclude(slack_user__slack_id=SlackApp().details[\"user_id\"])\n        .exclude(slack_user__slack_id=\"\")\n        .exclude(slack_user__slack_id__isnull=True)\n        .filter(\n            Q(conversation__in=slack_conversations) | Q(usergroup__in=slack_usergroups)\n        )\n        .distinct()\n    )\n    return set(queryset)\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.signals.incident_updated","title":"incident_updated","text":"<p>Functions:</p> <ul> <li> <code>publish_status_update</code>             \u2013              <p>Publishes an update to the incident status.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.signals.incident_updated.publish_status_update","title":"publish_status_update","text":"<pre><code>publish_status_update(\n    incident: Incident, incident_update: IncidentUpdate, *, status_changed: bool = False, old_priority: Priority | None = None\n) -&gt; None\n</code></pre> <p>Publishes an update to the incident status.</p> Source code in <code>src/firefighter/slack/signals/incident_updated.py</code> <pre><code>def publish_status_update(\n    incident: Incident,\n    incident_update: IncidentUpdate,\n    *,\n    status_changed: bool = False,\n    old_priority: Priority | None = None,\n) -&gt; None:\n    \"\"\"Publishes an update to the incident status.\"\"\"\n    message = SlackMessageIncidentStatusUpdated(\n        incident=incident,\n        incident_update=incident_update,\n        in_channel=True,\n    )\n    incident.conversation.send_message_and_save(message)\n\n    # Post to #tech-incidents\n    if should_publish_in_general_channel(\n        incident=incident, incident_update=incident_update, old_priority=old_priority\n    ):\n        publish_update_in_general_channel(\n            incident=incident,\n            incident_update=incident_update,\n            status_changed=status_changed,\n            old_priority=old_priority,\n        )\n\n    if (\n        incident.ask_for_milestones\n        and status_changed\n        and incident.status &gt;= IncidentStatus.MITIGATED\n        and not incident.closure_reason  # Don't show key events for direct closures\n    ):\n        from firefighter.slack.views.modals.key_event_message import (  # noqa: PLC0415\n            SlackMessageKeyEvents,\n        )\n\n        incident.conversation.send_message_and_save(\n            SlackMessageKeyEvents(incident=incident)\n        )\n\n    if should_publish_in_it_deploy_channel(incident=incident):\n        announcement_it_deploy = SlackMessageDeployWarning(incident)\n        announcement_it_deploy.id = f\"{announcement_it_deploy.id}_{incident.id}\"\n\n        it_deploy_conversation = Conversation.objects.get_or_none(tag=\"it_deploy\")\n        if it_deploy_conversation:\n            it_deploy_conversation.send_message_and_save(announcement_it_deploy)\n        else:\n            logger.warning(\n                \"Could not find it_deploy conversation! Is there a channel with tag it_deploy?\"\n            )\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.slack_app","title":"slack_app","text":"<p>Classes:</p> <ul> <li> <code>SlackApp</code>           \u2013            <p>Subclass of the Slack App, as a singleton.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>slack_client</code>             \u2013              <p>Adds a Slack client in <code>client</code> kwargs, if none is provided.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.slack_app.SlackApp","title":"SlackApp","text":"<p>               Bases: <code>App</code></p> <p>Subclass of the Slack App, as a singleton.</p>"},{"location":"reference/slack/#firefighter.slack.slack_app.slack_client","title":"slack_client","text":"<pre><code>slack_client(function: Callable[P, R]) -&gt; Callable[P, R]\n</code></pre> <p>Adds a Slack client in <code>client</code> kwargs, if none is provided.</p> <p>Can be used as a decorator with <code>@slack_client</code> or as a function with <code>slack_client(function)</code>.</p> Source code in <code>src/firefighter/slack/slack_app.py</code> <pre><code>def slack_client(function: Callable[P, R]) -&gt; Callable[P, R]:\n    \"\"\"Adds a Slack client in `client` kwargs, if none is provided.\n\n    Can be used as a decorator with `@slack_client` or as a function with `slack_client(function)`.\n    \"\"\"\n\n    def wrap_function(*args: P.args, **kwargs: P.kwargs) -&gt; R:\n        if \"client\" not in kwargs:\n            kwargs[\"client\"] = SlackApp().client\n        return function(*args, **kwargs)\n\n    return wrap_function\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.slack_incident_context","title":"slack_incident_context","text":"<p>Functions:</p> <ul> <li> <code>get_incident_from_app_home_element</code>             \u2013              <p>Get an incident from an action, found in app home accessory.</p> </li> <li> <code>get_incident_from_body_channel_id_in_command</code>             \u2013              <p>Get an incident from a channel_id, found in commands.</p> </li> <li> <code>get_incident_from_body_channel_id_in_message_shortcut</code>             \u2013              <p>Get an incident from a channel.id, found in message shortcut.</p> </li> <li> <code>get_incident_from_button_value</code>             \u2013              <p>Try to get the incident ID from button value.</p> </li> <li> <code>get_incident_from_context</code>             \u2013              <p>Returns an Incident or None, from a Slack body.</p> </li> <li> <code>get_incident_from_view_action</code>             \u2013              <p>Get incident id from select incident in modal.</p> </li> <li> <code>get_incident_from_view_submission_metadata</code>             \u2013              <p>Get incident id from view modal metadata.</p> </li> <li> <code>get_incident_from_view_submission_selected</code>             \u2013              <p>Get incident id from select incident in modal.</p> </li> <li> <code>get_user_from_context</code>             \u2013              <p>Returns a User or None, from a Slack body.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.slack_incident_context.get_incident_from_app_home_element","title":"get_incident_from_app_home_element","text":"<pre><code>get_incident_from_app_home_element(body: dict[str, Any]) -&gt; Incident | None\n</code></pre> <p>Get an incident from an action, found in app home accessory.</p> Source code in <code>src/firefighter/slack/slack_incident_context.py</code> <pre><code>@incident_resolve_strategy\ndef get_incident_from_app_home_element(body: dict[str, Any]) -&gt; Incident | None:\n    \"\"\"Get an incident from an action, found in app home accessory.\"\"\"\n    action = get_first_in(\n        body.get(\"actions\", []), \"selected_option.value\", (\"update_status\", \"open_link\")\n    )\n    if action is None:\n        return None\n    incident_id = action.get(\"block_id\").strip(  # noqa: B005\n        \"app_home_incident_element_\"\n    )\n\n    try:\n        incident_id = int(incident_id)\n    except ValueError:\n        logger.warning(\n            f\"Select incident ('{incident_id}') was not a valid incident ID!\"\n        )\n        return None\n    return Incident.objects.get(id=incident_id)\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.slack_incident_context.get_incident_from_body_channel_id_in_command","title":"get_incident_from_body_channel_id_in_command","text":"<pre><code>get_incident_from_body_channel_id_in_command(body: dict[str, Any]) -&gt; Incident | None\n</code></pre> <p>Get an incident from a channel_id, found in commands.</p> Source code in <code>src/firefighter/slack/slack_incident_context.py</code> <pre><code>@incident_resolve_strategy\ndef get_incident_from_body_channel_id_in_command(\n    body: dict[str, Any],\n) -&gt; Incident | None:\n    \"\"\"Get an incident from a channel_id, found in commands.\"\"\"\n    channel_id = body.get(\"channel_id\")\n    if channel_id:\n        channel = IncidentChannel.objects.filter(channel_id=channel_id).first()\n        if channel and channel.incident:\n            return channel.incident\n    return None\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.slack_incident_context.get_incident_from_body_channel_id_in_message_shortcut","title":"get_incident_from_body_channel_id_in_message_shortcut","text":"<pre><code>get_incident_from_body_channel_id_in_message_shortcut(body: dict[str, Any]) -&gt; Incident | None\n</code></pre> <p>Get an incident from a channel.id, found in message shortcut.</p> Source code in <code>src/firefighter/slack/slack_incident_context.py</code> <pre><code>@incident_resolve_strategy\ndef get_incident_from_body_channel_id_in_message_shortcut(\n    body: dict[str, Any],\n) -&gt; Incident | None:\n    \"\"\"Get an incident from a channel.id, found in message shortcut.\"\"\"\n    channel_id = get_in(body, \"channel.id\")\n    if channel_id:\n        channel = IncidentChannel.objects.filter(channel_id=channel_id).first()\n        if channel and channel.incident:\n            return channel.incident\n    return None\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.slack_incident_context.get_incident_from_button_value","title":"get_incident_from_button_value","text":"<pre><code>get_incident_from_button_value(body: dict[str, Any]) -&gt; Incident | Literal[False] | None\n</code></pre> <p>Try to get the incident ID from button value.</p> Source code in <code>src/firefighter/slack/slack_incident_context.py</code> <pre><code>@incident_resolve_strategy\ndef get_incident_from_button_value(\n    body: dict[str, Any],\n) -&gt; Incident | Literal[False] | None:\n    \"\"\"Try to get the incident ID from button value.\"\"\"\n    actions = body.get(\"actions\")\n    if not isinstance(actions, list):\n        return False\n    # XXX(dugab): this should not use an allow-list, but loop over values or use a specific prefix/suffix/pattern\n    action = get_first_in(\n        actions,\n        key=\"action_id\",\n        matches={\n            \"open_modal_incident_update_roles\",\n            \"open_modal_incident_update_status\",\n            \"open_modal_downgrade_workflow\",\n        },\n    )\n\n    if not action:\n        return False\n    value = action.get(\"value\")\n    if not value:\n        return False\n    try:\n        incident_id = int(value)\n    except (ValueError, TypeError):\n        logger.warning(\"Response.actions.action_id.value was not a valid incident ID!\")\n        return None\n    return Incident.objects.get(id=incident_id)\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.slack_incident_context.get_incident_from_context","title":"get_incident_from_context","text":"<pre><code>get_incident_from_context(body: dict[str, Any]) -&gt; Incident | None\n</code></pre> <p>Returns an Incident or None, from a Slack body.</p> Source code in <code>src/firefighter/slack/slack_incident_context.py</code> <pre><code>def get_incident_from_context(body: dict[str, Any]) -&gt; Incident | None:\n    \"\"\"Returns an Incident or None, from a Slack body.\"\"\"\n    for strat in INCIDENT_RESOLVING_STRATEGIES:\n        incident = strat(body)\n        if incident:\n            logger.debug(f\"Found incident {incident.id} using {strat.__name__}\")\n            return incident\n\n    logger.info(f\"Incident could not be inferred from Slack body context: {body}\")\n    return None\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.slack_incident_context.get_incident_from_view_action","title":"get_incident_from_view_action","text":"<pre><code>get_incident_from_view_action(body: dict[str, Any]) -&gt; Literal[False] | Incident | None\n</code></pre> <p>Get incident id from select incident in modal.</p> Source code in <code>src/firefighter/slack/slack_incident_context.py</code> <pre><code>@incident_resolve_strategy\ndef get_incident_from_view_action(\n    body: dict[str, Any],\n) -&gt; Literal[False] | Incident | None:\n    \"\"\"Get incident id from select incident in modal.\"\"\"\n    view_type = body.get(\"type\")\n\n    if view_type not in {\"view_submission\", \"block_actions\"}:\n        return False\n    actions = body.get(\"actions\")\n    if not isinstance(actions, list):\n        return False\n    action = get_first_in(\n        actions, key=\"action_id\", matches={\"incident_update_select_incident\"}\n    )\n\n    if not action:\n        return False\n\n    select_incident_value = get_in(action, \"selected_option.value\")\n    logger.debug(action)\n    logger.debug(select_incident_value)\n\n    if not select_incident_value:\n        return False\n    try:\n        incident_id = int(select_incident_value)\n    except ValueError:\n        logger.warning(\n            f\"Select incident ('{select_incident_value}') was not a valid incident ID!\"\n        )\n        return None\n    return Incident.objects.get(id=incident_id)\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.slack_incident_context.get_incident_from_view_submission_metadata","title":"get_incident_from_view_submission_metadata","text":"<pre><code>get_incident_from_view_submission_metadata(body: dict[str, Any]) -&gt; Incident | Literal[False] | None\n</code></pre> <p>Get incident id from view modal metadata.</p> Source code in <code>src/firefighter/slack/slack_incident_context.py</code> <pre><code>@incident_resolve_strategy\ndef get_incident_from_view_submission_metadata(\n    body: dict[str, Any],\n) -&gt; Incident | Literal[False] | None:\n    \"\"\"Get incident id from view modal metadata.\"\"\"\n    view_type = body.get(\"type\")\n    private_metadata = get_in(body, [\"view\", \"private_metadata\"])\n\n    if not private_metadata:\n        return False\n\n    if view_type not in {\"view_submission\", \"block_actions\"}:\n        return False\n\n    try:\n        incident_id = int(private_metadata)\n    except ValueError:\n        logger.warning(\n            f\"Response.view.private_metadata ('{private_metadata}') was not a valid incident ID!\"\n        )\n        return None\n    return Incident.objects.get(id=incident_id)\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.slack_incident_context.get_incident_from_view_submission_selected","title":"get_incident_from_view_submission_selected","text":"<pre><code>get_incident_from_view_submission_selected(body: dict[str, Any]) -&gt; Incident | Literal[False] | None\n</code></pre> <p>Get incident id from select incident in modal.</p> Source code in <code>src/firefighter/slack/slack_incident_context.py</code> <pre><code>@incident_resolve_strategy\ndef get_incident_from_view_submission_selected(\n    body: dict[str, Any],\n) -&gt; Incident | Literal[False] | None:\n    \"\"\"Get incident id from select incident in modal.\"\"\"\n    view_type = body.get(\"type\")\n\n    if view_type not in {\"view_submission\", \"block_actions\"}:\n        return False\n\n    select_incident_value = get_in(\n        body,\n        \"view.state.values.incident_update_select_incident.incident_update_select_incident.selected_option.value\",\n    )\n    if not select_incident_value:\n        # Check the default value (appears selected to the user)\n        select_incident_value = get_in(\n            body,\n            \"view.state.values.incident_update_select_incident.incident_update_select_incident.initial_option.value\",\n        )\n    if not select_incident_value:\n        return False\n    try:\n        incident_id = int(select_incident_value)\n    except ValueError:\n        logger.warning(\n            f\"Select incident ('{select_incident_value}') was not a valid incident ID!\"\n        )\n        return None\n    return Incident.objects.get(id=incident_id)\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.slack_incident_context.get_user_from_context","title":"get_user_from_context","text":"<pre><code>get_user_from_context(body: dict[str, Any]) -&gt; User | None\n</code></pre> <p>Returns a User or None, from a Slack body.</p> Source code in <code>src/firefighter/slack/slack_incident_context.py</code> <pre><code>def get_user_from_context(body: dict[str, Any]) -&gt; User | None:\n    \"\"\"Returns a User or None, from a Slack body.\"\"\"\n    sender_id = get_in(body, \"user.id\", body.get(\"user_id\"))\n\n    return SlackUser.objects.get_user_by_slack_id(slack_id=sender_id)\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.slack_templating","title":"slack_templating","text":"<p>Functions:</p> <ul> <li> <code>date_time</code>             \u2013              <p>Common format for datetime.</p> </li> <li> <code>md_quote_filter</code>             \u2013              <p>Add &gt; on newlines for MD quotes.</p> </li> <li> <code>shorten_long</code>             \u2013              <p>Shorten text while keeping newlines and most formatting.</p> </li> <li> <code>user_slack_handle_or_name</code>             \u2013              <p>Returns the Slack handle of the user in Slack MD format (<code>&lt;@SLACK_ID&gt;</code>) or the user full name.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.slack_templating.date_time","title":"date_time  <code>cached</code>","text":"<pre><code>date_time(date: datetime | None) -&gt; str\n</code></pre> <p>Common format for datetime.</p> <p>Parameters:</p> <ul> <li> <code>date</code>               (<code>datetime | None</code>)           \u2013            <p>your datetime</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code> (              <code>str</code> )          \u2013            <p>datetime in format <code>YYYY-MM-DD HH:MM</code></p> </li> </ul> Source code in <code>src/firefighter/slack/slack_templating.py</code> <pre><code>@cache\ndef date_time(date: datetime | None) -&gt; str:\n    \"\"\"Common format for datetime.\n\n    Args:\n        date (datetime | None): your datetime\n\n    Returns:\n        str: datetime in format `YYYY-MM-DD HH:MM`\n    \"\"\"\n    return localtime(date).strftime(\"%Y-%m-%d %H:%M\")\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.slack_templating.md_quote_filter","title":"md_quote_filter","text":"<pre><code>md_quote_filter(val: str | T) -&gt; str | T\n</code></pre> <p>Add &gt; on newlines for MD quotes.</p> Source code in <code>src/firefighter/slack/slack_templating.py</code> <pre><code>def md_quote_filter(val: str | T) -&gt; str | T:\n    \"\"\"Add &gt; on newlines for MD quotes.\"\"\"\n    if isinstance(val, str):\n        return val.replace(\"\\n\", \"\\n&gt; \")\n    return val\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.slack_templating.shorten_long","title":"shorten_long","text":"<pre><code>shorten_long(text: str, width: int, **kwargs: Any) -&gt; str\n</code></pre> <p>Shorten text while keeping newlines and most formatting.</p> Source code in <code>src/firefighter/slack/slack_templating.py</code> <pre><code>def shorten_long(text: str, width: int, **kwargs: Any) -&gt; str:\n    \"\"\"Shorten text while keeping newlines and most formatting.\"\"\"\n    kwargs.setdefault(\"placeholder\", \" [...]\")\n    kwargs.setdefault(\"tabsize\", 4)\n    kwargs.setdefault(\"max_lines\", 1)\n    kwargs.setdefault(\"drop_whitespace\", False)\n    kwargs.setdefault(\"replace_whitespace\", False)\n    kwargs.setdefault(\"break_long_words\", True)\n    w = TextWrapper(\n        width=width,\n        **kwargs,\n    )\n    return w.fill(text)\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.slack_templating.user_slack_handle_or_name","title":"user_slack_handle_or_name","text":"<pre><code>user_slack_handle_or_name(user: User | None) -&gt; str\n</code></pre> <p>Returns the Slack handle of the user in Slack MD format (<code>&lt;@SLACK_ID&gt;</code>) or the user full name.</p> Source code in <code>src/firefighter/slack/slack_templating.py</code> <pre><code>def user_slack_handle_or_name(user: User | None) -&gt; str:\n    \"\"\"Returns the Slack handle of the user in Slack MD format (`&lt;@SLACK_ID&gt;`) or the user full name.\"\"\"\n    if user is None:\n        return \"\u2205\"\n\n    if hasattr(user, \"slack_user\") and user.slack_user:\n        return f\"&lt;@{user.slack_user.slack_id}&gt;\"\n    return user.full_name\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.tasks","title":"tasks","text":"<p>Modules:</p> <ul> <li> <code>fetch_conversations_members</code>           \u2013            </li> <li> <code>reminder_postmortem</code>           \u2013            </li> <li> <code>send_message</code>           \u2013            </li> <li> <code>send_reminders</code>           \u2013            </li> <li> <code>sync_users</code>           \u2013            </li> <li> <code>update_usergroups_members</code>           \u2013            </li> <li> <code>update_users</code>           \u2013            </li> </ul>"},{"location":"reference/slack/#firefighter.slack.tasks.fetch_conversations_members","title":"fetch_conversations_members","text":"<p>Functions:</p> <ul> <li> <code>fetch_conversations_members_from_slack</code>             \u2013              <p>Update the members and metadata of Slack Conversations in DB, from Slack API.</p> </li> <li> <code>fetch_conversations_members_from_slack_celery</code>             \u2013              <p>Wrapper around the actual task, as Celery doesn't support passing Django models.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.tasks.fetch_conversations_members.fetch_conversations_members_from_slack","title":"fetch_conversations_members_from_slack","text":"<pre><code>fetch_conversations_members_from_slack(\n    client: WebClient = DefaultWebClient, queryset: QuerySet[Conversation] | None = None\n) -&gt; list[Conversation]\n</code></pre> <p>Update the members and metadata of Slack Conversations in DB, from Slack API.</p> <p>Only fetches conversations that are not IncidentChannels.</p> <p>Parameters:</p> <ul> <li> <code>client</code>               (<code>WebClient</code>, default:                   <code>DefaultWebClient</code> )           \u2013            <p>Slack SDK client. Defaults to DefaultWebClient.</p> </li> <li> <code>queryset</code>               (<code>Optional[QuerySet[Conversation]]</code>, default:                   <code>None</code> )           \u2013            <p>Conversation to update. Defaults to None. If None, all applicable</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[Conversation]</code>           \u2013            <p>list[Conversation]: List of conversations that could not be updated.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>TypeError</code>             \u2013            <p>If the members list is not a list.</p> </li> </ul> Source code in <code>src/firefighter/slack/tasks/fetch_conversations_members.py</code> <pre><code>@slack_client\ndef fetch_conversations_members_from_slack(\n    client: WebClient = DefaultWebClient,\n    queryset: QuerySet[Conversation] | None = None,\n) -&gt; list[Conversation]:\n    \"\"\"Update the members and metadata of Slack Conversations in DB, from Slack API.\n\n    Only fetches conversations that are not IncidentChannels.\n\n    Args:\n        client (WebClient, optional): Slack SDK client. Defaults to DefaultWebClient.\n        queryset (Optional[QuerySet[Conversation]], optional): Conversation to update. Defaults to None. If None, all applicable\n\n    Returns:\n        list[Conversation]: List of conversations that could not be updated.\n\n    Raises:\n        TypeError: If the members list is not a list.\n    \"\"\"\n    conversations: QuerySet[Conversation] = (\n        queryset\n        if queryset and queryset.model != Conversation\n        else Conversation.objects.not_incident_channel(queryset)\n    )\n\n    fails: list[Conversation] = []\n    fails += list(conversations.filter(channel_id__isnull=True))\n\n    conversations_members: dict[str, list[str]] = {}\n    conversations_info: dict[str, dict[str, Any]] = {}\n\n    for conversation in conversations:\n        # Fetch members IDs\n        try:\n            conversation_members: list[str] = client.conversations_members(\n                channel=conversation.channel_id\n            ).get(\"members\", [])\n        except SlackApiError:\n            logger.warning(f\"Could not fetch members for {conversation.channel_id}\")\n            continue\n        if not isinstance(conversation_members, list):\n            err_msg = f\"conversation_members is not a list: {conversation_members}\"  # type: ignore[unreachable]\n            raise TypeError(err_msg)\n\n        # Fetch conversation info\n        conversation_info = client.conversations_info(channel=conversation.channel_id)\n\n        # Save members\n        members_slack_ids = conversation_members\n        conversations_members[conversation.channel_id] = members_slack_ids\n\n        # Save info (channel_id, channel_name, channel_type, status)\n        conversation_data_kwargs_tup = Conversation.objects.parse_slack_response(\n            conversation_info\n        )\n        conversation_data_kwargs = {\n            \"name\": conversation_data_kwargs_tup[1],\n            \"_type\": conversation_data_kwargs_tup[2],\n            \"_status\": conversation_data_kwargs_tup[3],\n        }\n\n        conversations_info[conversation.channel_id] = conversation_data_kwargs\n\n    # Get all usergroups members\n    all_members_usergroups: set[str] = set(\n        functools.reduce(operator.iadd, conversations_members.values(), [])\n    )\n\n    all_members_mapping: dict[str, User] = {}\n\n    # Get all users from their Slack IDs\n    for member_slack_id in all_members_usergroups:\n        user = SlackUser.objects.get_user_by_slack_id(member_slack_id)\n        if user is not None:\n            all_members_mapping[member_slack_id] = user\n            logger.info(user)\n            continue\n\n        logger.error(f\"Could not retrieve user for Slack ID {member_slack_id}\")\n\n    # Usergroups users mapping\n    usergroups_members_users: dict[str, list[User]] = {\n        k: [all_members_mapping[y] for y in v] for k, v in conversations_members.items()\n    }\n    logger.debug(usergroups_members_users)\n\n    # Save all usergroups members\n    with transaction.atomic():\n        for conversation in conversations:\n            if not isinstance(conversation.channel_id, str):\n                err_msg = f\"Conversation {conversation.channel_id} has no channel_id\"  # type: ignore[unreachable]\n                raise TypeError(err_msg)\n            if conversation.channel_id in usergroups_members_users:\n                conversation.members.set(\n                    usergroups_members_users[conversation.channel_id]\n                )\n                conversation.__dict__.update(\n                    conversations_info[conversation.channel_id]\n                )\n                conversation.save()\n                continue\n            fails.append(conversation)\n            logger.warning(\n                f\"Could not save members and info for non existent conversation {conversation.channel_id}\"\n            )\n    return fails\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.tasks.fetch_conversations_members.fetch_conversations_members_from_slack_celery","title":"fetch_conversations_members_from_slack_celery","text":"<pre><code>fetch_conversations_members_from_slack_celery(\n    *_args: Any, queryset: QuerySet[Conversation] | None = None, **_options: Any\n) -&gt; dict[str, list[str]]\n</code></pre> <p>Wrapper around the actual task, as Celery doesn't support passing Django models.</p> Source code in <code>src/firefighter/slack/tasks/fetch_conversations_members.py</code> <pre><code>@shared_task(\n    name=\"slack.fetch_conversations_members_from_slack\",\n    retry_kwargs={\"max_retries\": 2},\n    default_retry_delay=90,\n)\ndef fetch_conversations_members_from_slack_celery(\n    *_args: Any,\n    queryset: QuerySet[Conversation] | None = None,\n    **_options: Any,\n) -&gt; dict[str, list[str]]:\n    \"\"\"Wrapper around the actual task, as Celery doesn't support passing Django models.\"\"\"\n    failed_conversations = fetch_conversations_members_from_slack(\n        queryset=queryset,\n    )\n    return {\"failed_conversations\": [x.channel_id for x in failed_conversations]}\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.tasks.reminder_postmortem","title":"reminder_postmortem","text":"<p>Functions:</p> <ul> <li> <code>publish_postmortem_reminder</code>             \u2013              <p>XXX Should return a message object, not send it.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.tasks.reminder_postmortem.publish_postmortem_reminder","title":"publish_postmortem_reminder","text":"<pre><code>publish_postmortem_reminder(incident: Incident, client: WebClient = DefaultWebClient) -&gt; None\n</code></pre> <p>XXX Should return a message object, not send it.</p> Source code in <code>src/firefighter/slack/tasks/reminder_postmortem.py</code> <pre><code>@slack_client\ndef publish_postmortem_reminder(\n    incident: Incident,\n    client: WebClient = DefaultWebClient,\n) -&gt; None:\n    \"\"\"XXX Should return a message object, not send it.\"\"\"\n    if not hasattr(incident, \"postmortem_for\"):\n        logger.warning(\n            \"Trying to send PostMortem reminder for incident #%s with no PostMortem!\",\n            incident.id,\n        )\n        return\n\n    if not (hasattr(incident, \"conversation\") and incident.conversation.channel_id):\n        logger.warning(\n            \"No conversation to post PM reminder for incident {incident.id}.\"\n        )\n        return\n    update_status_message = SlackMessageIncidentPostMortemReminder(incident)\n    incident.conversation.send_message_and_save(\n        update_status_message,\n        client=client,\n        strategy=SlackMessageStrategy.REPLACE,\n        strategy_args={\n            \"replace\": (\n                SlackMessageIncidentFixedNextActions.id,\n                SlackMessageIncidentPostMortemReminder.id,\n            )\n        },\n    )\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.tasks.send_message","title":"send_message","text":"<p>Functions:</p> <ul> <li> <code>send_message</code>             \u2013              <p>Sends a message to a channel. All arguments are passed to the Slack API.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.tasks.send_message.send_message","title":"send_message","text":"<pre><code>send_message(client: WebClient = DefaultWebClient, *args: Any, **kwargs: Any) -&gt; dict[str, Any] | bytes\n</code></pre> <p>Sends a message to a channel. All arguments are passed to the Slack API.</p> Source code in <code>src/firefighter/slack/tasks/send_message.py</code> <pre><code>@shared_task(\n    name=\"slack.send_message\",\n    autoretry_for=(SlackClientError,),\n    retry_kwargs={\"max_retries\": 2},\n    default_retry_delay=30,\n)\n@slack_client\ndef send_message(  # pylint: disable=keyword-arg-before-vararg\n    client: WebClient = DefaultWebClient, *args: Any, **kwargs: Any\n) -&gt; dict[str, Any] | bytes:\n    \"\"\"Sends a message to a channel. All arguments are passed to the Slack API.\"\"\"\n    return client.chat_postMessage(*args, **kwargs).data\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.tasks.send_reminders","title":"send_reminders","text":"<p>Functions:</p> <ul> <li> <code>slack_save_reminder_message</code>             \u2013              <p>Save the firefighter.slack.models.Message from a Slack response. First <code>args</code> is an firefighter.incidents.models.Incident ID.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.tasks.send_reminders.slack_save_reminder_message","title":"slack_save_reminder_message","text":"<pre><code>slack_save_reminder_message(message_response_data: SlackResponse, *args: int, **_kwargs: Any) -&gt; bool\n</code></pre> <p>Save the firefighter.slack.models.Message from a Slack response. First <code>args</code> is an firefighter.incidents.models.Incident ID.</p> <p>Parameters:</p> <ul> <li> <code>message_response_data</code>               (<code>dict</code>)           \u2013            <p>SlackResponse data.</p> </li> <li> <code>*args</code>               (<code>int</code>, default:                   <code>()</code> )           \u2013            <p>Expect one value, the firefighter.incidents.models.Incident ID.</p> </li> <li> <code>**_kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Ignored.</p> </li> </ul> Source code in <code>src/firefighter/slack/tasks/send_reminders.py</code> <pre><code>@shared_task(\n    name=\"slack.slack_save_reminder_message\",\n    retry_kwargs={\"max_retries\": 5},\n    default_retry_delay=30,\n)\ndef slack_save_reminder_message(\n    message_response_data: SlackResponse, *args: int, **_kwargs: Any\n) -&gt; bool:\n    \"\"\"Save the [firefighter.slack.models.Message][] from a Slack response. First `args` is an [firefighter.incidents.models.Incident][] ID.\n\n    Args:\n        message_response_data (dict): SlackResponse data.\n        *args: Expect one value, the [firefighter.incidents.models.Incident][] ID.\n        **_kwargs: Ignored.\n    \"\"\"\n    user = SlackUser.objects.get_user_by_slack_id(\n        slack_id=message_response_data[\"message\"][\"user\"]\n    )\n    conversation = IncidentChannel.objects.get(\n        channel_id=message_response_data[\"channel\"]\n    )\n    ts = datetime.fromtimestamp(\n        float(message_response_data[\"message\"][\"ts\"]), tz=timezone.utc  # type: ignore [attr-defined]\n    )\n    if user is None or not hasattr(user, \"slack_user\") or user.slack_user is None:\n        msg = f\"User not found for slack_id {message_response_data['message']['user']}\"\n        raise ValueError(msg)\n    Message(\n        conversation=conversation,\n        ts=ts,\n        type=message_response_data[\"message\"][\"type\"],\n        ff_type=message_response_data[\"message\"][\"metadata\"][\"event_type\"],\n        user=user.slack_user,\n        incident_id=args[0],\n    ).save()\n    return True\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.tasks.sync_users","title":"sync_users","text":"<p>Functions:</p> <ul> <li> <code>sync_users</code>             \u2013              <p>Retrieves users from Slack and updates the database (e.g. name, new profile picture, email, active status...).</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.tasks.sync_users.sync_users","title":"sync_users","text":"<pre><code>sync_users(*_args: Any, **_options: Any) -&gt; None\n</code></pre> <p>Retrieves users from Slack and updates the database (e.g. name, new profile picture, email, active status...).</p> Source code in <code>src/firefighter/slack/tasks/sync_users.py</code> <pre><code>@shared_task(\n    name=\"slack.sync_users\",\n    retry_kwargs={\"max_retries\": 2},\n    default_retry_delay=90,\n)\ndef sync_users(*_args: Any, **_options: Any) -&gt; None:\n    \"\"\"Retrieves users from Slack and updates the database (e.g. name, new profile picture, email, active status...).\"\"\"\n    task()\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.tasks.update_usergroups_members","title":"update_usergroups_members","text":"<p>Functions:</p> <ul> <li> <code>update_usergroups_members_from_slack_celery</code>             \u2013              <p>Wrapper around the actual task, as Celery doesn't support passing Django models.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.tasks.update_usergroups_members.update_usergroups_members_from_slack_celery","title":"update_usergroups_members_from_slack_celery","text":"<pre><code>update_usergroups_members_from_slack_celery(*args: Any, **options: Any) -&gt; dict[str, list[str | None]]\n</code></pre> <p>Wrapper around the actual task, as Celery doesn't support passing Django models.</p> Source code in <code>src/firefighter/slack/tasks/update_usergroups_members.py</code> <pre><code>@shared_task(\n    name=\"slack.update_usergroups_members_from_slack\",\n    retry_kwargs={\"max_retries\": 2},\n    default_retry_delay=90,\n)\ndef update_usergroups_members_from_slack_celery(\n    *args: Any,\n    **options: Any,\n) -&gt; dict[str, list[str | None]]:\n    \"\"\"Wrapper around the actual task, as Celery doesn't support passing Django models.\"\"\"\n    fails = update_usergroups_members_from_slack(*args, **options)\n    return {\"failed_groups\": [x.usergroup_id for x in fails]}\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.tasks.update_users","title":"update_users","text":"<p>Functions:</p> <ul> <li> <code>update_users_from_slack</code>             \u2013              <p>Retrieves users from Slack and updates the database (e.g. name, new profile picture, email, active status...).</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.tasks.update_users.update_users_from_slack","title":"update_users_from_slack","text":"<pre><code>update_users_from_slack(*_args: Any, **_options: Any) -&gt; None\n</code></pre> <p>Retrieves users from Slack and updates the database (e.g. name, new profile picture, email, active status...).</p> Source code in <code>src/firefighter/slack/tasks/update_users.py</code> <pre><code>@shared_task(\n    name=\"slack.update_users_from_slack\",\n    retry_kwargs={\"max_retries\": 2},\n    default_retry_delay=90,\n)\ndef update_users_from_slack(*_args: Any, **_options: Any) -&gt; None:\n    \"\"\"Retrieves users from Slack and updates the database (e.g. name, new profile picture, email, active status...).\"\"\"\n    queryset = SlackUser.objects.all().order_by(\"user__updated_at\")[:100]\n    for slack_user in queryset:\n        slack_user.update_user_info()\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.utils","title":"utils","text":"<p>Functions:</p> <ul> <li> <code>channel_name_from_incident</code>             \u2013              <p>Lowercase, truncated at 80 chars, this is obviously the channel #name.</p> </li> <li> <code>get_slack_user_id_from_body</code>             \u2013              <p>Get the slack user id from the body of a Slack request, in <code>user_id</code> or <code>user.id</code>.</p> </li> <li> <code>respond</code>             \u2013              <p>Respond to the user, depending on where the message was coming from.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.utils.channel_name_from_incident","title":"channel_name_from_incident","text":"<pre><code>channel_name_from_incident(incident: Incident) -&gt; str\n</code></pre> <p>Lowercase, truncated at 80 chars, this is obviously the channel #name.</p> Source code in <code>src/firefighter/slack/utils.py</code> <pre><code>def channel_name_from_incident(incident: Incident) -&gt; str:\n    \"\"\"Lowercase, truncated at 80 chars, this is obviously the channel #name.\"\"\"\n    if (\n        not hasattr(incident, \"created_at\")\n        or not hasattr(incident, \"id\")\n        or not incident.created_at\n        or not incident.id\n    ):\n        raise RuntimeError(\n            \"Incident must be saved before slack_channel_name can be computed\"\n        )\n    date_formatted = localtime(incident.created_at).strftime(\"%Y%m%d\")\n    if incident.environment is not None and incident.environment.value != \"PRD\":\n        topic = f\"{date_formatted}-{str(incident.id)[:8]}-{incident.environment.value}-{incident.incident_category.name}\"\n    else:\n        topic = f\"{date_formatted}-{str(incident.id)[:8]}-{incident.incident_category.name}\"\n\n    # Strip non-alphanumeric characters, cut at 80 chars\n    # XXX django.utils.text.slugify should be used instead\n    topic = topic.replace(\" \", \"-\")\n    topic = NON_ALPHANUMERIC_CHARACTERS.sub(\"-\", topic)\n    return topic.lower()[:80]\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.utils.get_slack_user_id_from_body","title":"get_slack_user_id_from_body","text":"<pre><code>get_slack_user_id_from_body(body: dict[str, Any]) -&gt; str | None\n</code></pre> <p>Get the slack user id from the body of a Slack request, in <code>user_id</code> or <code>user.id</code>.</p> Source code in <code>src/firefighter/slack/utils.py</code> <pre><code>def get_slack_user_id_from_body(body: dict[str, Any]) -&gt; str | None:\n    \"\"\"Get the slack user id from the body of a Slack request, in `user_id` or `user.id`.\"\"\"\n    return body.get(\"user_id\", body.get(\"user\", {}).get(\"id\"))\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.utils.respond","title":"respond","text":"<pre><code>respond(\n    body: dict[str, Any], text: str = \"\", blocks: str | Sequence[dict[str, Any] | Block] | None = None, client: WebClient = DefaultWebClient\n) -&gt; None\n</code></pre> <p>Respond to the user, depending on where the message was coming from.</p> Source code in <code>src/firefighter/slack/utils.py</code> <pre><code>@slack_client\ndef respond(\n    body: dict[str, Any],\n    text: str = \"\",\n    blocks: str | Sequence[dict[str, Any] | Block] | None = None,\n    client: WebClient = DefaultWebClient,\n) -&gt; None:\n    \"\"\"Respond to the user, depending on where the message was coming from.\"\"\"\n    user_id: str | None = body.get(\"user_id\", body.get(\"user\", {}).get(\"id\"))\n    channel_id: str | None = body.get(\"channel_id\", body.get(\"channel\", {}).get(\"id\"))\n\n    if not user_id and not channel_id:\n        raise ValueError(\n            \"Cannot find user_id (or user.id) or channel_id (or channel.id) in the body. At least one is required.\"\n        )\n\n    # From Direct Message =&gt; Always respond on the conv between the user and the bot.\n    if (body.get(\"channel_name\") == \"directmessage\" or not channel_id) and user_id:\n        # We should always be able to respond in this conversation...\n        client.chat_postMessage(channel=user_id, text=text, blocks=blocks)\n        return\n    if not user_id:\n        raise ValueError(\"Cannot find user_id (or user.id) in the body.\")\n\n    # From channel =&gt; post as ephemeral in the channel\n    try:\n        _send_ephemeral(text, blocks, client, user_id, channel_id)\n\n    except (SlackApiError, ValueError):\n        logger.warning(\n            \"Failed to send ephemeral chat message to user! Body: %s\",\n            body,\n            exc_info=True,\n        )\n        # Fallback to DM\n        if body.get(\"type\") != \"view_submission\":\n            client.chat_postMessage(\n                channel=user_id,\n                text=\":warning: The bot could not respond in the channel you invoked it. Please add it to this channel or conversation if you want to interact with the bot there. If you believe this is a bug, please tell @pulse.\",\n            )\n        client.chat_postMessage(channel=user_id, text=text, blocks=blocks)\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views","title":"views","text":"<p>Modules:</p> <ul> <li> <code>events</code>           \u2013            </li> <li> <code>modals</code>           \u2013            </li> <li> <code>select_impact</code>           \u2013            </li> <li> <code>views</code>           \u2013            </li> </ul> <p>Classes:</p> <ul> <li> <code>CloseModal</code>           \u2013            </li> <li> <code>ClosureReasonModal</code>           \u2013            <p>Modal for closing an incident with a mandatory reason from early statuses.</p> </li> <li> <code>KeyEvents</code>           \u2013            </li> <li> <code>OnCallModal</code>           \u2013            </li> <li> <code>OpenModal</code>           \u2013            </li> </ul>"},{"location":"reference/slack/#firefighter.slack.views.CloseModal","title":"CloseModal","text":"<pre><code>CloseModal()\n</code></pre> <p>               Bases: <code>IncidentSelectableModalMixin</code>, <code>ModalForm[CloseIncidentFormSlack]</code></p> <p>Methods:</p> <ul> <li> <code>handle_modal_fn</code>             \u2013              <p>Handle response from /incident close modal.</p> </li> </ul> Source code in <code>src/firefighter/slack/views/modals/base_modal/base.py</code> <pre><code>def __init__(self) -&gt; None:\n    if self.handle_modal_fn is not None:\n        self.handler_fn_args = inspect.getfullargspec(self.handle_modal_fn).args\n        if len(self.handler_fn_args) &gt; 0 and self.handler_fn_args[0] in {\n            \"self\",\n            \"cls\",\n        }:\n            self.handler_fn_args.pop(0)\n\n    self.builder_fn_args = inspect.getfullargspec(self.build_modal_fn).args\n    if len(self.builder_fn_args) &gt; 0 and self.builder_fn_args[0] in {\"self\", \"cls\"}:\n        self.builder_fn_args.pop(0)\n\n    self._register_actions_shortcuts()\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.CloseModal.handle_modal_fn","title":"handle_modal_fn","text":"<pre><code>handle_modal_fn(ack: Ack, body: dict[str, Any], incident: Incident, user: User) -&gt; bool | None\n</code></pre> <p>Handle response from /incident close modal.</p> Source code in <code>src/firefighter/slack/views/modals/close.py</code> <pre><code>def handle_modal_fn(  # type: ignore[override]\n    self, ack: Ack, body: dict[str, Any], incident: Incident, user: User\n) -&gt;  bool | None:\n    \"\"\"Handle response from /incident close modal.\"\"\"\n    # Check if this should be handled by closure reason modal\n    closure_result = handle_close_modal_callback(ack, body, incident, user)\n    if closure_result is not None:\n        return closure_result\n    slack_form = self.handle_form_errors(\n        ack, body, forms_kwargs={\"initial\": self._get_initial_form_values(incident)}\n    )\n    if slack_form is None:\n        return None\n    form = slack_form.form\n    # If fields haven't changed, don't include them in the update.\n    update_kwargs = {}\n    for changed_key in form.changed_data:\n        if changed_key == \"incident_category\":\n            update_kwargs[\"incident_category_id\"] = form.cleaned_data[changed_key].id\n        if changed_key in {\"description\", \"title\", \"message\"}:\n            update_kwargs[changed_key] = form.cleaned_data[changed_key]\n    # Check can close\n    can_close, reasons = incident.can_be_closed\n    if not can_close:\n        logger.warning(\n            f\"Tried to close an incident that can't be closed yet! Aborting. Incident #{incident.id}. Reasons: {reasons}\"\n        )\n        respond(\n            body=body,\n            text=f\"It looks like this incident #{incident.id} could not be closed.\\nReasons: {reasons}.\\nPlease tell @pulse (#tech-pe-pulse) if you think this is an error.\",\n        )\n        return False\n    self._trigger_incident_workflow(incident, user, update_kwargs)\n    return None\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.ClosureReasonModal","title":"ClosureReasonModal","text":"<pre><code>ClosureReasonModal()\n</code></pre> <p>               Bases: <code>IncidentSelectableModalMixin</code>, <code>SlackModal</code></p> <p>Modal for closing an incident with a mandatory reason from early statuses.</p> <p>Methods:</p> <ul> <li> <code>build_modal_fn</code>             \u2013              <p>Build the closure reason modal.</p> </li> <li> <code>handle_modal_fn</code>             \u2013              <p>Handle the closure reason modal submission.</p> </li> </ul> Source code in <code>src/firefighter/slack/views/modals/base_modal/base.py</code> <pre><code>def __init__(self) -&gt; None:\n    if self.handle_modal_fn is not None:\n        self.handler_fn_args = inspect.getfullargspec(self.handle_modal_fn).args\n        if len(self.handler_fn_args) &gt; 0 and self.handler_fn_args[0] in {\n            \"self\",\n            \"cls\",\n        }:\n            self.handler_fn_args.pop(0)\n\n    self.builder_fn_args = inspect.getfullargspec(self.build_modal_fn).args\n    if len(self.builder_fn_args) &gt; 0 and self.builder_fn_args[0] in {\"self\", \"cls\"}:\n        self.builder_fn_args.pop(0)\n\n    self._register_actions_shortcuts()\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.ClosureReasonModal.build_modal_fn","title":"build_modal_fn","text":"<pre><code>build_modal_fn(body: dict[str, Any], incident: Incident, **kwargs: Any) -&gt; View\n</code></pre> <p>Build the closure reason modal.</p> Source code in <code>src/firefighter/slack/views/modals/closure_reason.py</code> <pre><code>def build_modal_fn(\n    self, body: dict[str, Any], incident: Incident, **kwargs: Any  # noqa: ARG002\n) -&gt; View:\n    \"\"\"Build the closure reason modal.\"\"\"\n    # Build closure reason options (exclude RESOLVED)\n    closure_options = [\n        Option(\n            value=choice[0],\n            label=choice[1],\n        )\n        for choice in ClosureReason.choices\n        if choice[0] != ClosureReason.RESOLVED\n    ]\n\n    blocks: list[Block] = [\n        SectionBlock(\n            text=f\"*Closure Reason Required for Incident #{incident.id}*\\n_{incident.title}_\"\n        ),\n        ContextBlock(\n            elements=[\n                MarkdownTextObject(\n                    text=f\"\u26a0\ufe0f This incident is currently in *{incident.status.label}* status.\\nA closure reason is required to close incidents from this status.\"\n                )\n            ]\n        ),\n        DividerBlock(),\n        InputBlock(\n            block_id=\"closure_reason\",\n            label=\"Closure Reason\",\n            element=StaticSelectElement(\n                action_id=\"select_closure_reason\",\n                options=closure_options,\n                placeholder=\"Select a reason...\",\n            ),\n            hint=\"Why is this incident being closed directly?\",\n        ),\n        InputBlock(\n            block_id=\"closure_reference\",\n            label=\"Reference (optional)\",\n            element=PlainTextInputElement(\n                action_id=\"input_closure_reference\",\n                placeholder=\"e.g., #1234 or https://...\",\n                max_length=100,\n            ),\n            hint=\"Related incident ID or external reference\",\n            optional=True,\n        ),\n        InputBlock(\n            block_id=\"closure_message\",\n            label=\"Closure Message\",\n            element=PlainTextInputElement(\n                action_id=\"input_closure_message\",\n                multiline=True,\n                placeholder=\"Brief explanation of why this incident is being closed...\",\n            ),\n            hint=\"This message will be added to the incident timeline\",\n        ),\n        slack_block_separator(),\n        slack_block_footer(),\n    ]\n\n    return View(\n        type=\"modal\",\n        title=f\"Close #{incident.id}\"[:24],\n        submit=\"Close Incident\",\n        callback_id=self.callback_id,\n        private_metadata=str(incident.id),\n        blocks=blocks,\n    )\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.ClosureReasonModal.handle_modal_fn","title":"handle_modal_fn","text":"<pre><code>handle_modal_fn(ack: Ack, body: dict[str, Any], incident: Incident, user: User) -&gt; bool | None\n</code></pre> <p>Handle the closure reason modal submission.</p> Source code in <code>src/firefighter/slack/views/modals/closure_reason.py</code> <pre><code>def handle_modal_fn(  # type: ignore[override]\n    self, ack: Ack, body: dict[str, Any], incident: Incident, user: User\n) -&gt; bool | None:\n    \"\"\"Handle the closure reason modal submission.\"\"\"\n    # Clear ALL modals in the stack (not just this one)\n    # This ensures the underlying \"Update Status\" modal is also closed\n    ack(response_action=\"clear\")\n\n    # Extract form values\n    state_values = body[\"view\"][\"state\"][\"values\"]\n    closure_reason = state_values[\"closure_reason\"][\"select_closure_reason\"][\n        \"selected_option\"\n    ][\"value\"]\n    closure_reference = (\n        state_values[\"closure_reference\"][\"input_closure_reference\"].get(\"value\", \"\")\n        or \"\"\n    )\n    message = state_values[\"closure_message\"][\"input_closure_message\"][\"value\"]\n\n    try:\n        # Update incident with closure fields\n        incident.closure_reason = closure_reason\n        incident.closure_reference = closure_reference\n        incident.save(update_fields=[\"closure_reason\", \"closure_reference\"])\n\n        # Create incident update with closure\n        incident.create_incident_update(\n            created_by=user,\n            status=IncidentStatus.CLOSED,\n            message=message,\n            event_type=\"closure_reason\",\n        )\n\n    except Exception:\n        logger.exception(\n            \"Error closing incident #%s with reason\", incident.id\n        )\n        respond(\n            body=body,\n            text=f\"\u274c Failed to close incident #{incident.id}\",\n        )\n        return False\n    else:\n        # Send confirmation message\n        try:\n            respond(\n                body=body,\n                text=(\n                    f\"\u2705 Incident #{incident.id} has been closed.\\n\"\n                    f\"*Reason:* {ClosureReason(closure_reason).label}\\n\"\n                    f\"*Message:* {message}\"\n                    + (f\"\\n*Reference:* {closure_reference}\" if closure_reference else \"\")\n                ),\n            )\n        except SlackApiError as e:\n            if e.response.get(\"error\") == \"messages_tab_disabled\":\n                logger.warning(\n                    \"Cannot send DM to user %s - messages tab disabled\",\n                    user.email,\n                )\n            else:\n                # Re-raise for other Slack API errors\n                raise\n\n        logger.info(\n            \"Incident #%s closed with reason by %s: %s\",\n            incident.id,\n            user.email,\n            closure_reason,\n        )\n        return True\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.KeyEvents","title":"KeyEvents","text":"<pre><code>KeyEvents()\n</code></pre> <p>               Bases: <code>MessageForm[IncidentUpdateKeyEventsForm]</code></p> <p>Methods:</p> <ul> <li> <code>handle_modal_fn</code>             \u2013              <p>Handle the time and date inputs for the key events.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>open_shortcut</code>               (<code>str | None</code>)           \u2013            <p>Slack shortcut to open the modal.</p> </li> </ul> Source code in <code>src/firefighter/slack/views/modals/base_modal/base.py</code> <pre><code>def __init__(self) -&gt; None:\n    if self.handle_modal_fn is not None:\n        self.handler_fn_args = inspect.getfullargspec(self.handle_modal_fn).args\n        if len(self.handler_fn_args) &gt; 0 and self.handler_fn_args[0] in {\n            \"self\",\n            \"cls\",\n        }:\n            self.handler_fn_args.pop(0)\n\n    self.builder_fn_args = inspect.getfullargspec(self.build_modal_fn).args\n    if len(self.builder_fn_args) &gt; 0 and self.builder_fn_args[0] in {\"self\", \"cls\"}:\n        self.builder_fn_args.pop(0)\n\n    self._register_actions_shortcuts()\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.KeyEvents.open_shortcut","title":"open_shortcut  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>open_shortcut: str | None = None\n</code></pre> <p>Slack shortcut to open the modal.</p>"},{"location":"reference/slack/#firefighter.slack.views.KeyEvents.handle_modal_fn","title":"handle_modal_fn","text":"<pre><code>handle_modal_fn(ack: Ack, body: dict[str, Any], user: User, incident: Incident) -&gt; None\n</code></pre> <p>Handle the time and date inputs for the key events.</p> Source code in <code>src/firefighter/slack/views/modals/key_event_message.py</code> <pre><code>def handle_modal_fn(  # type: ignore[override]\n    self, ack: Ack, body: dict[str, Any], user: User, incident: Incident\n) -&gt; None:\n    \"\"\"Handle the time and date inputs for the key events.\"\"\"\n    logger.debug(body)\n\n    slack_form: SlackForm[IncidentUpdateKeyEventsForm] | None = (\n        self.handle_form_errors(\n            ack,\n            body,\n            forms_kwargs={\n                \"incident\": incident,\n                \"user\": user,\n            },\n        )\n    )\n    form = slack_form.form if slack_form else None\n\n    if form is None:\n        logger.warning(\"Form is None, skipping save\")\n        return\n    if len(form.errors) &gt; 0:\n        self.update_with_form()\n        return\n    self.form = form\n    self.form.save()\n    incident.compute_metrics()\n\n    self.update_with_form()\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.OnCallModal","title":"OnCallModal","text":"<pre><code>OnCallModal()\n</code></pre> <p>               Bases: <code>IncidentSelectableModalMixin</code>, <code>SlackModal</code></p> <p>Methods:</p> <ul> <li> <code>build_modal_fn</code>             \u2013              <p>XXX Should get an incident ID instead of an incident.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>open_shortcut</code>               (<code>str | None</code>)           \u2013            <p>Slack shortcut to open the modal.</p> </li> </ul> Source code in <code>src/firefighter/slack/views/modals/base_modal/base.py</code> <pre><code>def __init__(self) -&gt; None:\n    if self.handle_modal_fn is not None:\n        self.handler_fn_args = inspect.getfullargspec(self.handle_modal_fn).args\n        if len(self.handler_fn_args) &gt; 0 and self.handler_fn_args[0] in {\n            \"self\",\n            \"cls\",\n        }:\n            self.handler_fn_args.pop(0)\n\n    self.builder_fn_args = inspect.getfullargspec(self.build_modal_fn).args\n    if len(self.builder_fn_args) &gt; 0 and self.builder_fn_args[0] in {\"self\", \"cls\"}:\n        self.builder_fn_args.pop(0)\n\n    self._register_actions_shortcuts()\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.OnCallModal.open_shortcut","title":"open_shortcut  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>open_shortcut: str | None = None\n</code></pre> <p>Slack shortcut to open the modal.</p>"},{"location":"reference/slack/#firefighter.slack.views.OnCallModal.build_modal_fn","title":"build_modal_fn","text":"<pre><code>build_modal_fn(incident: Incident, **kwargs: Any) -&gt; View\n</code></pre> <p>XXX Should get an incident ID instead of an incident.</p> Source code in <code>src/firefighter/slack/views/modals/trigger_oncall.py</code> <pre><code>def build_modal_fn(self, incident: Incident, **kwargs: Any) -&gt; View:\n    \"\"\"XXX Should get an incident ID instead of an incident.\"\"\"\n    previous_pd_incidents = PagerDutyIncident.objects.filter(\n        incident_id=incident.id\n    )\n\n    pd_services = PagerDutyService.objects.exclude(\n        pagerdutyincident__in=previous_pd_incidents,\n    ).filter(ignore=False)\n    pd_options = [Option(value=str(s.id), label=s.summary) for s in pd_services]\n\n    blocks: list[Block] = [\n        SectionBlock(\n            text=f\"You are about to trigger on-call for incident #{incident.id}. Please select the on-call line that you want to trigger.\"\n        ),\n        DividerBlock(),\n        (\n            InputBlock(\n                block_id=\"oncall_service\",\n                label=\"Select on-call line\",\n                element=RadioButtonsElement(\n                    action_id=\"select_oncall_service\", options=pd_options\n                ),\n            )\n            if len(pd_options) &gt; 0\n            else SectionBlock(\n                text=\":warning: No PagerDuty services in the database! :warning:\\nAdministrator action is needed.\"\n            )\n        ),\n    ]\n\n    if len(previous_pd_incidents) &gt; 0:\n        already_existing_text = [\n            f\"- &lt;{s.service.web_url}|{s.service.summary}&gt;: &lt;{s.web_url}|_{s.summary}_&gt;\\n\"\n            for s in previous_pd_incidents\n        ]\n        blocks.extend((\n            DividerBlock(),\n            SectionBlock(\n                text=f\":warning: There are already some on-call lines that have been triggered and can not be triggered again:\\n {''.join(already_existing_text)}\"\n            ),\n        ))\n\n    return View(\n        type=\"modal\",\n        title=\"Trigger on-call\"[:24],\n        submit=\"Trigger on-call\"[:24] if len(pd_options) &gt; 0 else None,\n        callback_id=self.callback_id,\n        private_metadata=str(incident.id),\n        blocks=blocks,\n    )\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.OpenModal","title":"OpenModal","text":"<pre><code>OpenModal()\n</code></pre> <p>               Bases: <code>SlackModal</code></p> <p>Methods:</p> <ul> <li> <code>get_details_modal_form_class</code>             \u2013              <p>Get the details modal form class based on the incident type.</p> </li> <li> <code>handle_modal_fn</code>             \u2013              <p>Handle response from /incident open modal.</p> </li> </ul> Source code in <code>src/firefighter/slack/views/modals/base_modal/base.py</code> <pre><code>def __init__(self) -&gt; None:\n    if self.handle_modal_fn is not None:\n        self.handler_fn_args = inspect.getfullargspec(self.handle_modal_fn).args\n        if len(self.handler_fn_args) &gt; 0 and self.handler_fn_args[0] in {\n            \"self\",\n            \"cls\",\n        }:\n            self.handler_fn_args.pop(0)\n\n    self.builder_fn_args = inspect.getfullargspec(self.build_modal_fn).args\n    if len(self.builder_fn_args) &gt; 0 and self.builder_fn_args[0] in {\"self\", \"cls\"}:\n        self.builder_fn_args.pop(0)\n\n    self._register_actions_shortcuts()\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.OpenModal.get_details_modal_form_class","title":"get_details_modal_form_class  <code>staticmethod</code>","text":"<pre><code>get_details_modal_form_class(open_incident_context: OpeningData, incident_type_value: str | None) -&gt; type[SetIncidentDetails[Any]] | None\n</code></pre> <p>Get the details modal form class based on the incident type.</p> <p>Returns None if no incident type is selected.</p> Source code in <code>src/firefighter/slack/views/modals/open.py</code> <pre><code>@staticmethod\ndef get_details_modal_form_class(\n    open_incident_context: OpeningData,\n    incident_type_value: str | None,\n) -&gt; type[SetIncidentDetails[Any]] | None:\n    \"\"\"Get the details modal form class based on the incident type.\n\n    Returns None if no incident type is selected.\n    \"\"\"\n    response_type = open_incident_context.get(\"response_type\")\n    if response_type is None:\n        return None\n    incident_types = INCIDENT_TYPES.get(response_type)\n    if incident_types and len(incident_types) == 1:\n        return incident_types[next(iter(incident_types.keys()))].get(\"slack_form\")\n    if incident_types and incident_type_value is not None:\n        return incident_types[incident_type_value].get(\"slack_form\")\n    # Fallback for \"normal\" response type when no specific incident type is selected\n    if response_type == \"normal\" and incident_types:\n        return incident_types[next(iter(incident_types.keys()))].get(\"slack_form\")\n    logger.debug(\n        f\"No incident type found for {open_incident_context}. No fallback.\"\n    )\n    return None\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.OpenModal.handle_modal_fn","title":"handle_modal_fn","text":"<pre><code>handle_modal_fn(ack: Ack, body: dict[str, Any], user: User)\n</code></pre> <p>Handle response from /incident open modal.</p> Source code in <code>src/firefighter/slack/views/modals/open.py</code> <pre><code>def handle_modal_fn(  # type: ignore\n    self,\n    ack: Ack,\n    body: dict[str, Any],\n    user: User,\n):\n    \"\"\"Handle response from /incident open modal.\"\"\"\n    data: OpeningData = json.loads(body[\"view\"][\"private_metadata\"])\n\n    details_form_data_raw = data.get(\"details_form_data\", {})\n\n    incident_type_value: str | None = data.get(\"incident_type\", None)\n\n    details_form_modal_class = self.get_details_modal_form_class(\n        data, incident_type_value\n    )\n    if details_form_modal_class:\n        details_form_class: type[CreateIncidentFormBase] = (\n            details_form_modal_class.form_class\n        )\n        if details_form_class:\n            # Pass impacts_data and response_type to form if it supports them (UnifiedIncidentForm)\n            import inspect  # noqa: PLC0415\n            init_params = inspect.signature(details_form_class.__init__).parameters\n            form_kwargs: dict[str, Any] = {}\n            if \"impacts_data\" in init_params:\n                form_kwargs[\"impacts_data\"] = data.get(\"impact_form_data\") or {}\n            if \"response_type\" in init_params:\n                form_kwargs[\"response_type\"] = data.get(\"response_type\", \"critical\")\n\n            details_form: CreateIncidentFormBase = details_form_class(\n                details_form_data_raw, **form_kwargs\n            )\n            details_form.is_valid()\n            ack()\n            try:\n                if hasattr(details_form, \"trigger_incident_workflow\") and callable(\n                    details_form.trigger_incident_workflow\n                ):\n                    # Pass response_type to trigger_incident_workflow if it accepts it\n                    trigger_params = inspect.signature(details_form.trigger_incident_workflow).parameters\n                    workflow_kwargs: dict[str, Any] = {\n                        \"creator\": user,\n                        \"impacts_data\": data.get(\"impact_form_data\") or {},\n                    }\n                    if \"response_type\" in trigger_params:\n                        workflow_kwargs[\"response_type\"] = data.get(\"response_type\", \"critical\")\n\n                    details_form.trigger_incident_workflow(**workflow_kwargs)\n            except:  # noqa: E722\n                logger.exception(\"Error triggering incident workflow\")\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.events","title":"events","text":"<p>Modules:</p> <ul> <li> <code>actions_and_shortcuts</code>           \u2013            </li> <li> <code>commands</code>           \u2013            </li> <li> <code>member_joined_channel</code>           \u2013            </li> <li> <code>member_left_channel</code>           \u2013            </li> <li> <code>message</code>           \u2013            </li> <li> <code>reaction_added</code>           \u2013            </li> </ul> <p>Functions:</p> <ul> <li> <code>handle_message_events_ignore</code>             \u2013              <p>Ignore other message events.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.views.events.handle_message_events_ignore","title":"handle_message_events_ignore","text":"<pre><code>handle_message_events_ignore() -&gt; None\n</code></pre> <p>Ignore other message events. Must be the last event handler for message.</p> Source code in <code>src/firefighter/slack/views/events/__init__.py</code> <pre><code>@app.event(\"message\")\ndef handle_message_events_ignore() -&gt; None:\n    \"\"\"Ignore other message events.\n    Must be the last event handler for message.\n    \"\"\"\n    return\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.events.actions_and_shortcuts","title":"actions_and_shortcuts","text":"<p>Functions:</p> <ul> <li> <code>open_link</code>             \u2013              <p>Does nothing. ack() is mandatory, even on buttons that open a URL.</p> </li> <li> <code>update_update_modal</code>             \u2013              <p>Reacts to the selection of an incident, in the select modal.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.views.events.actions_and_shortcuts.open_link","title":"open_link","text":"<pre><code>open_link(ack: Ack) -&gt; None\n</code></pre> <p>Does nothing. ack() is mandatory, even on buttons that open a URL.</p> Source code in <code>src/firefighter/slack/views/events/actions_and_shortcuts.py</code> <pre><code>@app.action(\"open_link\")\ndef open_link(ack: Ack) -&gt; None:\n    \"\"\"Does nothing. ack() is mandatory, even on buttons that open a URL.\"\"\"\n    ack()\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.events.actions_and_shortcuts.update_update_modal","title":"update_update_modal","text":"<pre><code>update_update_modal(ack: Ack, body: dict[str, Any]) -&gt; None\n</code></pre> <p>Reacts to the selection of an incident, in the select modal.</p> Source code in <code>src/firefighter/slack/views/events/actions_and_shortcuts.py</code> <pre><code>@app.action(\"incident_update_select_incident\")\ndef update_update_modal(ack: Ack, body: dict[str, Any]) -&gt; None:\n    \"\"\"Reacts to the selection of an incident, in the select modal.\"\"\"\n    ack()\n    logger.info(body)\n\n    callback_id = get_in(body, \"view.callback_id\")\n    if callback_id in selectable:\n        view = selectable[callback_id].build_modal_with_context(\n            body, callback_id=callback_id\n        )\n        update_modal(body=body, view=view)\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.events.commands","title":"commands","text":"<p>Functions:</p> <ul> <li> <code>register_commands</code>             \u2013              <p>Register the command with its aliases.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>SLACK_BUILTIN_COMMANDS</code>           \u2013            <p>List of all Slack built-in commands (https://slack.com/help/articles/201259356 checked August 2022)</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.views.events.commands.SLACK_BUILTIN_COMMANDS","title":"SLACK_BUILTIN_COMMANDS  <code>module-attribute</code>","text":"<pre><code>SLACK_BUILTIN_COMMANDS = (\n    \"/archive\",\n    \"/call\",\n    \"/collapse\",\n    \"/dm\",\n    \"/expand\",\n    \"/feed\",\n    \"/invite\",\n    \"/leave\",\n    \"/msg\",\n    \"/remind\",\n    \"/remove\",\n    \"/rename\",\n    \"/search\",\n    \"/shrug\",\n    \"/status\",\n    \"/topic\",\n)\n</code></pre> <p>List of all Slack built-in commands (https://slack.com/help/articles/201259356 checked August 2022)</p>"},{"location":"reference/slack/#firefighter.slack.views.events.commands.register_commands","title":"register_commands","text":"<pre><code>register_commands() -&gt; None\n</code></pre> <p>Register the command with its aliases. Commands are checked: - Fix commands that does not start with a slash, contain spaces, uppercase characters or are longer than 32 characters. - Ignore commands which names are built-in Slack commands.</p> <p>\u26a0\ufe0f Don't forget to add the command and its aliases on your Slack App settings.</p> Source code in <code>src/firefighter/slack/views/events/commands.py</code> <pre><code>def register_commands() -&gt; None:\n    \"\"\"Register the command with its aliases.\n    Commands are checked:\n    - Fix commands that does not start with a slash, contain spaces, uppercase characters or are longer than 32 characters.\n    - Ignore commands which names are built-in Slack commands.\n\n    \u26a0\ufe0f Don't forget to add the command and its aliases on your Slack App settings.\n    \"\"\"\n    command_main: str = settings.SLACK_INCIDENT_COMMAND\n    command_aliases: list[str] = settings.SLACK_INCIDENT_COMMAND_ALIASES\n\n    commands = [command_main, *command_aliases]\n    logger.debug(f\"Registered commands: {commands}\")\n    for command in commands:\n        if not command.startswith(\"/\"):\n            command = f\"/{command}\"  # noqa: PLW2901\n            logger.warning(\n                f\"Command '{command}' does not start with a slash. We added one but please fix your configuration.\"\n            )\n        if \" \" in command:\n            command = command.replace(\" \", \"\")  # noqa: PLW2901\n            logger.warning(\n                f\"Command '{command}' contained spaces. We removed them but please fix your configuration.\"\n            )\n        if len(command) &gt; 32:\n            command = command[:32]  # noqa: PLW2901\n            logger.warning(\n                f\"Command '{command}' was longer than 32 characters. We truncated it but please fix your configuration.\"\n            )\n        if any(char.isupper() for char in command):\n            command = command.lower()  # noqa: PLW2901\n            logger.warning(\n                f\"Command '{command}' contained uppercase characters. We lower-cased them but please fix your configuration.\"\n            )\n        if command in SLACK_BUILTIN_COMMANDS:\n            logger.warning(\n                f\"Command '{command}' is a built-in command, skipping registration. This command will not work.\"\n            )\n            continue\n        app.command(command)(manage_incident)\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.events.member_joined_channel","title":"member_joined_channel","text":"<p>Functions:</p> <ul> <li> <code>member_joined_channel</code>             \u2013              <p>When a user joins a channel, we add it to the list of conversations.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.views.events.member_joined_channel.member_joined_channel","title":"member_joined_channel","text":"<pre><code>member_joined_channel(event: dict[str, Any]) -&gt; None\n</code></pre> <p>When a user joins a channel, we add it to the list of conversations.</p> <p>API Reference: https://api.slack.com/events/member_joined_channel</p> Source code in <code>src/firefighter/slack/views/events/member_joined_channel.py</code> <pre><code>@app.event(\"member_joined_channel\")\ndef member_joined_channel(event: dict[str, Any]) -&gt; None:\n    \"\"\"When a user joins a channel, we add it to the list of conversations.\n\n    API Reference: https://api.slack.com/events/member_joined_channel\n    \"\"\"\n    logger.debug(event)\n    channel_id = get_in(event, \"channel\")\n    channel_type = get_in(event, \"channel_type\")\n    user_id = get_in(event, \"user\")\n    inviter = get_in(event, \"inviter\")\n    if not channel_id:\n        logger.warning(f\"Invalid event! {event}\")\n        return\n\n    conversation = Conversation.objects.get_or_none(channel_id=channel_id)\n    if not conversation:\n        logger.warning(f\"Conversation {channel_id} does not exist!\")\n        return\n\n    if channel_type == \"C\" and conversation.type != ConversationType.PUBLIC_CHANNEL:\n        conversation.type = ConversationType.PUBLIC_CHANNEL\n        conversation.save()\n    elif channel_type == \"G\" and conversation.type != ConversationType.PRIVATE_CHANNEL:\n        conversation.type = ConversationType.PRIVATE_CHANNEL\n        conversation.save()\n    if user_id:\n        user = SlackUser.objects.get_user_by_slack_id(slack_id=user_id)\n        if user is None:\n            logger.warning(f\"User {user_id} does not exist!\")\n            return\n        conversation.members.add(user)\n\n        # Check if Conversation is also IncidentChannel\n        try:\n            incident_channel: IncidentChannel = conversation.incidentchannel\n        except IncidentChannel.DoesNotExist:\n            return\n\n        if inviter and incident_channel:\n            inviter_user = SlackUser.objects.get_user_by_slack_id(slack_id=inviter)\n            if inviter_user is None:\n                logger.warning(f\"Inviter {inviter} does not exist!\")\n                return\n\n            logger.debug(f\"User {user.id} joined {conversation} by {inviter_user.id}\")\n\n        else:\n            inviter_user = None\n\n        incident_channel.members.add(user)\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.events.member_left_channel","title":"member_left_channel","text":"<p>Functions:</p> <ul> <li> <code>member_left_channel</code>             \u2013              <p>When a user leaves a channel, we remove it from the list of conversations.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.views.events.member_left_channel.member_left_channel","title":"member_left_channel","text":"<pre><code>member_left_channel(event: dict[str, Any]) -&gt; None\n</code></pre> <p>When a user leaves a channel, we remove it from the list of conversations.</p> <p>API Reference: https://api.slack.com/events/member_left_channel</p> Source code in <code>src/firefighter/slack/views/events/member_left_channel.py</code> <pre><code>@app.event(\"member_left_channel\")\ndef member_left_channel(event: dict[str, Any]) -&gt; None:\n    \"\"\"When a user leaves a channel, we remove it from the list of conversations.\n\n    API Reference: https://api.slack.com/events/member_left_channel\n    \"\"\"\n    channel_id = get_in(event, \"channel\")\n    channel_type = get_in(event, \"channel_type\")\n    user_id = get_in(event, \"user\")\n    if not channel_id:\n        logger.warning(f\"Invalid event! {event}\")\n        return\n\n    conversation = Conversation.objects.get_or_none(channel_id=channel_id)\n    if not conversation:\n        logger.warning(f\"Conversation {channel_id} does not exist!\")\n        return\n\n    if channel_type == \"C\" and conversation.type != ConversationType.PUBLIC_CHANNEL:\n        conversation.type = ConversationType.PUBLIC_CHANNEL\n        conversation.save()\n    elif channel_type == \"G\" and conversation.type != ConversationType.PRIVATE_CHANNEL:\n        conversation.type = ConversationType.PRIVATE_CHANNEL\n        conversation.save()\n    if user_id:\n        user = SlackUser.objects.get_user_by_slack_id(slack_id=user_id)\n        if user is None:\n            logger.warning(f\"User {user_id} does not exist!\")\n            return\n        conversation.members.remove(user)\n\n        # Check if Conversation is also IncidentChannel\n        try:\n            incident_channel: IncidentChannel = conversation.incidentchannel\n        except IncidentChannel.DoesNotExist:\n            return\n        if incident_channel:\n            logger.info(f\"User {user} left {conversation} \")\n\n            incident = incident_channel.incident\n            IncidentMembership.objects.filter(incident=incident, user=user).delete()\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.events.message","title":"message","text":"<p>Functions:</p> <ul> <li> <code>handle_message_events_ignore</code>             \u2013              <p>Ignore other message events.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.views.events.message.handle_message_events_ignore","title":"handle_message_events_ignore","text":"<pre><code>handle_message_events_ignore() -&gt; None\n</code></pre> <p>Ignore other message events. Must be the last event handler for message.</p> Source code in <code>src/firefighter/slack/views/events/message.py</code> <pre><code>@app.event({\"type\": \"message\", \"subtype\": \"channel_topic\"})\ndef handle_message_events_ignore() -&gt; None:\n    \"\"\"Ignore other message events.\n    Must be the last event handler for message.\n    \"\"\"\n    return\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.events.reaction_added","title":"reaction_added","text":"<p>Functions:</p> <ul> <li> <code>reaction_added_ignore</code>             \u2013              <p>Ignore other reaction_added events.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.views.events.reaction_added.reaction_added_ignore","title":"reaction_added_ignore","text":"<pre><code>reaction_added_ignore() -&gt; None\n</code></pre> <p>Ignore other reaction_added events. Must be the last event handler for reaction_added.</p> Source code in <code>src/firefighter/slack/views/events/reaction_added.py</code> <pre><code>@app.event(\"reaction_added\")\ndef reaction_added_ignore() -&gt; None:\n    \"\"\"Ignore other reaction_added events.\n    Must be the last event handler for reaction_added.\n    \"\"\"\n    return\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.modals","title":"modals","text":"<p>Modules:</p> <ul> <li> <code>base_modal</code>           \u2013            </li> <li> <code>close</code>           \u2013            </li> <li> <code>closure_reason</code>           \u2013            </li> <li> <code>key_event_message</code>           \u2013            </li> <li> <code>open</code>           \u2013            </li> <li> <code>opening</code>           \u2013            </li> <li> <code>trigger_oncall</code>           \u2013            </li> <li> <code>utils</code>           \u2013            <p>Utilities for modal handling to avoid circular imports.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.views.modals.base_modal","title":"base_modal","text":"<p>Modules:</p> <ul> <li> <code>base</code>           \u2013            </li> <li> <code>form_utils</code>           \u2013            </li> </ul>"},{"location":"reference/slack/#firefighter.slack.views.modals.base_modal.base","title":"base","text":"<p>Classes:</p> <ul> <li> <code>MessageForm</code>           \u2013            <p>Form wrapper to use a Django form in a Slack message.</p> </li> <li> <code>ModalForm</code>           \u2013            <p>Specific SlackModal to handle a Django form.</p> </li> <li> <code>SlackModal</code>           \u2013            <p>Two main responsibilities:</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.views.modals.base_modal.base.MessageForm","title":"MessageForm","text":"<pre><code>MessageForm()\n</code></pre> <p>               Bases: <code>SlackModal</code>, <code>Generic[T]</code></p> <p>Form wrapper to use a Django form in a Slack message.</p> <p>Provided a Django form in form_class, it will handle: - generation of Slack Blocks - validation and submission of the form</p> <p>Attributes:</p> <ul> <li> <code>callback_id</code>               (<code>str | Pattern[str]</code>)           \u2013            <p>Callback ID for the Slack View</p> </li> <li> <code>open_shortcut</code>               (<code>str | None</code>)           \u2013            <p>Slack shortcut to open the modal.</p> </li> </ul> Source code in <code>src/firefighter/slack/views/modals/base_modal/base.py</code> <pre><code>def __init__(self) -&gt; None:\n    if self.handle_modal_fn is not None:\n        self.handler_fn_args = inspect.getfullargspec(self.handle_modal_fn).args\n        if len(self.handler_fn_args) &gt; 0 and self.handler_fn_args[0] in {\n            \"self\",\n            \"cls\",\n        }:\n            self.handler_fn_args.pop(0)\n\n    self.builder_fn_args = inspect.getfullargspec(self.build_modal_fn).args\n    if len(self.builder_fn_args) &gt; 0 and self.builder_fn_args[0] in {\"self\", \"cls\"}:\n        self.builder_fn_args.pop(0)\n\n    self._register_actions_shortcuts()\n</code></pre> <code></code> callback_id <code>instance-attribute</code> \u00a4 <pre><code>callback_id: str | Pattern[str]\n</code></pre> <p>Callback ID for the Slack View</p> <code></code> open_shortcut <code>class-attribute</code> <code>instance-attribute</code> \u00a4 <pre><code>open_shortcut: str | None = None\n</code></pre> <p>Slack shortcut to open the modal.</p>"},{"location":"reference/slack/#firefighter.slack.views.modals.base_modal.base.ModalForm","title":"ModalForm","text":"<pre><code>ModalForm()\n</code></pre> <p>               Bases: <code>SlackModal</code>, <code>Generic[T]</code></p> <p>Specific SlackModal to handle a Django form.</p> <p>Provided a Django form in form_class, it will handle: - generation of Slack Blocks - validation and submission of the form</p> <p>Attributes:</p> <ul> <li> <code>callback_id</code>               (<code>str | Pattern[str]</code>)           \u2013            <p>Callback ID for the Slack View</p> </li> <li> <code>open_shortcut</code>               (<code>str | None</code>)           \u2013            <p>Slack shortcut to open the modal.</p> </li> </ul> Source code in <code>src/firefighter/slack/views/modals/base_modal/base.py</code> <pre><code>def __init__(self) -&gt; None:\n    if self.handle_modal_fn is not None:\n        self.handler_fn_args = inspect.getfullargspec(self.handle_modal_fn).args\n        if len(self.handler_fn_args) &gt; 0 and self.handler_fn_args[0] in {\n            \"self\",\n            \"cls\",\n        }:\n            self.handler_fn_args.pop(0)\n\n    self.builder_fn_args = inspect.getfullargspec(self.build_modal_fn).args\n    if len(self.builder_fn_args) &gt; 0 and self.builder_fn_args[0] in {\"self\", \"cls\"}:\n        self.builder_fn_args.pop(0)\n\n    self._register_actions_shortcuts()\n</code></pre> <code></code> callback_id <code>instance-attribute</code> \u00a4 <pre><code>callback_id: str | Pattern[str]\n</code></pre> <p>Callback ID for the Slack View</p> <code></code> open_shortcut <code>class-attribute</code> <code>instance-attribute</code> \u00a4 <pre><code>open_shortcut: str | None = None\n</code></pre> <p>Slack shortcut to open the modal.</p>"},{"location":"reference/slack/#firefighter.slack.views.modals.base_modal.base.SlackModal","title":"SlackModal","text":"<pre><code>SlackModal()\n</code></pre> <p>Two main responsibilities: - Register the modal on Slack to open it with shortcuts or actions - Provide useful context for <code>build_modal_fn</code> and <code>handle_modal_fn</code>, such as body, incident, user, etc.</p> <p>Attributes:</p> <ul> <li> <code>callback_id</code>               (<code>str | Pattern[str]</code>)           \u2013            <p>Callback ID for the Slack View</p> </li> <li> <code>open_shortcut</code>               (<code>str | None</code>)           \u2013            <p>Slack shortcut to open the modal.</p> </li> </ul> Source code in <code>src/firefighter/slack/views/modals/base_modal/base.py</code> <pre><code>def __init__(self) -&gt; None:\n    if self.handle_modal_fn is not None:\n        self.handler_fn_args = inspect.getfullargspec(self.handle_modal_fn).args\n        if len(self.handler_fn_args) &gt; 0 and self.handler_fn_args[0] in {\n            \"self\",\n            \"cls\",\n        }:\n            self.handler_fn_args.pop(0)\n\n    self.builder_fn_args = inspect.getfullargspec(self.build_modal_fn).args\n    if len(self.builder_fn_args) &gt; 0 and self.builder_fn_args[0] in {\"self\", \"cls\"}:\n        self.builder_fn_args.pop(0)\n\n    self._register_actions_shortcuts()\n</code></pre> <code></code> callback_id <code>instance-attribute</code> \u00a4 <pre><code>callback_id: str | Pattern[str]\n</code></pre> <p>Callback ID for the Slack View</p> <code></code> open_shortcut <code>class-attribute</code> <code>instance-attribute</code> \u00a4 <pre><code>open_shortcut: str | None = None\n</code></pre> <p>Slack shortcut to open the modal.</p>"},{"location":"reference/slack/#firefighter.slack.views.modals.base_modal.form_utils","title":"form_utils","text":"<p>Classes:</p> <ul> <li> <code>SafeOption</code>           \u2013            <p>Make sure we are creating valid Option, warn otherwise.</p> </li> <li> <code>SlackForm</code>           \u2013            </li> <li> <code>SlackFormJSONEncoder</code>           \u2013            <p>JSON encoder that can handle UUIDs and Django models.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>slack_view_submission_to_dict</code>             \u2013              <p>Returns a dict of the form data from a Slack view submission.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.views.modals.base_modal.form_utils.SafeOption","title":"SafeOption","text":"<pre><code>SafeOption(\n    *,\n    value: str,\n    label: str | None = None,\n    text: str | dict[str, Any] | TextObject | None = None,\n    description: str | dict[str, Any] | TextObject | None = None,\n    url: str | None = None,\n    **others: dict[str, Any]\n)\n</code></pre> <p>               Bases: <code>Option</code></p> <p>Make sure we are creating valid Option, warn otherwise.</p> Source code in <code>src/firefighter/slack/views/modals/base_modal/form_utils.py</code> <pre><code>def __init__(\n    self,\n    *,\n    value: str,\n    label: str | None = None,\n    text: str | dict[str, Any] | TextObject | None = None,  # Block Kit\n    description: str | dict[str, Any] | TextObject | None = None,\n    url: str | None = None,\n    **others: dict[str, Any],\n) -&gt; None:\n    if len(value) &gt; 75:\n        logger.warning(\"Option value is too long: %s\", value)\n        value = value[:75]\n    if label and len(label) &gt; 75:\n        logger.warning(\"Option label is too long: %s\", label)\n        label = label[:74] + \"\u2026\"\n    super().__init__(\n        value=value,\n        label=label,\n        text=text,\n        description=description,\n        url=url,\n        **others,\n    )\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.modals.base_modal.form_utils.SlackForm","title":"SlackForm","text":"<pre><code>SlackForm(form: type[T], slack_fields: SlackFormAttributesDict | None = None)\n</code></pre> <p>               Bases: <code>Generic[T]</code></p> <p>Methods:</p> <ul> <li> <code>slack_blocks</code>             \u2013              <p>Return the list of blocks from a SlackForm.</p> </li> </ul> Source code in <code>src/firefighter/slack/views/modals/base_modal/form_utils.py</code> <pre><code>def __init__(\n    self,\n    form: type[T],\n    slack_fields: SlackFormAttributesDict | None = None,\n):\n    self.form_class = form\n\n    if hasattr(form, \"slack_fields\") and form.slack_fields:  # type: ignore\n        self.slack_fields = form.slack_fields  # type: ignore\n    else:\n        self.slack_fields = slack_fields or {}\n</code></pre> <code></code> slack_blocks \u00a4 <pre><code>slack_blocks(block_wrapper: Literal['section_accessory', 'input', 'action'] = 'input') -&gt; list[Block]\n</code></pre> <p>Return the list of blocks from a SlackForm.</p> <p>Parameters:</p> <ul> <li> <code>block_wrapper</code>               (<code>str</code>, default:                   <code>'input'</code> )           \u2013            <p>Type of blocks destination. Defaults to \"input\".</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>Raised if one of the initial value does not match the field type.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[Block]</code>           \u2013            <p>list[Block]: The List of Slack Blocks.</p> </li> </ul> Source code in <code>src/firefighter/slack/views/modals/base_modal/form_utils.py</code> <pre><code>def slack_blocks(\n    self,\n    block_wrapper: Literal[\"section_accessory\", \"input\", \"action\"] = \"input\",\n) -&gt; list[Block]:\n    \"\"\"Return the list of blocks from a SlackForm.\n\n    Args:\n        block_wrapper (str, optional): Type of blocks destination. Defaults to \"input\".\n\n    Raises:\n        ValueError: Raised if one of the initial value does not match the field type.\n\n    Returns:\n        list[Block]: The List of Slack Blocks.\n    \"\"\"\n    blocks = []\n    for field_name, f in self.form.fields.items():\n        # Get the default data, from the form data, the field.initial or the form.initial\n        f.initial = self.get_field_initial(field_name, f)\n\n        slack_input_kwargs: dict[str, Any] = {}\n        slack_block_kwargs: dict[str, Any] = {}\n\n        # Set Field common args\n        slack_block_kwargs[\"label\"] = (f.label or field_name.title())[:2000]\n        slack_block_kwargs[\"hint\"] = f.help_text[:2000]\n        slack_block_kwargs[\"optional\"] = not f.required\n\n        # Set custom Slack SDK fields\n        post_block, pre_block = self._parse_field_slack_args(\n            field_name, f, slack_input_kwargs, slack_block_kwargs\n        )\n\n        slack_input_element = self._get_input_element(\n            f, field_name, slack_input_kwargs\n        )\n        if slack_input_element is None:\n            continue\n        blocks += self._wrap_field_in_block(\n            block_wrapper,\n            field_name,\n            f,\n            slack_block_kwargs,\n            slack_input_element,\n            post_block,\n            pre_block,\n        )\n    return blocks\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.modals.base_modal.form_utils.SlackFormJSONEncoder","title":"SlackFormJSONEncoder","text":"<p>               Bases: <code>JSONEncoder</code></p> <p>JSON encoder that can handle UUIDs and Django models. Used to serialize the form data to JSON for Slack modal private_metadata.</p>"},{"location":"reference/slack/#firefighter.slack.views.modals.base_modal.form_utils.slack_view_submission_to_dict","title":"slack_view_submission_to_dict","text":"<pre><code>slack_view_submission_to_dict(body: dict[str, Any | str]) -&gt; dict[str, str | Any]\n</code></pre> <p>Returns a dict of the form data from a Slack view submission.</p> Source code in <code>src/firefighter/slack/views/modals/base_modal/form_utils.py</code> <pre><code>def slack_view_submission_to_dict(\n    body: dict[str, Any | str],\n) -&gt; dict[str, str | Any]:\n    \"\"\"Returns a dict of the form data from a Slack view submission.\"\"\"\n    if body.get(\"view\"):\n        path = [\"view\", \"state\", \"values\"]\n    elif body.get(\"type\") == \"block_actions\":\n        path = [\"state\", \"values\"]\n    else:\n        logger.warning(\"Unknown Slack view submission format: %s\", body)\n        path = [\"view\", \"state\", \"values\"]\n\n    values: dict[str, dict[str, Any]] = get_in(body, path)\n    data: dict[str, str | Any] = {}\n    if not isinstance(values, dict):\n        raise TypeError(\"Expected a values dict in the body\")\n\n    # We expect only one action per input\n    # The action_id must be block_id or block_id___{whatever}\n    # We support block_id and block_id___{whatever} because Slack won't update the value in the user's form if the action_id is the same\n    # Hence, we need to add a unique identifier to the action_id to force Slack to update the value, replacing the input by another one\n    for block in values.values():\n        if len(block) == 0:\n            continue\n        action_id: str = next(iter(block.keys()))\n        action_id_stripped = action_id.split(\"___\", 1)[0].strip()\n        input_field = block.get(action_id)\n        if not isinstance(input_field, dict):\n            raise TypeError(\"Expected input_field to be a dict\")\n\n        if input_field.get(\"type\") == \"plain_text_input\":\n            data[action_id_stripped] = input_field.get(\"value\")\n        elif input_field.get(\"type\") == \"datetimepicker\":\n            data[action_id_stripped] = (\n                datetime.fromtimestamp(\n                    cast(\"float\", input_field.get(\"selected_date_time\")),\n                    tz=TZ,\n                )\n                if input_field.get(\"selected_date_time\")\n                else None\n            )\n        elif input_field.get(\"type\") == \"static_select\":\n            data[action_id_stripped] = get_in(input_field, [\"selected_option\", \"value\"])\n        elif input_field.get(\"type\") == \"multi_static_select\":\n            # Handle multiple selections - return list of values\n            selected_options = input_field.get(\"selected_options\", [])\n            data[action_id_stripped] = [opt.get(\"value\") for opt in selected_options]\n        elif input_field.get(\"type\") == \"checkboxes\":\n            # Handle checkboxes (BooleanField) - return True if \"True\" is in selected_options\n            selected_options = input_field.get(\"selected_options\", [])\n            # For BooleanField, we have only one option with value=\"True\"\n            data[action_id_stripped] = any(opt.get(\"value\") == \"True\" for opt in selected_options)\n        elif input_field.get(\"type\") == \"users_select\":\n            user_id = get_in(\n                input_field,\n                [\n                    \"selected_user\",\n                ],\n            )\n            user_obj = (\n                SlackUser.objects.get_user_by_slack_id(slack_id=user_id)\n                if user_id\n                else None\n            )\n            data[action_id_stripped] = user_obj.id if user_obj else None\n    return data\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.modals.close","title":"close","text":"<p>Classes:</p> <ul> <li> <code>CloseModal</code>           \u2013            </li> </ul>"},{"location":"reference/slack/#firefighter.slack.views.modals.close.CloseModal","title":"CloseModal","text":"<pre><code>CloseModal()\n</code></pre> <p>               Bases: <code>IncidentSelectableModalMixin</code>, <code>ModalForm[CloseIncidentFormSlack]</code></p> <p>Methods:</p> <ul> <li> <code>handle_modal_fn</code>             \u2013              <p>Handle response from /incident close modal.</p> </li> </ul> Source code in <code>src/firefighter/slack/views/modals/base_modal/base.py</code> <pre><code>def __init__(self) -&gt; None:\n    if self.handle_modal_fn is not None:\n        self.handler_fn_args = inspect.getfullargspec(self.handle_modal_fn).args\n        if len(self.handler_fn_args) &gt; 0 and self.handler_fn_args[0] in {\n            \"self\",\n            \"cls\",\n        }:\n            self.handler_fn_args.pop(0)\n\n    self.builder_fn_args = inspect.getfullargspec(self.build_modal_fn).args\n    if len(self.builder_fn_args) &gt; 0 and self.builder_fn_args[0] in {\"self\", \"cls\"}:\n        self.builder_fn_args.pop(0)\n\n    self._register_actions_shortcuts()\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.modals.close.CloseModal.handle_modal_fn","title":"handle_modal_fn","text":"<pre><code>handle_modal_fn(ack: Ack, body: dict[str, Any], incident: Incident, user: User) -&gt; bool | None\n</code></pre> <p>Handle response from /incident close modal.</p> Source code in <code>src/firefighter/slack/views/modals/close.py</code> <pre><code>def handle_modal_fn(  # type: ignore[override]\n    self, ack: Ack, body: dict[str, Any], incident: Incident, user: User\n) -&gt;  bool | None:\n    \"\"\"Handle response from /incident close modal.\"\"\"\n    # Check if this should be handled by closure reason modal\n    closure_result = handle_close_modal_callback(ack, body, incident, user)\n    if closure_result is not None:\n        return closure_result\n    slack_form = self.handle_form_errors(\n        ack, body, forms_kwargs={\"initial\": self._get_initial_form_values(incident)}\n    )\n    if slack_form is None:\n        return None\n    form = slack_form.form\n    # If fields haven't changed, don't include them in the update.\n    update_kwargs = {}\n    for changed_key in form.changed_data:\n        if changed_key == \"incident_category\":\n            update_kwargs[\"incident_category_id\"] = form.cleaned_data[changed_key].id\n        if changed_key in {\"description\", \"title\", \"message\"}:\n            update_kwargs[changed_key] = form.cleaned_data[changed_key]\n    # Check can close\n    can_close, reasons = incident.can_be_closed\n    if not can_close:\n        logger.warning(\n            f\"Tried to close an incident that can't be closed yet! Aborting. Incident #{incident.id}. Reasons: {reasons}\"\n        )\n        respond(\n            body=body,\n            text=f\"It looks like this incident #{incident.id} could not be closed.\\nReasons: {reasons}.\\nPlease tell @pulse (#tech-pe-pulse) if you think this is an error.\",\n        )\n        return False\n    self._trigger_incident_workflow(incident, user, update_kwargs)\n    return None\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.modals.closure_reason","title":"closure_reason","text":"<p>Classes:</p> <ul> <li> <code>ClosureReasonModal</code>           \u2013            <p>Modal for closing an incident with a mandatory reason from early statuses.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.views.modals.closure_reason.ClosureReasonModal","title":"ClosureReasonModal","text":"<pre><code>ClosureReasonModal()\n</code></pre> <p>               Bases: <code>IncidentSelectableModalMixin</code>, <code>SlackModal</code></p> <p>Modal for closing an incident with a mandatory reason from early statuses.</p> <p>Methods:</p> <ul> <li> <code>build_modal_fn</code>             \u2013              <p>Build the closure reason modal.</p> </li> <li> <code>handle_modal_fn</code>             \u2013              <p>Handle the closure reason modal submission.</p> </li> </ul> Source code in <code>src/firefighter/slack/views/modals/base_modal/base.py</code> <pre><code>def __init__(self) -&gt; None:\n    if self.handle_modal_fn is not None:\n        self.handler_fn_args = inspect.getfullargspec(self.handle_modal_fn).args\n        if len(self.handler_fn_args) &gt; 0 and self.handler_fn_args[0] in {\n            \"self\",\n            \"cls\",\n        }:\n            self.handler_fn_args.pop(0)\n\n    self.builder_fn_args = inspect.getfullargspec(self.build_modal_fn).args\n    if len(self.builder_fn_args) &gt; 0 and self.builder_fn_args[0] in {\"self\", \"cls\"}:\n        self.builder_fn_args.pop(0)\n\n    self._register_actions_shortcuts()\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.modals.closure_reason.ClosureReasonModal.build_modal_fn","title":"build_modal_fn","text":"<pre><code>build_modal_fn(body: dict[str, Any], incident: Incident, **kwargs: Any) -&gt; View\n</code></pre> <p>Build the closure reason modal.</p> Source code in <code>src/firefighter/slack/views/modals/closure_reason.py</code> <pre><code>def build_modal_fn(\n    self, body: dict[str, Any], incident: Incident, **kwargs: Any  # noqa: ARG002\n) -&gt; View:\n    \"\"\"Build the closure reason modal.\"\"\"\n    # Build closure reason options (exclude RESOLVED)\n    closure_options = [\n        Option(\n            value=choice[0],\n            label=choice[1],\n        )\n        for choice in ClosureReason.choices\n        if choice[0] != ClosureReason.RESOLVED\n    ]\n\n    blocks: list[Block] = [\n        SectionBlock(\n            text=f\"*Closure Reason Required for Incident #{incident.id}*\\n_{incident.title}_\"\n        ),\n        ContextBlock(\n            elements=[\n                MarkdownTextObject(\n                    text=f\"\u26a0\ufe0f This incident is currently in *{incident.status.label}* status.\\nA closure reason is required to close incidents from this status.\"\n                )\n            ]\n        ),\n        DividerBlock(),\n        InputBlock(\n            block_id=\"closure_reason\",\n            label=\"Closure Reason\",\n            element=StaticSelectElement(\n                action_id=\"select_closure_reason\",\n                options=closure_options,\n                placeholder=\"Select a reason...\",\n            ),\n            hint=\"Why is this incident being closed directly?\",\n        ),\n        InputBlock(\n            block_id=\"closure_reference\",\n            label=\"Reference (optional)\",\n            element=PlainTextInputElement(\n                action_id=\"input_closure_reference\",\n                placeholder=\"e.g., #1234 or https://...\",\n                max_length=100,\n            ),\n            hint=\"Related incident ID or external reference\",\n            optional=True,\n        ),\n        InputBlock(\n            block_id=\"closure_message\",\n            label=\"Closure Message\",\n            element=PlainTextInputElement(\n                action_id=\"input_closure_message\",\n                multiline=True,\n                placeholder=\"Brief explanation of why this incident is being closed...\",\n            ),\n            hint=\"This message will be added to the incident timeline\",\n        ),\n        slack_block_separator(),\n        slack_block_footer(),\n    ]\n\n    return View(\n        type=\"modal\",\n        title=f\"Close #{incident.id}\"[:24],\n        submit=\"Close Incident\",\n        callback_id=self.callback_id,\n        private_metadata=str(incident.id),\n        blocks=blocks,\n    )\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.modals.closure_reason.ClosureReasonModal.handle_modal_fn","title":"handle_modal_fn","text":"<pre><code>handle_modal_fn(ack: Ack, body: dict[str, Any], incident: Incident, user: User) -&gt; bool | None\n</code></pre> <p>Handle the closure reason modal submission.</p> Source code in <code>src/firefighter/slack/views/modals/closure_reason.py</code> <pre><code>def handle_modal_fn(  # type: ignore[override]\n    self, ack: Ack, body: dict[str, Any], incident: Incident, user: User\n) -&gt; bool | None:\n    \"\"\"Handle the closure reason modal submission.\"\"\"\n    # Clear ALL modals in the stack (not just this one)\n    # This ensures the underlying \"Update Status\" modal is also closed\n    ack(response_action=\"clear\")\n\n    # Extract form values\n    state_values = body[\"view\"][\"state\"][\"values\"]\n    closure_reason = state_values[\"closure_reason\"][\"select_closure_reason\"][\n        \"selected_option\"\n    ][\"value\"]\n    closure_reference = (\n        state_values[\"closure_reference\"][\"input_closure_reference\"].get(\"value\", \"\")\n        or \"\"\n    )\n    message = state_values[\"closure_message\"][\"input_closure_message\"][\"value\"]\n\n    try:\n        # Update incident with closure fields\n        incident.closure_reason = closure_reason\n        incident.closure_reference = closure_reference\n        incident.save(update_fields=[\"closure_reason\", \"closure_reference\"])\n\n        # Create incident update with closure\n        incident.create_incident_update(\n            created_by=user,\n            status=IncidentStatus.CLOSED,\n            message=message,\n            event_type=\"closure_reason\",\n        )\n\n    except Exception:\n        logger.exception(\n            \"Error closing incident #%s with reason\", incident.id\n        )\n        respond(\n            body=body,\n            text=f\"\u274c Failed to close incident #{incident.id}\",\n        )\n        return False\n    else:\n        # Send confirmation message\n        try:\n            respond(\n                body=body,\n                text=(\n                    f\"\u2705 Incident #{incident.id} has been closed.\\n\"\n                    f\"*Reason:* {ClosureReason(closure_reason).label}\\n\"\n                    f\"*Message:* {message}\"\n                    + (f\"\\n*Reference:* {closure_reference}\" if closure_reference else \"\")\n                ),\n            )\n        except SlackApiError as e:\n            if e.response.get(\"error\") == \"messages_tab_disabled\":\n                logger.warning(\n                    \"Cannot send DM to user %s - messages tab disabled\",\n                    user.email,\n                )\n            else:\n                # Re-raise for other Slack API errors\n                raise\n\n        logger.info(\n            \"Incident #%s closed with reason by %s: %s\",\n            incident.id,\n            user.email,\n            closure_reason,\n        )\n        return True\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.modals.key_event_message","title":"key_event_message","text":"<p>Classes:</p> <ul> <li> <code>KeyEvents</code>           \u2013            </li> </ul>"},{"location":"reference/slack/#firefighter.slack.views.modals.key_event_message.KeyEvents","title":"KeyEvents","text":"<pre><code>KeyEvents()\n</code></pre> <p>               Bases: <code>MessageForm[IncidentUpdateKeyEventsForm]</code></p> <p>Methods:</p> <ul> <li> <code>handle_modal_fn</code>             \u2013              <p>Handle the time and date inputs for the key events.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>open_shortcut</code>               (<code>str | None</code>)           \u2013            <p>Slack shortcut to open the modal.</p> </li> </ul> Source code in <code>src/firefighter/slack/views/modals/base_modal/base.py</code> <pre><code>def __init__(self) -&gt; None:\n    if self.handle_modal_fn is not None:\n        self.handler_fn_args = inspect.getfullargspec(self.handle_modal_fn).args\n        if len(self.handler_fn_args) &gt; 0 and self.handler_fn_args[0] in {\n            \"self\",\n            \"cls\",\n        }:\n            self.handler_fn_args.pop(0)\n\n    self.builder_fn_args = inspect.getfullargspec(self.build_modal_fn).args\n    if len(self.builder_fn_args) &gt; 0 and self.builder_fn_args[0] in {\"self\", \"cls\"}:\n        self.builder_fn_args.pop(0)\n\n    self._register_actions_shortcuts()\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.modals.key_event_message.KeyEvents.open_shortcut","title":"open_shortcut  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>open_shortcut: str | None = None\n</code></pre> <p>Slack shortcut to open the modal.</p>"},{"location":"reference/slack/#firefighter.slack.views.modals.key_event_message.KeyEvents.handle_modal_fn","title":"handle_modal_fn","text":"<pre><code>handle_modal_fn(ack: Ack, body: dict[str, Any], user: User, incident: Incident) -&gt; None\n</code></pre> <p>Handle the time and date inputs for the key events.</p> Source code in <code>src/firefighter/slack/views/modals/key_event_message.py</code> <pre><code>def handle_modal_fn(  # type: ignore[override]\n    self, ack: Ack, body: dict[str, Any], user: User, incident: Incident\n) -&gt; None:\n    \"\"\"Handle the time and date inputs for the key events.\"\"\"\n    logger.debug(body)\n\n    slack_form: SlackForm[IncidentUpdateKeyEventsForm] | None = (\n        self.handle_form_errors(\n            ack,\n            body,\n            forms_kwargs={\n                \"incident\": incident,\n                \"user\": user,\n            },\n        )\n    )\n    form = slack_form.form if slack_form else None\n\n    if form is None:\n        logger.warning(\"Form is None, skipping save\")\n        return\n    if len(form.errors) &gt; 0:\n        self.update_with_form()\n        return\n    self.form = form\n    self.form.save()\n    incident.compute_metrics()\n\n    self.update_with_form()\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.modals.open","title":"open","text":"<p>Classes:</p> <ul> <li> <code>OpenModal</code>           \u2013            </li> </ul>"},{"location":"reference/slack/#firefighter.slack.views.modals.open.OpenModal","title":"OpenModal","text":"<pre><code>OpenModal()\n</code></pre> <p>               Bases: <code>SlackModal</code></p> <p>Methods:</p> <ul> <li> <code>get_details_modal_form_class</code>             \u2013              <p>Get the details modal form class based on the incident type.</p> </li> <li> <code>handle_modal_fn</code>             \u2013              <p>Handle response from /incident open modal.</p> </li> </ul> Source code in <code>src/firefighter/slack/views/modals/base_modal/base.py</code> <pre><code>def __init__(self) -&gt; None:\n    if self.handle_modal_fn is not None:\n        self.handler_fn_args = inspect.getfullargspec(self.handle_modal_fn).args\n        if len(self.handler_fn_args) &gt; 0 and self.handler_fn_args[0] in {\n            \"self\",\n            \"cls\",\n        }:\n            self.handler_fn_args.pop(0)\n\n    self.builder_fn_args = inspect.getfullargspec(self.build_modal_fn).args\n    if len(self.builder_fn_args) &gt; 0 and self.builder_fn_args[0] in {\"self\", \"cls\"}:\n        self.builder_fn_args.pop(0)\n\n    self._register_actions_shortcuts()\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.modals.open.OpenModal.get_details_modal_form_class","title":"get_details_modal_form_class  <code>staticmethod</code>","text":"<pre><code>get_details_modal_form_class(open_incident_context: OpeningData, incident_type_value: str | None) -&gt; type[SetIncidentDetails[Any]] | None\n</code></pre> <p>Get the details modal form class based on the incident type.</p> <p>Returns None if no incident type is selected.</p> Source code in <code>src/firefighter/slack/views/modals/open.py</code> <pre><code>@staticmethod\ndef get_details_modal_form_class(\n    open_incident_context: OpeningData,\n    incident_type_value: str | None,\n) -&gt; type[SetIncidentDetails[Any]] | None:\n    \"\"\"Get the details modal form class based on the incident type.\n\n    Returns None if no incident type is selected.\n    \"\"\"\n    response_type = open_incident_context.get(\"response_type\")\n    if response_type is None:\n        return None\n    incident_types = INCIDENT_TYPES.get(response_type)\n    if incident_types and len(incident_types) == 1:\n        return incident_types[next(iter(incident_types.keys()))].get(\"slack_form\")\n    if incident_types and incident_type_value is not None:\n        return incident_types[incident_type_value].get(\"slack_form\")\n    # Fallback for \"normal\" response type when no specific incident type is selected\n    if response_type == \"normal\" and incident_types:\n        return incident_types[next(iter(incident_types.keys()))].get(\"slack_form\")\n    logger.debug(\n        f\"No incident type found for {open_incident_context}. No fallback.\"\n    )\n    return None\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.modals.open.OpenModal.handle_modal_fn","title":"handle_modal_fn","text":"<pre><code>handle_modal_fn(ack: Ack, body: dict[str, Any], user: User)\n</code></pre> <p>Handle response from /incident open modal.</p> Source code in <code>src/firefighter/slack/views/modals/open.py</code> <pre><code>def handle_modal_fn(  # type: ignore\n    self,\n    ack: Ack,\n    body: dict[str, Any],\n    user: User,\n):\n    \"\"\"Handle response from /incident open modal.\"\"\"\n    data: OpeningData = json.loads(body[\"view\"][\"private_metadata\"])\n\n    details_form_data_raw = data.get(\"details_form_data\", {})\n\n    incident_type_value: str | None = data.get(\"incident_type\", None)\n\n    details_form_modal_class = self.get_details_modal_form_class(\n        data, incident_type_value\n    )\n    if details_form_modal_class:\n        details_form_class: type[CreateIncidentFormBase] = (\n            details_form_modal_class.form_class\n        )\n        if details_form_class:\n            # Pass impacts_data and response_type to form if it supports them (UnifiedIncidentForm)\n            import inspect  # noqa: PLC0415\n            init_params = inspect.signature(details_form_class.__init__).parameters\n            form_kwargs: dict[str, Any] = {}\n            if \"impacts_data\" in init_params:\n                form_kwargs[\"impacts_data\"] = data.get(\"impact_form_data\") or {}\n            if \"response_type\" in init_params:\n                form_kwargs[\"response_type\"] = data.get(\"response_type\", \"critical\")\n\n            details_form: CreateIncidentFormBase = details_form_class(\n                details_form_data_raw, **form_kwargs\n            )\n            details_form.is_valid()\n            ack()\n            try:\n                if hasattr(details_form, \"trigger_incident_workflow\") and callable(\n                    details_form.trigger_incident_workflow\n                ):\n                    # Pass response_type to trigger_incident_workflow if it accepts it\n                    trigger_params = inspect.signature(details_form.trigger_incident_workflow).parameters\n                    workflow_kwargs: dict[str, Any] = {\n                        \"creator\": user,\n                        \"impacts_data\": data.get(\"impact_form_data\") or {},\n                    }\n                    if \"response_type\" in trigger_params:\n                        workflow_kwargs[\"response_type\"] = data.get(\"response_type\", \"critical\")\n\n                    details_form.trigger_incident_workflow(**workflow_kwargs)\n            except:  # noqa: E722\n                logger.exception(\"Error triggering incident workflow\")\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.modals.opening","title":"opening","text":"<p>Modules:</p> <ul> <li> <code>details</code>           \u2013            </li> <li> <code>select_impact</code>           \u2013            </li> <li> <code>set_details</code>           \u2013            </li> </ul>"},{"location":"reference/slack/#firefighter.slack.views.modals.opening.details","title":"details","text":"<p>Modules:</p> <ul> <li> <code>unified</code>           \u2013            </li> </ul>"},{"location":"reference/slack/#firefighter.slack.views.modals.opening.details.unified","title":"unified","text":"<p>Classes:</p> <ul> <li> <code>OpeningUnifiedModal</code>           \u2013            <p>Unified modal for all incident types (P1-P5).</p> </li> <li> <code>UnifiedIncidentFormSlack</code>           \u2013            <p>Slack version of UnifiedIncidentForm with Slack-specific field configurations.</p> </li> </ul> <code></code> OpeningUnifiedModal \u00a4 <pre><code>OpeningUnifiedModal()\n</code></pre> <p>               Bases: <code>SetIncidentDetails[UnifiedIncidentFormSlack]</code></p> <p>Unified modal for all incident types (P1-P5).</p> <p>Methods:</p> <ul> <li> <code>build_modal_fn</code>             \u2013              <p>Build modal with impact-aware form.</p> </li> <li> <code>get_form_class</code>             \u2013              <p>Return a SlackForm wrapper that passes impacts_data and response_type.</p> </li> <li> <code>handle_modal_fn</code>             \u2013              <p>Handle response from /incident open modal.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>open_shortcut</code>               (<code>str | None</code>)           \u2013            <p>Slack shortcut to open the modal.</p> </li> </ul> Source code in <code>src/firefighter/slack/views/modals/opening/set_details.py</code> <pre><code>def __init__(self) -&gt; None:\n    if hasattr(self, \"id\"):\n        self.push_action = f\"push_{self.id}\"\n    super().__init__()\n</code></pre> <code></code> open_shortcut <code>class-attribute</code> <code>instance-attribute</code> \u00a4 <pre><code>open_shortcut: str | None = None\n</code></pre> <p>Slack shortcut to open the modal.</p> <code></code> build_modal_fn \u00a4 <pre><code>build_modal_fn(open_incident_context: OpeningData | None = None, **kwargs: Any) -&gt; Any\n</code></pre> <p>Build modal with impact-aware form.</p> Source code in <code>src/firefighter/slack/views/modals/opening/details/unified.py</code> <pre><code>def build_modal_fn(\n    self, open_incident_context: OpeningData | None = None, **kwargs: Any\n) -&gt; Any:\n    \"\"\"Build modal with impact-aware form.\"\"\"\n    # Extract impacts and response type from context\n    if open_incident_context is None:\n        open_incident_context = OpeningData()\n\n    response_type = open_incident_context.get(\"response_type\", \"critical\")\n\n    # Store in initial data so form can access it\n    details_form_data = open_incident_context.get(\"details_form_data\")\n    if details_form_data is None:\n        details_form_data = {}\n    details_form_data[\"response_type\"] = response_type\n\n    # Update context\n    open_incident_context[\"details_form_data\"] = details_form_data\n\n    # Store context for get_form_class in kwargs\n    # Call parent build_modal_fn with open_incident_context in kwargs\n    return super().build_modal_fn(open_incident_context=open_incident_context, **kwargs)\n</code></pre> <code></code> get_form_class \u00a4 <pre><code>get_form_class() -&gt; Any\n</code></pre> <p>Return a SlackForm wrapper that passes impacts_data and response_type.</p> Source code in <code>src/firefighter/slack/views/modals/opening/details/unified.py</code> <pre><code>def get_form_class(self) -&gt; Any:\n    \"\"\"Return a SlackForm wrapper that passes impacts_data and response_type.\"\"\"\n    form_class = self.form_class\n\n    # Create a custom form class that accepts our parameters\n    class ContextAwareForm(form_class):  # type: ignore\n        def __init__(self, *args: Any, **kwargs: Any) -&gt; None:\n            # Extract context from kwargs\n            open_incident_context = kwargs.pop(\"open_incident_context\", None)\n            if open_incident_context:\n                kwargs[\"impacts_data\"] = open_incident_context.get(\"impact_form_data\", {})\n                kwargs[\"response_type\"] = open_incident_context.get(\"response_type\", \"critical\")\n            super().__init__(*args, **kwargs)\n\n    # Return SlackForm wrapping the context-aware form\n    return SlackForm(ContextAwareForm)\n</code></pre> <code></code> handle_modal_fn \u00a4 <pre><code>handle_modal_fn(ack: Ack, body: dict[str, Any], user: User | None = None)\n</code></pre> <p>Handle response from /incident open modal.</p> Source code in <code>src/firefighter/slack/views/modals/opening/set_details.py</code> <pre><code>def handle_modal_fn(  # type: ignore\n    self,\n    ack: Ack,\n    body: dict[str, Any],\n    user: User | None = None,\n):\n    \"\"\"Handle response from /incident open modal.\"\"\"\n    private_metadata: dict[str, Any] = json.loads(\n        body.get(\"view\", {}).get(\"private_metadata\", {})\n    )\n    priority = private_metadata.get(\"details_form_data\", {}).get(\"priority\", None)\n    if priority is not None:\n        priority = Priority.objects.get(pk=priority)\n\n    slack_form = self.get_form_class()(\n        data={**slack_view_submission_to_dict(body), \"priority\": priority},\n        open_incident_context=private_metadata,\n    )\n    form: T = slack_form.form\n    if form.is_valid():\n        ack()\n        skip_form = False\n    else:\n        ack(\n            response_action=\"errors\",\n            errors={\n                k: self._concat_validation_errors_msg(v)\n                for k, v in form.errors.as_data().items()\n            },\n        )\n        skip_form = True\n\n    if skip_form:\n        return\n    # ruff: noqa: PLC0415\n    from firefighter.slack.views.modals.open import modal_open\n\n    if \"priority\" in private_metadata and isinstance(\n        private_metadata[\"priority\"], str\n    ):\n        private_metadata[\"priority\"] = Priority.objects.get(\n            pk=private_metadata[\"priority\"]\n        )\n    data = OpeningData(\n        details_form_data=cast(\"dict[str, Any]\", form.data),\n        impact_form_data=private_metadata.get(\"impact_form_data\"),\n        incident_type=private_metadata.get(\"incident_type\"),\n        response_type=private_metadata.get(\"response_type\"),\n        priority=private_metadata.get(\"priority\"),\n    )\n    view = modal_open.build_modal_fn(open_incident_context=data, user=user)\n    view.private_metadata = json.dumps(data, cls=SlackFormJSONEncoder)\n\n    update_modal(\n        view=view,\n        trigger_id=get_in(body, [\"trigger_id\"]),\n        view_id=get_in(body, [\"view\", \"root_view_id\"]),\n    )\n</code></pre> <code></code> UnifiedIncidentFormSlack \u00a4 <pre><code>UnifiedIncidentFormSlack(*args: Any, impacts_data: dict[str, Any] | None = None, response_type: str = 'critical', **kwargs: Any)\n</code></pre> <p>               Bases: <code>UnifiedIncidentForm</code></p> <p>Slack version of UnifiedIncidentForm with Slack-specific field configurations.</p> <p>Parameters:</p> <ul> <li> <code>*args</code>               (<code>Any</code>, default:                   <code>()</code> )           \u2013            <p>Positional arguments passed to parent form</p> </li> <li> <code>impacts_data</code>               (<code>dict[str, Any] | None</code>, default:                   <code>None</code> )           \u2013            <p>Dictionary of impact selections</p> </li> <li> <code>response_type</code>               (<code>str</code>, default:                   <code>'critical'</code> )           \u2013            <p>\"critical\" or \"normal\"</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Keyword arguments passed to parent form</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>clean</code>             \u2013              <p>Custom validation based on response type and impacts.</p> </li> <li> <code>get_visible_fields_for_impacts</code>             \u2013              <p>Determine which fields should be visible based on impacts and response type.</p> </li> <li> <code>trigger_incident_workflow</code>             \u2013              <p>Trigger the appropriate incident workflow based on response type.</p> </li> </ul> Source code in <code>src/firefighter/slack/views/modals/opening/details/unified.py</code> <pre><code>def __init__(\n    self,\n    *args: Any,\n    impacts_data: dict[str, Any] | None = None,\n    response_type: str = \"critical\",\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"Initialize form with impact-based field visibility.\n\n    Args:\n        *args: Positional arguments passed to parent form\n        impacts_data: Dictionary of impact selections\n        response_type: \"critical\" or \"normal\"\n        **kwargs: Keyword arguments passed to parent form\n    \"\"\"\n    super().__init__(*args, **kwargs)\n\n    # Store for later use\n    self._impacts_data = impacts_data or {}\n    self._response_type = response_type\n\n    # Make priority field hidden\n    self.fields[\"priority\"].widget = forms.HiddenInput()\n\n    # Conditionally hide fields based on impacts and response_type\n    self._configure_field_visibility()\n</code></pre> <code></code> clean \u00a4 <pre><code>clean() -&gt; dict[str, Any]\n</code></pre> <p>Custom validation based on response type and impacts.</p> Source code in <code>src/firefighter/incidents/forms/unified_incident.py</code> <pre><code>def clean(self) -&gt; dict[str, Any]:\n    \"\"\"Custom validation based on response type and impacts.\"\"\"\n    cleaned_data = super().clean()\n    if cleaned_data is None:\n        cleaned_data = {}\n\n    # Get response_type from initial data if available\n    initial = self.initial or {}\n    response_type = initial.get(\"response_type\", \"critical\")\n\n    # Validate suggested_team_routing is required for normal incidents\n    if response_type == \"normal\" and not cleaned_data.get(\"suggested_team_routing\"):\n        self.add_error(\n            \"suggested_team_routing\",\n            \"Feature Team is required for P4/P5 incidents\",\n        )\n\n    return cleaned_data\n</code></pre> <code></code> get_visible_fields_for_impacts \u00a4 <pre><code>get_visible_fields_for_impacts(impacts_data: dict[str, ImpactLevel | str], response_type: str) -&gt; list[str]\n</code></pre> <p>Determine which fields should be visible based on impacts and response type.</p> <p>Parameters:</p> <ul> <li> <code>impacts_data</code>               (<code>dict[str, ImpactLevel | str]</code>)           \u2013            <p>Dictionary of impact type \u2192 impact level (ImpactLevel object or UUID string)</p> </li> <li> <code>response_type</code>               (<code>str</code>)           \u2013            <p>\"critical\" or \"normal\"</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>List of field names that should be visible</p> </li> </ul> Source code in <code>src/firefighter/incidents/forms/unified_incident.py</code> <pre><code>def get_visible_fields_for_impacts(\n    self, impacts_data: dict[str, ImpactLevel | str], response_type: str\n) -&gt; list[str]:\n    \"\"\"Determine which fields should be visible based on impacts and response type.\n\n    Args:\n        impacts_data: Dictionary of impact type \u2192 impact level (ImpactLevel object or UUID string)\n        response_type: \"critical\" or \"normal\"\n\n    Returns:\n        List of field names that should be visible\n    \"\"\"\n    visible_fields = [\n        \"title\",\n        \"description\",\n        \"incident_category\",\n        \"environment\",\n        \"platform\",\n        \"priority\",\n    ]\n\n    # Add suggested_team_routing for normal incidents (P4-P5)\n    if response_type == \"normal\":\n        visible_fields.append(\"suggested_team_routing\")\n\n    # Check impact selections\n    customer_impact = None\n    seller_impact = None\n\n    for field_name, impact_level in impacts_data.items():\n        if \"customers_impact\" in field_name:\n            customer_impact = impact_level\n        elif \"sellers_impact\" in field_name:\n            seller_impact = impact_level\n\n    # Helper to check if impact is not NONE\n    def has_impact(impact: ImpactLevel | str | None) -&gt; bool:\n        if impact is None:\n            return False\n\n        # If it's a UUID string, fetch the ImpactLevel from database\n        if isinstance(impact, str):\n            from firefighter.incidents.models.impact import (  # noqa: PLC0415\n                ImpactLevel as ImpactLevelModel,\n            )\n\n            try:\n                impact_obj = ImpactLevelModel.objects.get(id=impact)\n            except ImpactLevelModel.DoesNotExist:\n                return False\n            else:\n                return impact_obj.value != LevelChoices.NONE.value\n\n        # Otherwise it's an ImpactLevel object\n        return impact.value != LevelChoices.NONE.value\n\n    # Add customer-specific fields\n    if has_impact(customer_impact):\n        visible_fields.append(\"zendesk_ticket_id\")\n\n    # Add seller-specific fields\n    if has_impact(seller_impact):\n        visible_fields.extend([\n            \"seller_contract_id\",\n            \"is_key_account\",\n            \"is_seller_in_golden_list\",\n            \"zoho_desk_ticket_id\",\n        ])\n\n    return visible_fields\n</code></pre> <code></code> trigger_incident_workflow \u00a4 <pre><code>trigger_incident_workflow(\n    creator: User, impacts_data: dict[str, ImpactLevel], response_type: str = \"critical\", *args: Any, **kwargs: Any\n) -&gt; None\n</code></pre> <p>Trigger the appropriate incident workflow based on response type.</p> <p>Parameters:</p> <ul> <li> <code>creator</code>               (<code>User</code>)           \u2013            <p>User creating the incident</p> </li> <li> <code>impacts_data</code>               (<code>dict[str, ImpactLevel]</code>)           \u2013            <p>Dictionary of impact data</p> </li> <li> <code>response_type</code>               (<code>str</code>, default:                   <code>'critical'</code> )           \u2013            <p>\"critical\" or \"normal\"</p> </li> <li> <code>*args</code>               (<code>Any</code>, default:                   <code>()</code> )           \u2013            <p>Additional positional arguments (unused)</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Additional keyword arguments (unused)</p> </li> </ul> Source code in <code>src/firefighter/incidents/forms/unified_incident.py</code> <pre><code>def trigger_incident_workflow(\n    self,\n    creator: User,\n    impacts_data: dict[str, ImpactLevel],\n    response_type: str = \"critical\",\n    *args: Any,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"Trigger the appropriate incident workflow based on response type.\n\n    Args:\n        creator: User creating the incident\n        impacts_data: Dictionary of impact data\n        response_type: \"critical\" or \"normal\"\n        *args: Additional positional arguments (unused)\n        **kwargs: Additional keyword arguments (unused)\n    \"\"\"\n    if response_type == \"critical\":\n        self._trigger_critical_incident_workflow(creator, impacts_data)\n    else:\n        self._trigger_normal_incident_workflow(creator, impacts_data)\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.modals.opening.select_impact","title":"select_impact","text":"<p>Classes:</p> <ul> <li> <code>SelectImpactModal</code>           \u2013            <p>TODO: The detailed impacts selected should be saved on the incident.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.views.modals.opening.select_impact.SelectImpactModal","title":"SelectImpactModal","text":"<pre><code>SelectImpactModal()\n</code></pre> <p>               Bases: <code>IncidentSelectableModalMixin</code>, <code>ModalForm[SelectImpactFormSlack]</code></p> <p>TODO: The detailed impacts selected should be saved on the incident.</p> Source code in <code>src/firefighter/slack/views/modals/base_modal/base.py</code> <pre><code>def __init__(self) -&gt; None:\n    if self.handle_modal_fn is not None:\n        self.handler_fn_args = inspect.getfullargspec(self.handle_modal_fn).args\n        if len(self.handler_fn_args) &gt; 0 and self.handler_fn_args[0] in {\n            \"self\",\n            \"cls\",\n        }:\n            self.handler_fn_args.pop(0)\n\n    self.builder_fn_args = inspect.getfullargspec(self.build_modal_fn).args\n    if len(self.builder_fn_args) &gt; 0 and self.builder_fn_args[0] in {\"self\", \"cls\"}:\n        self.builder_fn_args.pop(0)\n\n    self._register_actions_shortcuts()\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.modals.opening.set_details","title":"set_details","text":"<p>Classes:</p> <ul> <li> <code>SetIncidentDetails</code>           \u2013            </li> </ul>"},{"location":"reference/slack/#firefighter.slack.views.modals.opening.set_details.SetIncidentDetails","title":"SetIncidentDetails","text":"<pre><code>SetIncidentDetails()\n</code></pre> <p>               Bases: <code>ModalForm[T]</code>, <code>Generic[T]</code></p> <p>Methods:</p> <ul> <li> <code>handle_modal_fn</code>             \u2013              <p>Handle response from /incident open modal.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>open_shortcut</code>               (<code>str | None</code>)           \u2013            <p>Slack shortcut to open the modal.</p> </li> </ul> Source code in <code>src/firefighter/slack/views/modals/opening/set_details.py</code> <pre><code>def __init__(self) -&gt; None:\n    if hasattr(self, \"id\"):\n        self.push_action = f\"push_{self.id}\"\n    super().__init__()\n</code></pre> <code></code> open_shortcut <code>class-attribute</code> <code>instance-attribute</code> \u00a4 <pre><code>open_shortcut: str | None = None\n</code></pre> <p>Slack shortcut to open the modal.</p> <code></code> handle_modal_fn \u00a4 <pre><code>handle_modal_fn(ack: Ack, body: dict[str, Any], user: User | None = None)\n</code></pre> <p>Handle response from /incident open modal.</p> Source code in <code>src/firefighter/slack/views/modals/opening/set_details.py</code> <pre><code>def handle_modal_fn(  # type: ignore\n    self,\n    ack: Ack,\n    body: dict[str, Any],\n    user: User | None = None,\n):\n    \"\"\"Handle response from /incident open modal.\"\"\"\n    private_metadata: dict[str, Any] = json.loads(\n        body.get(\"view\", {}).get(\"private_metadata\", {})\n    )\n    priority = private_metadata.get(\"details_form_data\", {}).get(\"priority\", None)\n    if priority is not None:\n        priority = Priority.objects.get(pk=priority)\n\n    slack_form = self.get_form_class()(\n        data={**slack_view_submission_to_dict(body), \"priority\": priority},\n        open_incident_context=private_metadata,\n    )\n    form: T = slack_form.form\n    if form.is_valid():\n        ack()\n        skip_form = False\n    else:\n        ack(\n            response_action=\"errors\",\n            errors={\n                k: self._concat_validation_errors_msg(v)\n                for k, v in form.errors.as_data().items()\n            },\n        )\n        skip_form = True\n\n    if skip_form:\n        return\n    # ruff: noqa: PLC0415\n    from firefighter.slack.views.modals.open import modal_open\n\n    if \"priority\" in private_metadata and isinstance(\n        private_metadata[\"priority\"], str\n    ):\n        private_metadata[\"priority\"] = Priority.objects.get(\n            pk=private_metadata[\"priority\"]\n        )\n    data = OpeningData(\n        details_form_data=cast(\"dict[str, Any]\", form.data),\n        impact_form_data=private_metadata.get(\"impact_form_data\"),\n        incident_type=private_metadata.get(\"incident_type\"),\n        response_type=private_metadata.get(\"response_type\"),\n        priority=private_metadata.get(\"priority\"),\n    )\n    view = modal_open.build_modal_fn(open_incident_context=data, user=user)\n    view.private_metadata = json.dumps(data, cls=SlackFormJSONEncoder)\n\n    update_modal(\n        view=view,\n        trigger_id=get_in(body, [\"trigger_id\"]),\n        view_id=get_in(body, [\"view\", \"root_view_id\"]),\n    )\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.modals.trigger_oncall","title":"trigger_oncall","text":"<p>Classes:</p> <ul> <li> <code>OnCallModal</code>           \u2013            </li> </ul>"},{"location":"reference/slack/#firefighter.slack.views.modals.trigger_oncall.OnCallModal","title":"OnCallModal","text":"<pre><code>OnCallModal()\n</code></pre> <p>               Bases: <code>IncidentSelectableModalMixin</code>, <code>SlackModal</code></p> <p>Methods:</p> <ul> <li> <code>build_modal_fn</code>             \u2013              <p>XXX Should get an incident ID instead of an incident.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>open_shortcut</code>               (<code>str | None</code>)           \u2013            <p>Slack shortcut to open the modal.</p> </li> </ul> Source code in <code>src/firefighter/slack/views/modals/base_modal/base.py</code> <pre><code>def __init__(self) -&gt; None:\n    if self.handle_modal_fn is not None:\n        self.handler_fn_args = inspect.getfullargspec(self.handle_modal_fn).args\n        if len(self.handler_fn_args) &gt; 0 and self.handler_fn_args[0] in {\n            \"self\",\n            \"cls\",\n        }:\n            self.handler_fn_args.pop(0)\n\n    self.builder_fn_args = inspect.getfullargspec(self.build_modal_fn).args\n    if len(self.builder_fn_args) &gt; 0 and self.builder_fn_args[0] in {\"self\", \"cls\"}:\n        self.builder_fn_args.pop(0)\n\n    self._register_actions_shortcuts()\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.modals.trigger_oncall.OnCallModal.open_shortcut","title":"open_shortcut  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>open_shortcut: str | None = None\n</code></pre> <p>Slack shortcut to open the modal.</p>"},{"location":"reference/slack/#firefighter.slack.views.modals.trigger_oncall.OnCallModal.build_modal_fn","title":"build_modal_fn","text":"<pre><code>build_modal_fn(incident: Incident, **kwargs: Any) -&gt; View\n</code></pre> <p>XXX Should get an incident ID instead of an incident.</p> Source code in <code>src/firefighter/slack/views/modals/trigger_oncall.py</code> <pre><code>def build_modal_fn(self, incident: Incident, **kwargs: Any) -&gt; View:\n    \"\"\"XXX Should get an incident ID instead of an incident.\"\"\"\n    previous_pd_incidents = PagerDutyIncident.objects.filter(\n        incident_id=incident.id\n    )\n\n    pd_services = PagerDutyService.objects.exclude(\n        pagerdutyincident__in=previous_pd_incidents,\n    ).filter(ignore=False)\n    pd_options = [Option(value=str(s.id), label=s.summary) for s in pd_services]\n\n    blocks: list[Block] = [\n        SectionBlock(\n            text=f\"You are about to trigger on-call for incident #{incident.id}. Please select the on-call line that you want to trigger.\"\n        ),\n        DividerBlock(),\n        (\n            InputBlock(\n                block_id=\"oncall_service\",\n                label=\"Select on-call line\",\n                element=RadioButtonsElement(\n                    action_id=\"select_oncall_service\", options=pd_options\n                ),\n            )\n            if len(pd_options) &gt; 0\n            else SectionBlock(\n                text=\":warning: No PagerDuty services in the database! :warning:\\nAdministrator action is needed.\"\n            )\n        ),\n    ]\n\n    if len(previous_pd_incidents) &gt; 0:\n        already_existing_text = [\n            f\"- &lt;{s.service.web_url}|{s.service.summary}&gt;: &lt;{s.web_url}|_{s.summary}_&gt;\\n\"\n            for s in previous_pd_incidents\n        ]\n        blocks.extend((\n            DividerBlock(),\n            SectionBlock(\n                text=f\":warning: There are already some on-call lines that have been triggered and can not be triggered again:\\n {''.join(already_existing_text)}\"\n            ),\n        ))\n\n    return View(\n        type=\"modal\",\n        title=\"Trigger on-call\"[:24],\n        submit=\"Trigger on-call\"[:24] if len(pd_options) &gt; 0 else None,\n        callback_id=self.callback_id,\n        private_metadata=str(incident.id),\n        blocks=blocks,\n    )\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.modals.utils","title":"utils","text":"<p>Utilities for modal handling to avoid circular imports.</p> <p>Functions:</p> <ul> <li> <code>get_close_modal_view</code>             \u2013              <p>Get the appropriate modal view for closing an incident.</p> </li> <li> <code>handle_close_modal_callback</code>             \u2013              <p>Handle modal callback, delegating to closure reason modal if needed.</p> </li> <li> <code>handle_update_status_close_request</code>             \u2013              <p>Handle update status request to close incident, showing reason modal if needed.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.views.modals.utils.get_close_modal_view","title":"get_close_modal_view","text":"<pre><code>get_close_modal_view(body: dict[str, Any], incident: Incident, **kwargs: Any) -&gt; View | None\n</code></pre> <p>Get the appropriate modal view for closing an incident.</p> <p>This function determines whether to show the closure reason modal or delegate to the normal close modal.</p> Source code in <code>src/firefighter/slack/views/modals/utils.py</code> <pre><code>def get_close_modal_view(body: dict[str, Any], incident: Incident, **kwargs: Any) -&gt; View | None:\n    \"\"\"Get the appropriate modal view for closing an incident.\n\n    This function determines whether to show the closure reason modal\n    or delegate to the normal close modal.\n    \"\"\"\n    # Check if closure reason is required\n    if UpdateStatusForm.requires_closure_reason(incident, IncidentStatus.CLOSED):\n        return modal_closure_reason.build_modal_fn(body, incident, **kwargs)\n\n    # Return None to indicate normal close modal should be used\n    return None\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.modals.utils.handle_close_modal_callback","title":"handle_close_modal_callback","text":"<pre><code>handle_close_modal_callback(ack: Any, body: dict[str, Any], incident: Incident, user: Any) -&gt; bool | None\n</code></pre> <p>Handle modal callback, delegating to closure reason modal if needed.</p> Source code in <code>src/firefighter/slack/views/modals/utils.py</code> <pre><code>def handle_close_modal_callback(ack: Any, body: dict[str, Any], incident: Incident, user: Any) -&gt; bool | None:\n    \"\"\"Handle modal callback, delegating to closure reason modal if needed.\"\"\"\n    # Check if this is a closure reason modal callback\n    if body.get(\"view\", {}).get(\"callback_id\") == \"incident_closure_reason\":\n        return modal_closure_reason.handle_modal_fn(ack, body, incident, user)\n\n    # Return None to indicate normal handling should continue\n    return None\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.modals.utils.handle_update_status_close_request","title":"handle_update_status_close_request","text":"<pre><code>handle_update_status_close_request(ack: Any, body: dict[str, Any], incident: Incident, target_status: IncidentStatus) -&gt; bool\n</code></pre> <p>Handle update status request to close incident, showing reason modal if needed.</p> <p>Returns True if the request was handled (reason modal shown), False otherwise.</p> Source code in <code>src/firefighter/slack/views/modals/utils.py</code> <pre><code>def handle_update_status_close_request(ack: Any, body: dict[str, Any], incident: Incident, target_status: IncidentStatus) -&gt; bool:\n    \"\"\"Handle update status request to close incident, showing reason modal if needed.\n\n    Returns True if the request was handled (reason modal shown), False otherwise.\n    \"\"\"\n    if (target_status == IncidentStatus.CLOSED and\n        UpdateStatusForm.requires_closure_reason(incident, target_status)):\n        # Show closure reason modal instead\n        ack(response_action=\"push\", view=modal_closure_reason.build_modal_fn(body, incident))\n        return True\n\n    return False\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.select_impact","title":"select_impact","text":"<p>Classes:</p> <ul> <li> <code>SelectImpactModal</code>           \u2013            <p>TODO: The detailed impacts selected should be saved on the incident.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.views.select_impact.SelectImpactModal","title":"SelectImpactModal","text":"<pre><code>SelectImpactModal()\n</code></pre> <p>               Bases: <code>IncidentSelectableModalMixin</code>, <code>ModalForm[SelectImpactFormSlack]</code></p> <p>TODO: The detailed impacts selected should be saved on the incident.</p> Source code in <code>src/firefighter/slack/views/modals/base_modal/base.py</code> <pre><code>def __init__(self) -&gt; None:\n    if self.handle_modal_fn is not None:\n        self.handler_fn_args = inspect.getfullargspec(self.handle_modal_fn).args\n        if len(self.handler_fn_args) &gt; 0 and self.handler_fn_args[0] in {\n            \"self\",\n            \"cls\",\n        }:\n            self.handler_fn_args.pop(0)\n\n    self.builder_fn_args = inspect.getfullargspec(self.build_modal_fn).args\n    if len(self.builder_fn_args) &gt; 0 and self.builder_fn_args[0] in {\"self\", \"cls\"}:\n        self.builder_fn_args.pop(0)\n\n    self._register_actions_shortcuts()\n</code></pre>"},{"location":"reference/slack/#firefighter.slack.views.views","title":"views","text":"<p>Classes:</p> <ul> <li> <code>SlackEventsHandler</code>           \u2013            <p>Handle all Slack events.</p> </li> </ul>"},{"location":"reference/slack/#firefighter.slack.views.views.SlackEventsHandler","title":"SlackEventsHandler","text":"<p>               Bases: <code>View</code></p> <p>Handle all Slack events.</p>"},{"location":"usage/integrations/","title":"Integrations","text":""},{"location":"usage/integrations/#pagerduty","title":"PagerDuty","text":""},{"location":"usage/integrations/#features","title":"Features","text":"<p>Expose the current on-call schedule, and allow anyone to escalate to PagerDuty.</p> <p> Exposing the on-call schedule, even for users with no PagerDuty access.</p> <p> Trigger a PagerDuty incident from the Web UI, even with no PagerDuty access.</p> <p> In a Slack conversation about an incident, anyone can escalate to PagerDuty, with <code>/incident oncall</code>.</p>"},{"location":"usage/integrations/#tasks","title":"Tasks","text":"<p>Tasks are provided to regularly sync the on-call schedules, services and users from PagerDuty, as well as a task to trigger PagerDuty incidents.</p> <p>If Confluence is enabled, there is a task to export the on-call schedule to a Confluence page set with environment variable <code>CONFLUENCE_ON_CALL_PAGE_ID</code>.</p> <p>See the available PagerDuty tasks that can be scheduled from the Back-Office.</p>"},{"location":"usage/integrations/#settings-and-configuration","title":"Settings and configuration","text":"<p>Basic configuration with environment variables.</p> <p>No Back-Office configuration.</p>"},{"location":"usage/integrations/#confluence","title":"Confluence","text":"<p>Warning</p> <p>This integration is disabled by default, and is not yet documented. It is specific to our internal use case.</p>"},{"location":"usage/integrations/#slack","title":"Slack","text":""},{"location":"usage/integrations/#features_1","title":"Features","text":"<p>Open, manage and close incidents from Slack. The whole lifecycle.</p> <p> See current incidents from Slack.</p>"},{"location":"usage/integrations/#tasks_1","title":"Tasks","text":"<p>Tasks are provided to regularly sync users, conversations, usergroups and channel members from Slack.</p> <p>See the available Slack tasks that can be scheduled from the Back-Office.</p>"},{"location":"usage/integrations/#settings-and-configuration_1","title":"Settings and configuration","text":"<p>See Slack environment variables settings.</p>"},{"location":"usage/integrations/#back-office-configuration","title":"Back-Office configuration","text":""},{"location":"usage/integrations/#conversations-tags","title":"Conversations tags","text":"<p>You can add custom tags to Slack conversations in the back-office.</p> <p>Some tags have special meaning:</p> <ul> <li><code>tech_incidents</code>: send incidents notifications to the channel</li> <li><code>dev_firefighter</code>: Where users can get help with the bot. Will be shown in <code>/incident help</code> for instance.</li> <li><code>it_deploy</code>: Where the bot send notifications for deployment freezes.</li> </ul>"},{"location":"usage/integrations/#user-group-management-in-back-office","title":"User Group Management in Back-Office","text":"<p>You can add or import user groups in the back-office.</p> <p>Hint</p> <p>When adding a usergroup in the BackOffice, you can put only its ID. The rest of the information will be fetched from Slack.</p>"},{"location":"usage/integrations/#how-users-are-invited-into-an-incident","title":"How users are invited into an incident","text":"<p>Users are invited to incidents through a system that listens for invitation requests. For critical incidents, specific user groups are automatically included in the invitation process.</p> <p>The system also checks if the incident is public or private, ensuring that only the appropriate users with Slack accounts are invited. This creates a complete list of responders from all connected platforms, making sure the right people are notified.</p>"},{"location":"usage/integrations/#custom-invitation-strategy","title":"Custom Invitation Strategy","text":"<p>For users looking to create a custom invitation strategy, here\u2019s what you need to know:</p> <ul> <li>Django Signals: We use Django signals to manage invitations. You can refer to the Django signals documentation for more information.</li> </ul> <ul> <li>Registering on the Signal: You need to register on the <code>get_invites</code> signal, which provides the incident object and expects to receive a list of <code>users</code>.</li> </ul> <ul> <li>Signal Example: You can check one of our signals for a concrete example.</li> </ul> <p>Tips</p> <p>The signal can be triggered during the creation and update of an incident. Invitations will only be sent once all signals have responded. It is advisable to avoid API calls and to store data in the database beforehand.</p>"},{"location":"usage/integrations/#soses","title":"SOSes","text":"<p>You can configure SOSes in the back-office.</p>"},{"location":"usage/integrations/#jira","title":"Jira","text":""},{"location":"usage/integrations/#features_2","title":"Features","text":"<p>Automatically create Jira tickets when FireFighter incidents are created. Each incident will generate a corresponding Jira ticket with incident details, priority, and category information.</p> <p>Synchronization Behavior</p> <p>Important: Jira integration is unidirectional (Impact \u2192 Jira only)</p> <ul> <li>\u2705 Impact incidents automatically create Jira tickets</li> <li>\u2705 Full P1-P5 priority mapping supported</li> <li>\u274c Impact is NOT notified when Jira tickets are updated</li> <li>\u274c Impact is NOT notified when Jira tickets are closed</li> <li>\u274c No webhook from Jira back to Impact</li> </ul> <p>Manual monitoring of Jira tickets is required to track their resolution status.</p>"},{"location":"usage/integrations/#settings-and-configuration_2","title":"Settings and configuration","text":"<p>Basic configuration with environment variables (in <code>.env</code> file):</p> <pre><code># Enable Jira integration\nENABLE_JIRA=True\n\n# Jira API settings\nRAID_JIRA_API_URL=\"mycompany.atlassian.local\"\nRAID_JIRA_API_USER=\"teamqraft@mycompany.local\"\nRAID_JIRA_API_PASSWORD=\"XXXXXXXXXXXXX\"\n\n# Enable RAID module (requires JIRA settings)\nENABLE_RAID=True\n\n# RAID configuration\nRAID_DEFAULT_JIRA_QRAFT_USER_ID=\"XXXXXXXX\"\nRAID_JIRA_PROJECT_KEY=\"T2\"\nRAID_TOOLBOX_URL=https://toolbox.mycompany.com/login\n\n# Optional: Custom field for incident category\nRAID_JIRA_INCIDENT_CATEGORY_FIELD=\"customfield_12369\"\n</code></pre>"},{"location":"usage/integrations/#incident-category-field","title":"Incident Category Field","text":"<p>If <code>RAID_JIRA_INCIDENT_CATEGORY_FIELD</code> is configured, the incident category will be populated in the specified Jira custom field in addition to being mentioned in the ticket description.</p> <p>Note</p> <p>Without this configuration, the incident category will only appear in the ticket description.</p>"},{"location":"usage/integrations/#priority-mapping","title":"Priority Mapping","text":"<p>FireFighter incidents are mapped to Jira tickets with corresponding priority levels:</p> Impact Priority Jira Priority Description P1 1 Critical - System outage, complete service failure P2 2 High - Major functionality impaired, significant impact P3 3 Medium - Minor functionality affected, moderate impact P4 4 Low - Small issues, minimal impact P5 5 Lowest - Cosmetic issues, enhancement requests <p>Priority Fallback</p> <p>If an incident has an invalid priority value (outside P1-P5 range), it will automatically fallback to P1 (Critical) in Jira to ensure proper escalation.</p>"},{"location":"usage/integrations/#ticket-information","title":"Ticket Information","text":"<p>Each Jira ticket created from a FireFighter incident includes:</p> <ul> <li>Summary: Incident title</li> <li>Description: Incident description with:<ul> <li>Incident category and group information</li> <li>Priority level with emoji indicator</li> <li>Links to Slack conversation and FireFighter incident page</li> </ul> </li> <li>Priority: Mapped from P1-P5 as described above</li> <li>Reporter: The user who created the incident (with fallback to default user)</li> <li>Labels: Custom labels if configured</li> <li>Custom Fields: Incident category (if custom field is configured)</li> </ul>"}]}