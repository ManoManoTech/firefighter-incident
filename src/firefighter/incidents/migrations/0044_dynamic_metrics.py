# Generated by Django 4.2.3 on 2023-08-03 07:59
from __future__ import annotations

import datetime
from typing import TYPE_CHECKING, cast

import django.core.validators
import django.db.migrations.operations.special
import django.db.models.deletion
from django.db import migrations, models
from django.db.models import Q

if TYPE_CHECKING:
    from firefighter.incidents.models.metric_type import MetricType
    from firefighter.incidents.models.milestone_type import MilestoneType


def add_milestonetypes(apps, schema_editor):
    MilestoneType: type[MilestoneType] = cast(
        "type[MilestoneType]", apps.get_model("incidents", "MilestoneType")
    )
    MilestoneType.objects.bulk_create(
        [
            MilestoneType(
                summary="*Started*, when the first issues arose.",
                name="Started",
                event_type="started",
                required=True,
                user_editable=True,
            ),
            MilestoneType(
                summary="*Detected*, when the monitor triggered or someone noticed.",
                name="Detected",
                event_type="detected",
                required=True,
                user_editable=True,
            ),
            MilestoneType(
                summary="*Declared*, when the incident has been acknowledged and opened.",
                name="Declared",
                event_type="declared",
                required=True,
                user_editable=False,
            ),
            MilestoneType(
                summary="*Recovered*, when the impact is no longer apparent.",
                name="Recovered",
                event_type="recovered",
                required=True,
                user_editable=True,
            ),
            MilestoneType(
                summary="*Resolved*, when everything is back to a steady state.",
                name="Resolved",
                event_type="resolved",
                required=False,
                user_editable=False,
                asked_for=False,
            ),
            MilestoneType(
                summary="*Mitigated*, when actions (fixes, rollbacks...) have been applied.",
                name="Mitigated",
                event_type="mitigated",
                required=False,
                user_editable=False,
                asked_for=False,
            ),
        ]
    )


def add_metricstypes(apps, schema_editor):
    MilestoneType = cast(
        "type[MilestoneType]", apps.get_model("incidents", "MilestoneType")
    )
    MetricType = cast("type[MetricType]", apps.get_model("incidents", "MetricType"))

    MetricType.objects.bulk_create(
        [
            MetricType(
                type="time_to_detect",
                name="Time To Detect",
                code="TTD",
                description="The time it took before the problem was detected, from when the problem started.",
                milestone_lhs=MilestoneType.objects.get(event_type="detected"),
                milestone_rhs=MilestoneType.objects.get(event_type="started"),
            ),
            MetricType(
                type="time_to_internal_response",
                name="Time To Acknowledge",
                code="TTA",
                description="The time it took before the incident was declared, from when the problem started.",
                milestone_lhs=MilestoneType.objects.get(event_type="declared"),
                milestone_rhs=MilestoneType.objects.get(event_type="started"),
            ),
            MetricType(
                type="time_to_repair",
                name="Time To Repair",
                code="TTRep",
                description="The time it took to act (rollback, fix...), from when the incident was declared.",
                milestone_lhs=MilestoneType.objects.get(event_type="mitigated"),
                milestone_rhs=MilestoneType.objects.get(event_type="declared"),
            ),
            MetricType(
                type="time_to_fix",
                name="Time To Fix",
                code="TTF",
                description="The time it took for our teams to put services back in an healthy state, from when the incident was declared.",
                milestone_lhs=MilestoneType.objects.get(event_type="recovered"),
                milestone_rhs=MilestoneType.objects.get(event_type="declared"),
            ),
            MetricType(
                type="time_to_recovery",
                name="Time To Recovery",
                code="TTRec",
                description="The time it took for our teams to put services back in an healthy state, from when the problem started.",
                milestone_lhs=MilestoneType.objects.get(event_type="recovered"),
                milestone_rhs=MilestoneType.objects.get(event_type="started"),
            ),
            MetricType(
                type="time_to_respond",
                name="Time To Respond",
                code="TTResp",
                description="The time it took for our teams to put services back in an healthy state, from when the problem was detected.",
                milestone_lhs=MilestoneType.objects.get(event_type="recovered"),
                milestone_rhs=MilestoneType.objects.get(event_type="detected"),
            ),
            MetricType(
                type="time_to_resolve",
                name="Time To Resolve",
                code="TTReso",
                description="The time it took before the incident was resolved, from when it started.",
                milestone_lhs=MilestoneType.objects.get(event_type="resolved"),
                milestone_rhs=MilestoneType.objects.get(event_type="started"),
            ),
        ]
    )


def migrate_incident_metrics(apps, schema_editor):
    Incident = apps.get_model("incidents", "Incident")
    IncidentMetric = apps.get_model("incidents", "IncidentMetric")
    metric_types_caches = {
        metric_type.type: metric_type
        for metric_type in apps.get_model("incidents", "MetricType").objects.all()
    }
    new_incident_metrics = []
    # Exclude if there  are no time_to metrics
    for incident in Incident.objects.exclude(
        Q(time_to_repair=None)
        & Q(time_to_detect=None)
        & Q(time_to_internal_response=None)
        & Q(time_to_respond=None)
        & Q(time_to_fix=None)
        & Q(time_to_resolve=None)
        & Q(time_to_recovery=None)
    ):
        for time_to_field in [
            "time_to_repair",
            "time_to_detect",
            "time_to_internal_response",
            "time_to_respond",
            "time_to_fix",
            "time_to_resolve",
            "time_to_recovery",
        ]:
            if getattr(incident, time_to_field) is not None:
                new_incident_metrics.append(  # noqa: PERF401
                    IncidentMetric(
                        incident=incident,
                        metric_type=metric_types_caches[time_to_field],
                        duration=getattr(incident, time_to_field),
                    )
                )
    IncidentMetric.objects.bulk_create(new_incident_metrics)


def reverse_migrate_incident_metrics(apps, schema_editor):
    IncidentMetric = apps.get_model("incidents", "IncidentMetric")

    for metric in IncidentMetric.objects.all():
        setattr(metric.incident, metric.metric_type.type, metric.duration)
        metric.incident.save()


class Migration(migrations.Migration):
    dependencies = [
        ("incidents", "0043_impactlevel_emoji_impacttype_emoji"),
    ]

    operations = [
        migrations.CreateModel(
            name="MilestoneType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Title or name (e.g. Recovered)", max_length=50
                    ),
                ),
                (
                    "event_type",
                    models.SlugField(
                        help_text="Technical name, slugified version of the name (e.g. recovered)",
                        unique=True,
                    ),
                ),
                (
                    "summary",
                    models.CharField(
                        help_text="Slack Markdown summary of the milestone (e.g. *Recovered*, when the impact is no longer apparent.)",
                        max_length=250,
                    ),
                ),
                (
                    "user_editable",
                    models.BooleanField(
                        help_text="Can be edited by users (else, system event)."
                    ),
                ),
                (
                    "required",
                    models.BooleanField(
                        help_text="Is required for the incident to be considered as complete."
                    ),
                ),
                (
                    "asked_for",
                    models.BooleanField(
                        default=True, help_text="Asked for in the form."
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Milestone Type",
                "verbose_name_plural": "Milestone Types",
            },
        ),
        migrations.RunPython(
            code=add_milestonetypes,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.CreateModel(
            name="MetricType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Title or name (e.g. Time to Detect)", max_length=50
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="Short code (e.g. TTD)", max_length=10, unique=True
                    ),
                ),
                ("description", models.TextField()),
                (
                    "type",
                    models.SlugField(
                        blank=True,
                        help_text="Technical name, slugified version of the title (e.g. time_to_detect)",
                        unique=True,
                    ),
                ),
                (
                    "milestone_lhs",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="metric_type_lhs",
                        to="incidents.milestonetype",
                        help_text="The milestone that ends the metric (duration = milestone_lhs - milestone_rhs)",
                    ),
                ),
                (
                    "milestone_rhs",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="metric_type_rhs",
                        to="incidents.milestonetype",
                        help_text="The milestone that starts the metric (duration = milestone_lhs - milestone_rhs)",
                    ),
                ),
            ],
            options={
                "verbose_name": "Metric Type",
                "verbose_name_plural": "Metric Types",
            },
        ),
        migrations.RunPython(
            code=add_metricstypes,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.CreateModel(
            name="IncidentMetric",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "duration",
                    models.DurationField(
                        validators=[
                            django.core.validators.MinValueValidator(
                                datetime.timedelta(0)
                            )
                        ]
                    ),
                ),
                (
                    "incident",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="metric_set",
                        to="incidents.incident",
                    ),
                ),
                (
                    "metric_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="incidents.metrictype",
                    ),
                ),
            ],
            options={
                "verbose_name": "Incident Metric",
                "verbose_name_plural": "Incident Metrics",
            },
        ),
        migrations.RunPython(
            code=migrate_incident_metrics,
            reverse_code=reverse_migrate_incident_metrics,
        ),
        migrations.AddConstraint(
            model_name="incidentmetric",
            constraint=models.UniqueConstraint(
                fields=("incident", "metric_type"),
                name="incidents_incidentmetric__incident_metric_type_unique",
            ),
        ),
        migrations.RemoveField(
            model_name="incident",
            name="time_to_detect",
        ),
        migrations.RemoveField(
            model_name="incident",
            name="time_to_fix",
        ),
        migrations.RemoveField(
            model_name="incident",
            name="time_to_internal_response",
        ),
        migrations.RemoveField(
            model_name="incident",
            name="time_to_recovery",
        ),
        migrations.RemoveField(
            model_name="incident",
            name="time_to_repair",
        ),
        migrations.RemoveField(
            model_name="incident",
            name="time_to_resolve",
        ),
        migrations.RemoveField(
            model_name="incident",
            name="time_to_respond",
        ),
        migrations.AddField(
            model_name="incident",
            name="metrics",
            field=models.ManyToManyField(
                through="incidents.IncidentMetric", to="incidents.metrictype"
            ),
        ),
        migrations.AddConstraint(
            model_name="incidentmetric",
            constraint=models.CheckConstraint(
                check=models.Q(("duration__gte", datetime.timedelta(0))),
                name="incidents_incidentmetric__duration_positive",
            ),
        ),
        migrations.AddConstraint(
            model_name="metrictype",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("milestone_lhs", models.F("milestone_rhs")), _negated=True
                ),
                name="incidents_metrictype__milestone_lhs_not_equal_milestone_rhs",
                violation_error_message="The milestone that ends the metric cannot be the same as the milestone that starts the metric.",
            ),
        ),
    ]
