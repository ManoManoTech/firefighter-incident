# Generated by Django 4.1.7 on 2023-04-03 21:18
from __future__ import annotations

from django.db import connection, migrations, models


def import_area_data(apps, schema_editor):
    RaidArea = apps.get_model("raid", "RaidArea")
    data = [
        (3, "Sellers", "Dashboard analytics"),
        (4, "Sellers", "Order validation"),
        (5, "Sellers", "Refunds"),
        (6, "Sellers", "Order tracking"),
        (7, "Sellers", "Returns"),
        (41, "Internal", "BO>Customers"),
        (42, "Internal", "BO>Messaging system"),
        (43, "Internal", "BO>Sellers"),
        (44, "Internal", "BO>Content"),
        (45, "Internal", "BO>Finance"),
        (46, "Internal", "BO>Fraud"),
        (47, "Internal", "BO>Orders"),
        (48, "Internal", "BO>Marketing"),
        (49, "Internal", "BO>Coupons"),
        (50, "Internal", "BO>Reporting"),
        (51, "Internal", "BO>Delivery messages"),
        (52, "Internal", "Toolbox"),
        (53, "Internal", "Security"),
        (54, "Internal", "Database"),
        (55, "Internal", "ðŸš€ Onboarding"),
        (2, "Sellers", "Login"),
        (8, "Sellers", "Messaging system"),
        (9, "Sellers", "Invoice"),
        (10, "Sellers", "Catalog management"),
        (11, "Sellers", "Catalog import"),
        (12, "Sellers", "Sponsor products"),
        (13, "Sellers", "Advanced analytics"),
        (14, "Sellers", "Booster subscription"),
        (15, "Sellers", "Settings (holidays, VAT)"),
        (16, "Sellers", "Sellers permission"),
        (17, "Sellers", "Shipping configuration"),
        (18, "Sellers", "MF Stock Replenishment"),
        (19, "Sellers", "MF Stock management"),
        (20, "Sellers", "Other"),
        (21, "Customers", "Site Content"),
        (22, "Customers", "ManoMano iOS app (B2C)"),
        (23, "Customers", "ManoMano Android app (B2C)"),
        (24, "Customers", "ManoManoPro iOS app (B2B)"),
        (25, "Customers", "ManoManoPro Android app (B2B)"),
        (26, "Customers", "Categorization"),
        (27, "Customers", "Search and Filters"),
        (28, "Customers", "Customer Account"),
        (29, "Customers", "Checkout"),
        (30, "Customers", "Payment"),
        (31, "Customers", "Invoice as a Service (Invoicing Mandate)"),
        (32, "Customers", "Coupons"),
        (33, "Customers", "Orders"),
        (34, "Customers", "Messages"),
        (35, "Customers", "Other"),
        (36, "Internal", "Legal issue: product to be removed"),
        (37, "Internal", "BO>Access"),
        (38, "Internal", "BO>Campaign Manager"),
        (39, "Internal", "BO>AB Testing"),
        (40, "Internal", "BO>Feature Flag"),
        (63, "Internal", "Workbench"),
        (67, "Internal", "Catalog BO"),
    ]
    for item in data:
        RaidArea.objects.create(id=item[0], area=item[1], name=item[2])


def reset_id_sequence(apps, schema_editor):
    with connection.cursor() as cursor:
        cursor.execute(
            """SELECT setval(pg_get_serial_sequence('"raid_raidarea"','id'), coalesce(max("id"), 1), max("id") IS NOT null) FROM "raid_raidarea";"""
        )


class Migration(migrations.Migration):
    dependencies = [
        ("raid", "0009_alter_jiraticket_business_impact"),
    ]

    operations = [
        migrations.CreateModel(
            name="RaidArea",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=128)),
                ("area", models.CharField(max_length=128)),
            ],
            options={
                "unique_together": {("name", "area")},
            },
        ),
        migrations.AlterField(
            model_name="raidarea",
            name="area",
            field=models.CharField(
                choices=[
                    ("Sellers", "Sellers"),
                    ("Internal", "Internal"),
                    ("Customers", "Customers"),
                ],
                max_length=32,
            ),
        ),
        migrations.RunPython(import_area_data, migrations.RunPython.noop),
        migrations.RunPython(reset_id_sequence, migrations.RunPython.noop),
    ]
